
EBU6475_EoM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000090fc  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000a4c  080092a0  080092a0  0000a2a0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009cec  08009cec  0000b1d4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08009cec  08009cec  0000acec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009cf4  08009cf4  0000b1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009cf4  08009cf4  0000acf4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009cf8  08009cf8  0000acf8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  08009cfc  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000314  200001d4  08009ed0  0000b1d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004e8  08009ed0  0000b4e8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b1d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e321  00000000  00000000  0000b204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000248c  00000000  00000000  00019525  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000dc0  00000000  00000000  0001b9b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000aa3  00000000  00000000  0001c778  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000184b8  00000000  00000000  0001d21b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011373  00000000  00000000  000356d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000906f1  00000000  00000000  00046a46  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d7137  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004d70  00000000  00000000  000d717c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004f  00000000  00000000  000dbeec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001d4 	.word	0x200001d4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08009284 	.word	0x08009284

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001d8 	.word	0x200001d8
 80001dc:	08009284 	.word	0x08009284

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b9be 	b.w	800102c <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f83c 	bl	8000d34 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__aeabi_d2lz>:
 8000cc8:	b538      	push	{r3, r4, r5, lr}
 8000cca:	2200      	movs	r2, #0
 8000ccc:	2300      	movs	r3, #0
 8000cce:	4604      	mov	r4, r0
 8000cd0:	460d      	mov	r5, r1
 8000cd2:	f7ff ff0b 	bl	8000aec <__aeabi_dcmplt>
 8000cd6:	b928      	cbnz	r0, 8000ce4 <__aeabi_d2lz+0x1c>
 8000cd8:	4620      	mov	r0, r4
 8000cda:	4629      	mov	r1, r5
 8000cdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ce0:	f000 b80a 	b.w	8000cf8 <__aeabi_d2ulz>
 8000ce4:	4620      	mov	r0, r4
 8000ce6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cea:	f000 f805 	bl	8000cf8 <__aeabi_d2ulz>
 8000cee:	4240      	negs	r0, r0
 8000cf0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf4:	bd38      	pop	{r3, r4, r5, pc}
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_d2ulz>:
 8000cf8:	b5d0      	push	{r4, r6, r7, lr}
 8000cfa:	4b0c      	ldr	r3, [pc, #48]	@ (8000d2c <__aeabi_d2ulz+0x34>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	4606      	mov	r6, r0
 8000d00:	460f      	mov	r7, r1
 8000d02:	f7ff fc81 	bl	8000608 <__aeabi_dmul>
 8000d06:	f7ff ff57 	bl	8000bb8 <__aeabi_d2uiz>
 8000d0a:	4604      	mov	r4, r0
 8000d0c:	f7ff fc02 	bl	8000514 <__aeabi_ui2d>
 8000d10:	4b07      	ldr	r3, [pc, #28]	@ (8000d30 <__aeabi_d2ulz+0x38>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	f7ff fc78 	bl	8000608 <__aeabi_dmul>
 8000d18:	4602      	mov	r2, r0
 8000d1a:	460b      	mov	r3, r1
 8000d1c:	4630      	mov	r0, r6
 8000d1e:	4639      	mov	r1, r7
 8000d20:	f7ff faba 	bl	8000298 <__aeabi_dsub>
 8000d24:	f7ff ff48 	bl	8000bb8 <__aeabi_d2uiz>
 8000d28:	4621      	mov	r1, r4
 8000d2a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d2c:	3df00000 	.word	0x3df00000
 8000d30:	41f00000 	.word	0x41f00000

08000d34 <__udivmoddi4>:
 8000d34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d38:	9d08      	ldr	r5, [sp, #32]
 8000d3a:	468e      	mov	lr, r1
 8000d3c:	4604      	mov	r4, r0
 8000d3e:	4688      	mov	r8, r1
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d14a      	bne.n	8000dda <__udivmoddi4+0xa6>
 8000d44:	428a      	cmp	r2, r1
 8000d46:	4617      	mov	r7, r2
 8000d48:	d962      	bls.n	8000e10 <__udivmoddi4+0xdc>
 8000d4a:	fab2 f682 	clz	r6, r2
 8000d4e:	b14e      	cbz	r6, 8000d64 <__udivmoddi4+0x30>
 8000d50:	f1c6 0320 	rsb	r3, r6, #32
 8000d54:	fa01 f806 	lsl.w	r8, r1, r6
 8000d58:	fa20 f303 	lsr.w	r3, r0, r3
 8000d5c:	40b7      	lsls	r7, r6
 8000d5e:	ea43 0808 	orr.w	r8, r3, r8
 8000d62:	40b4      	lsls	r4, r6
 8000d64:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d68:	fa1f fc87 	uxth.w	ip, r7
 8000d6c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000d70:	0c23      	lsrs	r3, r4, #16
 8000d72:	fb0e 8811 	mls	r8, lr, r1, r8
 8000d76:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d7a:	fb01 f20c 	mul.w	r2, r1, ip
 8000d7e:	429a      	cmp	r2, r3
 8000d80:	d909      	bls.n	8000d96 <__udivmoddi4+0x62>
 8000d82:	18fb      	adds	r3, r7, r3
 8000d84:	f101 30ff 	add.w	r0, r1, #4294967295
 8000d88:	f080 80ea 	bcs.w	8000f60 <__udivmoddi4+0x22c>
 8000d8c:	429a      	cmp	r2, r3
 8000d8e:	f240 80e7 	bls.w	8000f60 <__udivmoddi4+0x22c>
 8000d92:	3902      	subs	r1, #2
 8000d94:	443b      	add	r3, r7
 8000d96:	1a9a      	subs	r2, r3, r2
 8000d98:	b2a3      	uxth	r3, r4
 8000d9a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d9e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000da2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000da6:	fb00 fc0c 	mul.w	ip, r0, ip
 8000daa:	459c      	cmp	ip, r3
 8000dac:	d909      	bls.n	8000dc2 <__udivmoddi4+0x8e>
 8000dae:	18fb      	adds	r3, r7, r3
 8000db0:	f100 32ff 	add.w	r2, r0, #4294967295
 8000db4:	f080 80d6 	bcs.w	8000f64 <__udivmoddi4+0x230>
 8000db8:	459c      	cmp	ip, r3
 8000dba:	f240 80d3 	bls.w	8000f64 <__udivmoddi4+0x230>
 8000dbe:	443b      	add	r3, r7
 8000dc0:	3802      	subs	r0, #2
 8000dc2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000dc6:	eba3 030c 	sub.w	r3, r3, ip
 8000dca:	2100      	movs	r1, #0
 8000dcc:	b11d      	cbz	r5, 8000dd6 <__udivmoddi4+0xa2>
 8000dce:	40f3      	lsrs	r3, r6
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	e9c5 3200 	strd	r3, r2, [r5]
 8000dd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dda:	428b      	cmp	r3, r1
 8000ddc:	d905      	bls.n	8000dea <__udivmoddi4+0xb6>
 8000dde:	b10d      	cbz	r5, 8000de4 <__udivmoddi4+0xb0>
 8000de0:	e9c5 0100 	strd	r0, r1, [r5]
 8000de4:	2100      	movs	r1, #0
 8000de6:	4608      	mov	r0, r1
 8000de8:	e7f5      	b.n	8000dd6 <__udivmoddi4+0xa2>
 8000dea:	fab3 f183 	clz	r1, r3
 8000dee:	2900      	cmp	r1, #0
 8000df0:	d146      	bne.n	8000e80 <__udivmoddi4+0x14c>
 8000df2:	4573      	cmp	r3, lr
 8000df4:	d302      	bcc.n	8000dfc <__udivmoddi4+0xc8>
 8000df6:	4282      	cmp	r2, r0
 8000df8:	f200 8105 	bhi.w	8001006 <__udivmoddi4+0x2d2>
 8000dfc:	1a84      	subs	r4, r0, r2
 8000dfe:	eb6e 0203 	sbc.w	r2, lr, r3
 8000e02:	2001      	movs	r0, #1
 8000e04:	4690      	mov	r8, r2
 8000e06:	2d00      	cmp	r5, #0
 8000e08:	d0e5      	beq.n	8000dd6 <__udivmoddi4+0xa2>
 8000e0a:	e9c5 4800 	strd	r4, r8, [r5]
 8000e0e:	e7e2      	b.n	8000dd6 <__udivmoddi4+0xa2>
 8000e10:	2a00      	cmp	r2, #0
 8000e12:	f000 8090 	beq.w	8000f36 <__udivmoddi4+0x202>
 8000e16:	fab2 f682 	clz	r6, r2
 8000e1a:	2e00      	cmp	r6, #0
 8000e1c:	f040 80a4 	bne.w	8000f68 <__udivmoddi4+0x234>
 8000e20:	1a8a      	subs	r2, r1, r2
 8000e22:	0c03      	lsrs	r3, r0, #16
 8000e24:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e28:	b280      	uxth	r0, r0
 8000e2a:	b2bc      	uxth	r4, r7
 8000e2c:	2101      	movs	r1, #1
 8000e2e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000e32:	fb0e 221c 	mls	r2, lr, ip, r2
 8000e36:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000e3a:	fb04 f20c 	mul.w	r2, r4, ip
 8000e3e:	429a      	cmp	r2, r3
 8000e40:	d907      	bls.n	8000e52 <__udivmoddi4+0x11e>
 8000e42:	18fb      	adds	r3, r7, r3
 8000e44:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000e48:	d202      	bcs.n	8000e50 <__udivmoddi4+0x11c>
 8000e4a:	429a      	cmp	r2, r3
 8000e4c:	f200 80e0 	bhi.w	8001010 <__udivmoddi4+0x2dc>
 8000e50:	46c4      	mov	ip, r8
 8000e52:	1a9b      	subs	r3, r3, r2
 8000e54:	fbb3 f2fe 	udiv	r2, r3, lr
 8000e58:	fb0e 3312 	mls	r3, lr, r2, r3
 8000e5c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000e60:	fb02 f404 	mul.w	r4, r2, r4
 8000e64:	429c      	cmp	r4, r3
 8000e66:	d907      	bls.n	8000e78 <__udivmoddi4+0x144>
 8000e68:	18fb      	adds	r3, r7, r3
 8000e6a:	f102 30ff 	add.w	r0, r2, #4294967295
 8000e6e:	d202      	bcs.n	8000e76 <__udivmoddi4+0x142>
 8000e70:	429c      	cmp	r4, r3
 8000e72:	f200 80ca 	bhi.w	800100a <__udivmoddi4+0x2d6>
 8000e76:	4602      	mov	r2, r0
 8000e78:	1b1b      	subs	r3, r3, r4
 8000e7a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000e7e:	e7a5      	b.n	8000dcc <__udivmoddi4+0x98>
 8000e80:	f1c1 0620 	rsb	r6, r1, #32
 8000e84:	408b      	lsls	r3, r1
 8000e86:	fa22 f706 	lsr.w	r7, r2, r6
 8000e8a:	431f      	orrs	r7, r3
 8000e8c:	fa0e f401 	lsl.w	r4, lr, r1
 8000e90:	fa20 f306 	lsr.w	r3, r0, r6
 8000e94:	fa2e fe06 	lsr.w	lr, lr, r6
 8000e98:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000e9c:	4323      	orrs	r3, r4
 8000e9e:	fa00 f801 	lsl.w	r8, r0, r1
 8000ea2:	fa1f fc87 	uxth.w	ip, r7
 8000ea6:	fbbe f0f9 	udiv	r0, lr, r9
 8000eaa:	0c1c      	lsrs	r4, r3, #16
 8000eac:	fb09 ee10 	mls	lr, r9, r0, lr
 8000eb0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000eb4:	fb00 fe0c 	mul.w	lr, r0, ip
 8000eb8:	45a6      	cmp	lr, r4
 8000eba:	fa02 f201 	lsl.w	r2, r2, r1
 8000ebe:	d909      	bls.n	8000ed4 <__udivmoddi4+0x1a0>
 8000ec0:	193c      	adds	r4, r7, r4
 8000ec2:	f100 3aff 	add.w	sl, r0, #4294967295
 8000ec6:	f080 809c 	bcs.w	8001002 <__udivmoddi4+0x2ce>
 8000eca:	45a6      	cmp	lr, r4
 8000ecc:	f240 8099 	bls.w	8001002 <__udivmoddi4+0x2ce>
 8000ed0:	3802      	subs	r0, #2
 8000ed2:	443c      	add	r4, r7
 8000ed4:	eba4 040e 	sub.w	r4, r4, lr
 8000ed8:	fa1f fe83 	uxth.w	lr, r3
 8000edc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000ee0:	fb09 4413 	mls	r4, r9, r3, r4
 8000ee4:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000ee8:	fb03 fc0c 	mul.w	ip, r3, ip
 8000eec:	45a4      	cmp	ip, r4
 8000eee:	d908      	bls.n	8000f02 <__udivmoddi4+0x1ce>
 8000ef0:	193c      	adds	r4, r7, r4
 8000ef2:	f103 3eff 	add.w	lr, r3, #4294967295
 8000ef6:	f080 8082 	bcs.w	8000ffe <__udivmoddi4+0x2ca>
 8000efa:	45a4      	cmp	ip, r4
 8000efc:	d97f      	bls.n	8000ffe <__udivmoddi4+0x2ca>
 8000efe:	3b02      	subs	r3, #2
 8000f00:	443c      	add	r4, r7
 8000f02:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000f06:	eba4 040c 	sub.w	r4, r4, ip
 8000f0a:	fba0 ec02 	umull	lr, ip, r0, r2
 8000f0e:	4564      	cmp	r4, ip
 8000f10:	4673      	mov	r3, lr
 8000f12:	46e1      	mov	r9, ip
 8000f14:	d362      	bcc.n	8000fdc <__udivmoddi4+0x2a8>
 8000f16:	d05f      	beq.n	8000fd8 <__udivmoddi4+0x2a4>
 8000f18:	b15d      	cbz	r5, 8000f32 <__udivmoddi4+0x1fe>
 8000f1a:	ebb8 0203 	subs.w	r2, r8, r3
 8000f1e:	eb64 0409 	sbc.w	r4, r4, r9
 8000f22:	fa04 f606 	lsl.w	r6, r4, r6
 8000f26:	fa22 f301 	lsr.w	r3, r2, r1
 8000f2a:	431e      	orrs	r6, r3
 8000f2c:	40cc      	lsrs	r4, r1
 8000f2e:	e9c5 6400 	strd	r6, r4, [r5]
 8000f32:	2100      	movs	r1, #0
 8000f34:	e74f      	b.n	8000dd6 <__udivmoddi4+0xa2>
 8000f36:	fbb1 fcf2 	udiv	ip, r1, r2
 8000f3a:	0c01      	lsrs	r1, r0, #16
 8000f3c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000f40:	b280      	uxth	r0, r0
 8000f42:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000f46:	463b      	mov	r3, r7
 8000f48:	4638      	mov	r0, r7
 8000f4a:	463c      	mov	r4, r7
 8000f4c:	46b8      	mov	r8, r7
 8000f4e:	46be      	mov	lr, r7
 8000f50:	2620      	movs	r6, #32
 8000f52:	fbb1 f1f7 	udiv	r1, r1, r7
 8000f56:	eba2 0208 	sub.w	r2, r2, r8
 8000f5a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000f5e:	e766      	b.n	8000e2e <__udivmoddi4+0xfa>
 8000f60:	4601      	mov	r1, r0
 8000f62:	e718      	b.n	8000d96 <__udivmoddi4+0x62>
 8000f64:	4610      	mov	r0, r2
 8000f66:	e72c      	b.n	8000dc2 <__udivmoddi4+0x8e>
 8000f68:	f1c6 0220 	rsb	r2, r6, #32
 8000f6c:	fa2e f302 	lsr.w	r3, lr, r2
 8000f70:	40b7      	lsls	r7, r6
 8000f72:	40b1      	lsls	r1, r6
 8000f74:	fa20 f202 	lsr.w	r2, r0, r2
 8000f78:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000f7c:	430a      	orrs	r2, r1
 8000f7e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000f82:	b2bc      	uxth	r4, r7
 8000f84:	fb0e 3318 	mls	r3, lr, r8, r3
 8000f88:	0c11      	lsrs	r1, r2, #16
 8000f8a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f8e:	fb08 f904 	mul.w	r9, r8, r4
 8000f92:	40b0      	lsls	r0, r6
 8000f94:	4589      	cmp	r9, r1
 8000f96:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000f9a:	b280      	uxth	r0, r0
 8000f9c:	d93e      	bls.n	800101c <__udivmoddi4+0x2e8>
 8000f9e:	1879      	adds	r1, r7, r1
 8000fa0:	f108 3cff 	add.w	ip, r8, #4294967295
 8000fa4:	d201      	bcs.n	8000faa <__udivmoddi4+0x276>
 8000fa6:	4589      	cmp	r9, r1
 8000fa8:	d81f      	bhi.n	8000fea <__udivmoddi4+0x2b6>
 8000faa:	eba1 0109 	sub.w	r1, r1, r9
 8000fae:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fb2:	fb09 f804 	mul.w	r8, r9, r4
 8000fb6:	fb0e 1119 	mls	r1, lr, r9, r1
 8000fba:	b292      	uxth	r2, r2
 8000fbc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000fc0:	4542      	cmp	r2, r8
 8000fc2:	d229      	bcs.n	8001018 <__udivmoddi4+0x2e4>
 8000fc4:	18ba      	adds	r2, r7, r2
 8000fc6:	f109 31ff 	add.w	r1, r9, #4294967295
 8000fca:	d2c4      	bcs.n	8000f56 <__udivmoddi4+0x222>
 8000fcc:	4542      	cmp	r2, r8
 8000fce:	d2c2      	bcs.n	8000f56 <__udivmoddi4+0x222>
 8000fd0:	f1a9 0102 	sub.w	r1, r9, #2
 8000fd4:	443a      	add	r2, r7
 8000fd6:	e7be      	b.n	8000f56 <__udivmoddi4+0x222>
 8000fd8:	45f0      	cmp	r8, lr
 8000fda:	d29d      	bcs.n	8000f18 <__udivmoddi4+0x1e4>
 8000fdc:	ebbe 0302 	subs.w	r3, lr, r2
 8000fe0:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000fe4:	3801      	subs	r0, #1
 8000fe6:	46e1      	mov	r9, ip
 8000fe8:	e796      	b.n	8000f18 <__udivmoddi4+0x1e4>
 8000fea:	eba7 0909 	sub.w	r9, r7, r9
 8000fee:	4449      	add	r1, r9
 8000ff0:	f1a8 0c02 	sub.w	ip, r8, #2
 8000ff4:	fbb1 f9fe 	udiv	r9, r1, lr
 8000ff8:	fb09 f804 	mul.w	r8, r9, r4
 8000ffc:	e7db      	b.n	8000fb6 <__udivmoddi4+0x282>
 8000ffe:	4673      	mov	r3, lr
 8001000:	e77f      	b.n	8000f02 <__udivmoddi4+0x1ce>
 8001002:	4650      	mov	r0, sl
 8001004:	e766      	b.n	8000ed4 <__udivmoddi4+0x1a0>
 8001006:	4608      	mov	r0, r1
 8001008:	e6fd      	b.n	8000e06 <__udivmoddi4+0xd2>
 800100a:	443b      	add	r3, r7
 800100c:	3a02      	subs	r2, #2
 800100e:	e733      	b.n	8000e78 <__udivmoddi4+0x144>
 8001010:	f1ac 0c02 	sub.w	ip, ip, #2
 8001014:	443b      	add	r3, r7
 8001016:	e71c      	b.n	8000e52 <__udivmoddi4+0x11e>
 8001018:	4649      	mov	r1, r9
 800101a:	e79c      	b.n	8000f56 <__udivmoddi4+0x222>
 800101c:	eba1 0109 	sub.w	r1, r1, r9
 8001020:	46c4      	mov	ip, r8
 8001022:	fbb1 f9fe 	udiv	r9, r1, lr
 8001026:	fb09 f804 	mul.w	r8, r9, r4
 800102a:	e7c4      	b.n	8000fb6 <__udivmoddi4+0x282>

0800102c <__aeabi_idiv0>:
 800102c:	4770      	bx	lr
 800102e:	bf00      	nop

08001030 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b08a      	sub	sp, #40	@ 0x28
 8001034:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001036:	f107 0314 	add.w	r3, r7, #20
 800103a:	2200      	movs	r2, #0
 800103c:	601a      	str	r2, [r3, #0]
 800103e:	605a      	str	r2, [r3, #4]
 8001040:	609a      	str	r2, [r3, #8]
 8001042:	60da      	str	r2, [r3, #12]
 8001044:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001046:	2300      	movs	r3, #0
 8001048:	613b      	str	r3, [r7, #16]
 800104a:	4b31      	ldr	r3, [pc, #196]	@ (8001110 <MX_GPIO_Init+0xe0>)
 800104c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800104e:	4a30      	ldr	r2, [pc, #192]	@ (8001110 <MX_GPIO_Init+0xe0>)
 8001050:	f043 0304 	orr.w	r3, r3, #4
 8001054:	6313      	str	r3, [r2, #48]	@ 0x30
 8001056:	4b2e      	ldr	r3, [pc, #184]	@ (8001110 <MX_GPIO_Init+0xe0>)
 8001058:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800105a:	f003 0304 	and.w	r3, r3, #4
 800105e:	613b      	str	r3, [r7, #16]
 8001060:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001062:	2300      	movs	r3, #0
 8001064:	60fb      	str	r3, [r7, #12]
 8001066:	4b2a      	ldr	r3, [pc, #168]	@ (8001110 <MX_GPIO_Init+0xe0>)
 8001068:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800106a:	4a29      	ldr	r2, [pc, #164]	@ (8001110 <MX_GPIO_Init+0xe0>)
 800106c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001070:	6313      	str	r3, [r2, #48]	@ 0x30
 8001072:	4b27      	ldr	r3, [pc, #156]	@ (8001110 <MX_GPIO_Init+0xe0>)
 8001074:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001076:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800107a:	60fb      	str	r3, [r7, #12]
 800107c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800107e:	2300      	movs	r3, #0
 8001080:	60bb      	str	r3, [r7, #8]
 8001082:	4b23      	ldr	r3, [pc, #140]	@ (8001110 <MX_GPIO_Init+0xe0>)
 8001084:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001086:	4a22      	ldr	r2, [pc, #136]	@ (8001110 <MX_GPIO_Init+0xe0>)
 8001088:	f043 0301 	orr.w	r3, r3, #1
 800108c:	6313      	str	r3, [r2, #48]	@ 0x30
 800108e:	4b20      	ldr	r3, [pc, #128]	@ (8001110 <MX_GPIO_Init+0xe0>)
 8001090:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001092:	f003 0301 	and.w	r3, r3, #1
 8001096:	60bb      	str	r3, [r7, #8]
 8001098:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800109a:	2300      	movs	r3, #0
 800109c:	607b      	str	r3, [r7, #4]
 800109e:	4b1c      	ldr	r3, [pc, #112]	@ (8001110 <MX_GPIO_Init+0xe0>)
 80010a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010a2:	4a1b      	ldr	r2, [pc, #108]	@ (8001110 <MX_GPIO_Init+0xe0>)
 80010a4:	f043 0302 	orr.w	r3, r3, #2
 80010a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80010aa:	4b19      	ldr	r3, [pc, #100]	@ (8001110 <MX_GPIO_Init+0xe0>)
 80010ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010ae:	f003 0302 	and.w	r3, r3, #2
 80010b2:	607b      	str	r3, [r7, #4]
 80010b4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OLED_SDA_GPIO_Port, OLED_SDA_Pin, GPIO_PIN_RESET);
 80010b6:	2200      	movs	r2, #0
 80010b8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80010bc:	4815      	ldr	r0, [pc, #84]	@ (8001114 <MX_GPIO_Init+0xe4>)
 80010be:	f001 fb3d 	bl	800273c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OLED_SCL_GPIO_Port, OLED_SCL_Pin, GPIO_PIN_RESET);
 80010c2:	2200      	movs	r2, #0
 80010c4:	2180      	movs	r1, #128	@ 0x80
 80010c6:	4814      	ldr	r0, [pc, #80]	@ (8001118 <MX_GPIO_Init+0xe8>)
 80010c8:	f001 fb38 	bl	800273c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : OLED_SDA_Pin */
  GPIO_InitStruct.Pin = OLED_SDA_Pin;
 80010cc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80010d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010d2:	2301      	movs	r3, #1
 80010d4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d6:	2300      	movs	r3, #0
 80010d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010da:	2300      	movs	r3, #0
 80010dc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(OLED_SDA_GPIO_Port, &GPIO_InitStruct);
 80010de:	f107 0314 	add.w	r3, r7, #20
 80010e2:	4619      	mov	r1, r3
 80010e4:	480b      	ldr	r0, [pc, #44]	@ (8001114 <MX_GPIO_Init+0xe4>)
 80010e6:	f001 f9a5 	bl	8002434 <HAL_GPIO_Init>

  /*Configure GPIO pin : OLED_SCL_Pin */
  GPIO_InitStruct.Pin = OLED_SCL_Pin;
 80010ea:	2380      	movs	r3, #128	@ 0x80
 80010ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010ee:	2301      	movs	r3, #1
 80010f0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f2:	2300      	movs	r3, #0
 80010f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010f6:	2300      	movs	r3, #0
 80010f8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(OLED_SCL_GPIO_Port, &GPIO_InitStruct);
 80010fa:	f107 0314 	add.w	r3, r7, #20
 80010fe:	4619      	mov	r1, r3
 8001100:	4805      	ldr	r0, [pc, #20]	@ (8001118 <MX_GPIO_Init+0xe8>)
 8001102:	f001 f997 	bl	8002434 <HAL_GPIO_Init>

}
 8001106:	bf00      	nop
 8001108:	3728      	adds	r7, #40	@ 0x28
 800110a:	46bd      	mov	sp, r7
 800110c:	bd80      	pop	{r7, pc}
 800110e:	bf00      	nop
 8001110:	40023800 	.word	0x40023800
 8001114:	40020800 	.word	0x40020800
 8001118:	40020400 	.word	0x40020400

0800111c <main>:

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void) {
 800111c:	b580      	push	{r7, lr}
 800111e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001120:	f000 ffe0 	bl	80020e4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001124:	f000 f848 	bl	80011b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001128:	f7ff ff82 	bl	8001030 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800112c:	f000 ff3e 	bl	8001fac <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8001130:	f000 fc66 	bl	8001a00 <MX_TIM1_Init>
  MX_TIM2_Init();
 8001134:	f000 fcf6 	bl	8001b24 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001138:	f000 fd48 	bl	8001bcc <MX_TIM3_Init>
  MX_TIM4_Init();
 800113c:	f000 fd9a 	bl	8001c74 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim4);
 8001140:	4817      	ldr	r0, [pc, #92]	@ (80011a0 <main+0x84>)
 8001142:	f001 fffd 	bl	8003140 <HAL_TIM_Base_Start_IT>
  HAL_Delay(100);
 8001146:	2064      	movs	r0, #100	@ 0x64
 8001148:	f001 f83e 	bl	80021c8 <HAL_Delay>
  Motor_Init();
 800114c:	f000 f8a4 	bl	8001298 <Motor_Init>
  HAL_Delay(100);
 8001150:	2064      	movs	r0, #100	@ 0x64
 8001152:	f001 f839 	bl	80021c8 <HAL_Delay>
  OLED_Init();
 8001156:	f000 faaa 	bl	80016ae <OLED_Init>
  HAL_Delay(100);
 800115a:	2064      	movs	r0, #100	@ 0x64
 800115c:	f001 f834 	bl	80021c8 <HAL_Delay>
  Motor_Stop();
 8001160:	f000 f908 	bl	8001374 <Motor_Stop>
    // sprintf(message, "s1: %d", motor_speed_1);
    // OLED_ShowString(1, 1, message);
    // sprintf(message, "s2: %d", motor_speed_2);
    // OLED_ShowString(2, 1, message);

    sprintf((char*)message, "c1: %ld   ", motor_counter_1);
 8001164:	4b0f      	ldr	r3, [pc, #60]	@ (80011a4 <main+0x88>)
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	461a      	mov	r2, r3
 800116a:	490f      	ldr	r1, [pc, #60]	@ (80011a8 <main+0x8c>)
 800116c:	480f      	ldr	r0, [pc, #60]	@ (80011ac <main+0x90>)
 800116e:	f004 fc49 	bl	8005a04 <siprintf>
    OLED_ShowString(3, 1, (char*)message);
 8001172:	4a0e      	ldr	r2, [pc, #56]	@ (80011ac <main+0x90>)
 8001174:	2101      	movs	r1, #1
 8001176:	2003      	movs	r0, #3
 8001178:	f000 fa74 	bl	8001664 <OLED_ShowString>
    sprintf((char*)message, "c2: %ld   ", motor_counter_2);
 800117c:	4b0c      	ldr	r3, [pc, #48]	@ (80011b0 <main+0x94>)
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	461a      	mov	r2, r3
 8001182:	490c      	ldr	r1, [pc, #48]	@ (80011b4 <main+0x98>)
 8001184:	4809      	ldr	r0, [pc, #36]	@ (80011ac <main+0x90>)
 8001186:	f004 fc3d 	bl	8005a04 <siprintf>
    OLED_ShowString(4, 1, (char*)message);
 800118a:	4a08      	ldr	r2, [pc, #32]	@ (80011ac <main+0x90>)
 800118c:	2101      	movs	r1, #1
 800118e:	2004      	movs	r0, #4
 8001190:	f000 fa68 	bl	8001664 <OLED_ShowString>
    HAL_Delay(100);
 8001194:	2064      	movs	r0, #100	@ 0x64
 8001196:	f001 f817 	bl	80021c8 <HAL_Delay>
    sprintf((char*)message, "c1: %ld   ", motor_counter_1);
 800119a:	bf00      	nop
 800119c:	e7e2      	b.n	8001164 <main+0x48>
 800119e:	bf00      	nop
 80011a0:	20000308 	.word	0x20000308
 80011a4:	20000224 	.word	0x20000224
 80011a8:	080092a0 	.word	0x080092a0
 80011ac:	200001f0 	.word	0x200001f0
 80011b0:	20000228 	.word	0x20000228
 80011b4:	080092ac 	.word	0x080092ac

080011b8 <SystemClock_Config>:

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void) {
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b094      	sub	sp, #80	@ 0x50
 80011bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011be:	f107 0320 	add.w	r3, r7, #32
 80011c2:	2230      	movs	r2, #48	@ 0x30
 80011c4:	2100      	movs	r1, #0
 80011c6:	4618      	mov	r0, r3
 80011c8:	f004 fc81 	bl	8005ace <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011cc:	f107 030c 	add.w	r3, r7, #12
 80011d0:	2200      	movs	r2, #0
 80011d2:	601a      	str	r2, [r3, #0]
 80011d4:	605a      	str	r2, [r3, #4]
 80011d6:	609a      	str	r2, [r3, #8]
 80011d8:	60da      	str	r2, [r3, #12]
 80011da:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80011dc:	2300      	movs	r3, #0
 80011de:	60bb      	str	r3, [r7, #8]
 80011e0:	4b28      	ldr	r3, [pc, #160]	@ (8001284 <SystemClock_Config+0xcc>)
 80011e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011e4:	4a27      	ldr	r2, [pc, #156]	@ (8001284 <SystemClock_Config+0xcc>)
 80011e6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80011ea:	6413      	str	r3, [r2, #64]	@ 0x40
 80011ec:	4b25      	ldr	r3, [pc, #148]	@ (8001284 <SystemClock_Config+0xcc>)
 80011ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011f0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80011f4:	60bb      	str	r3, [r7, #8]
 80011f6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80011f8:	2300      	movs	r3, #0
 80011fa:	607b      	str	r3, [r7, #4]
 80011fc:	4b22      	ldr	r3, [pc, #136]	@ (8001288 <SystemClock_Config+0xd0>)
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001204:	4a20      	ldr	r2, [pc, #128]	@ (8001288 <SystemClock_Config+0xd0>)
 8001206:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800120a:	6013      	str	r3, [r2, #0]
 800120c:	4b1e      	ldr	r3, [pc, #120]	@ (8001288 <SystemClock_Config+0xd0>)
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001214:	607b      	str	r3, [r7, #4]
 8001216:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001218:	2301      	movs	r3, #1
 800121a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800121c:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8001220:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001222:	2302      	movs	r3, #2
 8001224:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001226:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800122a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800122c:	2304      	movs	r3, #4
 800122e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 84;
 8001230:	2354      	movs	r3, #84	@ 0x54
 8001232:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001234:	2302      	movs	r3, #2
 8001236:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001238:	2307      	movs	r3, #7
 800123a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 800123c:	f107 0320 	add.w	r3, r7, #32
 8001240:	4618      	mov	r0, r3
 8001242:	f001 fa95 	bl	8002770 <HAL_RCC_OscConfig>
 8001246:	4603      	mov	r3, r0
 8001248:	2b00      	cmp	r3, #0
 800124a:	d001      	beq.n	8001250 <SystemClock_Config+0x98>
    Error_Handler();
 800124c:	f000 f81e 	bl	800128c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8001250:	230f      	movs	r3, #15
 8001252:	60fb      	str	r3, [r7, #12]
                                | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001254:	2302      	movs	r3, #2
 8001256:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001258:	2300      	movs	r3, #0
 800125a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800125c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001260:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001262:	2300      	movs	r3, #0
 8001264:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8001266:	f107 030c 	add.w	r3, r7, #12
 800126a:	2102      	movs	r1, #2
 800126c:	4618      	mov	r0, r3
 800126e:	f001 fcf7 	bl	8002c60 <HAL_RCC_ClockConfig>
 8001272:	4603      	mov	r3, r0
 8001274:	2b00      	cmp	r3, #0
 8001276:	d001      	beq.n	800127c <SystemClock_Config+0xc4>
    Error_Handler();
 8001278:	f000 f808 	bl	800128c <Error_Handler>
  }
}
 800127c:	bf00      	nop
 800127e:	3750      	adds	r7, #80	@ 0x50
 8001280:	46bd      	mov	sp, r7
 8001282:	bd80      	pop	{r7, pc}
 8001284:	40023800 	.word	0x40023800
 8001288:	40007000 	.word	0x40007000

0800128c <Error_Handler>:

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void) {
 800128c:	b480      	push	{r7}
 800128e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001290:	b672      	cpsid	i
}
 8001292:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1) {
 8001294:	bf00      	nop
 8001296:	e7fd      	b.n	8001294 <Error_Handler+0x8>

08001298 <Motor_Init>:
int32_t motor_counter_2 = 0;

int32_t motor_speed_1 = 0;
int32_t motor_speed_2 = 0;

void Motor_Init(void) {
 8001298:	b580      	push	{r7, lr}
 800129a:	af00      	add	r7, sp, #0
    Motor_SetDirection(0, 1);
 800129c:	2101      	movs	r1, #1
 800129e:	2000      	movs	r0, #0
 80012a0:	f000 f82e 	bl	8001300 <Motor_SetDirection>
    Motor_SetDirection(1, 1);
 80012a4:	2101      	movs	r1, #1
 80012a6:	2001      	movs	r0, #1
 80012a8:	f000 f82a 	bl	8001300 <Motor_SetDirection>
    HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_ALL);
 80012ac:	213c      	movs	r1, #60	@ 0x3c
 80012ae:	4804      	ldr	r0, [pc, #16]	@ (80012c0 <Motor_Init+0x28>)
 80012b0:	f002 f9b2 	bl	8003618 <HAL_TIM_Encoder_Start>
    HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 80012b4:	213c      	movs	r1, #60	@ 0x3c
 80012b6:	4803      	ldr	r0, [pc, #12]	@ (80012c4 <Motor_Init+0x2c>)
 80012b8:	f002 f9ae 	bl	8003618 <HAL_TIM_Encoder_Start>
}
 80012bc:	bf00      	nop
 80012be:	bd80      	pop	{r7, pc}
 80012c0:	20000278 	.word	0x20000278
 80012c4:	200002c0 	.word	0x200002c0

080012c8 <Motor_GetCounter>:
    if (speed < 0) speed = 0;
    __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, speed);
    __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, speed);
}

void Motor_GetCounter() {
 80012c8:	b480      	push	{r7}
 80012ca:	af00      	add	r7, sp, #0
    motor_counter_1 = __HAL_TIM_GET_COUNTER(&htim2);
 80012cc:	4b08      	ldr	r3, [pc, #32]	@ (80012f0 <Motor_GetCounter+0x28>)
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012d2:	461a      	mov	r2, r3
 80012d4:	4b07      	ldr	r3, [pc, #28]	@ (80012f4 <Motor_GetCounter+0x2c>)
 80012d6:	601a      	str	r2, [r3, #0]
    motor_counter_2 = __HAL_TIM_GET_COUNTER(&htim3);
 80012d8:	4b07      	ldr	r3, [pc, #28]	@ (80012f8 <Motor_GetCounter+0x30>)
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012de:	461a      	mov	r2, r3
 80012e0:	4b06      	ldr	r3, [pc, #24]	@ (80012fc <Motor_GetCounter+0x34>)
 80012e2:	601a      	str	r2, [r3, #0]
}
 80012e4:	bf00      	nop
 80012e6:	46bd      	mov	sp, r7
 80012e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ec:	4770      	bx	lr
 80012ee:	bf00      	nop
 80012f0:	20000278 	.word	0x20000278
 80012f4:	20000224 	.word	0x20000224
 80012f8:	200002c0 	.word	0x200002c0
 80012fc:	20000228 	.word	0x20000228

08001300 <Motor_SetDirection>:
    motor_speed_2 = __HAL_TIM_GET_COUNTER(&htim3);
    __HAL_TIM_SET_COUNTER(&htim2, 0);
    __HAL_TIM_SET_COUNTER(&htim3, 0);
}

void Motor_SetDirection(const uint8_t wheel, const uint8_t direction) {
 8001300:	b580      	push	{r7, lr}
 8001302:	b082      	sub	sp, #8
 8001304:	af00      	add	r7, sp, #0
 8001306:	4603      	mov	r3, r0
 8001308:	460a      	mov	r2, r1
 800130a:	71fb      	strb	r3, [r7, #7]
 800130c:	4613      	mov	r3, r2
 800130e:	71bb      	strb	r3, [r7, #6]
    if (wheel == LEFT_WHEEL) {
 8001310:	79fb      	ldrb	r3, [r7, #7]
 8001312:	2b00      	cmp	r3, #0
 8001314:	d114      	bne.n	8001340 <Motor_SetDirection+0x40>
        if (direction == FORWARD) {
 8001316:	79bb      	ldrb	r3, [r7, #6]
 8001318:	2b00      	cmp	r3, #0
 800131a:	d108      	bne.n	800132e <Motor_SetDirection+0x2e>
            HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_1);
 800131c:	2100      	movs	r1, #0
 800131e:	4814      	ldr	r0, [pc, #80]	@ (8001370 <Motor_SetDirection+0x70>)
 8001320:	f003 f82e 	bl	8004380 <HAL_TIMEx_PWMN_Stop>
            HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001324:	2100      	movs	r1, #0
 8001326:	4812      	ldr	r0, [pc, #72]	@ (8001370 <Motor_SetDirection+0x70>)
 8001328:	f001 ffbc 	bl	80032a4 <HAL_TIM_PWM_Start>
        } else {
            HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_2);
            HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
        }
    }
}
 800132c:	e01c      	b.n	8001368 <Motor_SetDirection+0x68>
            HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 800132e:	2100      	movs	r1, #0
 8001330:	480f      	ldr	r0, [pc, #60]	@ (8001370 <Motor_SetDirection+0x70>)
 8001332:	f002 f867 	bl	8003404 <HAL_TIM_PWM_Stop>
            HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1);
 8001336:	2100      	movs	r1, #0
 8001338:	480d      	ldr	r0, [pc, #52]	@ (8001370 <Motor_SetDirection+0x70>)
 800133a:	f002 ff75 	bl	8004228 <HAL_TIMEx_PWMN_Start>
}
 800133e:	e013      	b.n	8001368 <Motor_SetDirection+0x68>
        if (direction == FORWARD) {
 8001340:	79bb      	ldrb	r3, [r7, #6]
 8001342:	2b00      	cmp	r3, #0
 8001344:	d108      	bne.n	8001358 <Motor_SetDirection+0x58>
            HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2);
 8001346:	2104      	movs	r1, #4
 8001348:	4809      	ldr	r0, [pc, #36]	@ (8001370 <Motor_SetDirection+0x70>)
 800134a:	f002 f85b 	bl	8003404 <HAL_TIM_PWM_Stop>
            HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2);
 800134e:	2104      	movs	r1, #4
 8001350:	4807      	ldr	r0, [pc, #28]	@ (8001370 <Motor_SetDirection+0x70>)
 8001352:	f002 ff69 	bl	8004228 <HAL_TIMEx_PWMN_Start>
}
 8001356:	e007      	b.n	8001368 <Motor_SetDirection+0x68>
            HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_2);
 8001358:	2104      	movs	r1, #4
 800135a:	4805      	ldr	r0, [pc, #20]	@ (8001370 <Motor_SetDirection+0x70>)
 800135c:	f003 f810 	bl	8004380 <HAL_TIMEx_PWMN_Stop>
            HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8001360:	2104      	movs	r1, #4
 8001362:	4803      	ldr	r0, [pc, #12]	@ (8001370 <Motor_SetDirection+0x70>)
 8001364:	f001 ff9e 	bl	80032a4 <HAL_TIM_PWM_Start>
}
 8001368:	bf00      	nop
 800136a:	3708      	adds	r7, #8
 800136c:	46bd      	mov	sp, r7
 800136e:	bd80      	pop	{r7, pc}
 8001370:	20000230 	.word	0x20000230

08001374 <Motor_Stop>:

void Motor_Stop() {
 8001374:	b580      	push	{r7, lr}
 8001376:	af00      	add	r7, sp, #0
    HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 8001378:	2100      	movs	r1, #0
 800137a:	4808      	ldr	r0, [pc, #32]	@ (800139c <Motor_Stop+0x28>)
 800137c:	f002 f842 	bl	8003404 <HAL_TIM_PWM_Stop>
    HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2);
 8001380:	2104      	movs	r1, #4
 8001382:	4806      	ldr	r0, [pc, #24]	@ (800139c <Motor_Stop+0x28>)
 8001384:	f002 f83e 	bl	8003404 <HAL_TIM_PWM_Stop>
    HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_1);
 8001388:	2100      	movs	r1, #0
 800138a:	4804      	ldr	r0, [pc, #16]	@ (800139c <Motor_Stop+0x28>)
 800138c:	f002 fff8 	bl	8004380 <HAL_TIMEx_PWMN_Stop>
    HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_2);
 8001390:	2104      	movs	r1, #4
 8001392:	4802      	ldr	r0, [pc, #8]	@ (800139c <Motor_Stop+0x28>)
 8001394:	f002 fff4 	bl	8004380 <HAL_TIMEx_PWMN_Stop>
}
 8001398:	bf00      	nop
 800139a:	bd80      	pop	{r7, pc}
 800139c:	20000230 	.word	0x20000230

080013a0 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b082      	sub	sp, #8
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	6078      	str	r0, [r7, #4]
    if (htim == &htim4) {
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	4a04      	ldr	r2, [pc, #16]	@ (80013bc <HAL_TIM_PeriodElapsedCallback+0x1c>)
 80013ac:	4293      	cmp	r3, r2
 80013ae:	d101      	bne.n	80013b4 <HAL_TIM_PeriodElapsedCallback+0x14>
        // Motor_GetSpeed();
        Motor_GetCounter();
 80013b0:	f7ff ff8a 	bl	80012c8 <Motor_GetCounter>
    }
}
 80013b4:	bf00      	nop
 80013b6:	3708      	adds	r7, #8
 80013b8:	46bd      	mov	sp, r7
 80013ba:	bd80      	pop	{r7, pc}
 80013bc:	20000308 	.word	0x20000308

080013c0 <OLED_I2C_Init>:

#define OLED_W_SCL(x)		HAL_GPIO_WritePin(OLED_SCL_GPIO_Port, OLED_SCL_Pin, (GPIO_PinState)(x))
#define OLED_W_SDA(x)		HAL_GPIO_WritePin(OLED_SDA_GPIO_Port, OLED_SDA_Pin, (GPIO_PinState)(x))

void OLED_I2C_Init()
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	af00      	add	r7, sp, #0
	OLED_W_SCL(1);
 80013c4:	2201      	movs	r2, #1
 80013c6:	2180      	movs	r1, #128	@ 0x80
 80013c8:	4805      	ldr	r0, [pc, #20]	@ (80013e0 <OLED_I2C_Init+0x20>)
 80013ca:	f001 f9b7 	bl	800273c <HAL_GPIO_WritePin>
	OLED_W_SDA(1);
 80013ce:	2201      	movs	r2, #1
 80013d0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80013d4:	4803      	ldr	r0, [pc, #12]	@ (80013e4 <OLED_I2C_Init+0x24>)
 80013d6:	f001 f9b1 	bl	800273c <HAL_GPIO_WritePin>
}
 80013da:	bf00      	nop
 80013dc:	bd80      	pop	{r7, pc}
 80013de:	bf00      	nop
 80013e0:	40020400 	.word	0x40020400
 80013e4:	40020800 	.word	0x40020800

080013e8 <OLED_I2C_Start>:
  * @brief  I2C开始
  * @param  无
  * @retval 无
  */
void OLED_I2C_Start(void)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	af00      	add	r7, sp, #0
	OLED_W_SDA(1);
 80013ec:	2201      	movs	r2, #1
 80013ee:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80013f2:	480a      	ldr	r0, [pc, #40]	@ (800141c <OLED_I2C_Start+0x34>)
 80013f4:	f001 f9a2 	bl	800273c <HAL_GPIO_WritePin>
	OLED_W_SCL(1);
 80013f8:	2201      	movs	r2, #1
 80013fa:	2180      	movs	r1, #128	@ 0x80
 80013fc:	4808      	ldr	r0, [pc, #32]	@ (8001420 <OLED_I2C_Start+0x38>)
 80013fe:	f001 f99d 	bl	800273c <HAL_GPIO_WritePin>
	OLED_W_SDA(0);
 8001402:	2200      	movs	r2, #0
 8001404:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001408:	4804      	ldr	r0, [pc, #16]	@ (800141c <OLED_I2C_Start+0x34>)
 800140a:	f001 f997 	bl	800273c <HAL_GPIO_WritePin>
	OLED_W_SCL(0);
 800140e:	2200      	movs	r2, #0
 8001410:	2180      	movs	r1, #128	@ 0x80
 8001412:	4803      	ldr	r0, [pc, #12]	@ (8001420 <OLED_I2C_Start+0x38>)
 8001414:	f001 f992 	bl	800273c <HAL_GPIO_WritePin>
}
 8001418:	bf00      	nop
 800141a:	bd80      	pop	{r7, pc}
 800141c:	40020800 	.word	0x40020800
 8001420:	40020400 	.word	0x40020400

08001424 <OLED_I2C_Stop>:
  * @brief  I2C停止
  * @param  无
  * @retval 无
  */
void OLED_I2C_Stop(void)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	af00      	add	r7, sp, #0
	OLED_W_SDA(0);
 8001428:	2200      	movs	r2, #0
 800142a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800142e:	4808      	ldr	r0, [pc, #32]	@ (8001450 <OLED_I2C_Stop+0x2c>)
 8001430:	f001 f984 	bl	800273c <HAL_GPIO_WritePin>
	OLED_W_SCL(1);
 8001434:	2201      	movs	r2, #1
 8001436:	2180      	movs	r1, #128	@ 0x80
 8001438:	4806      	ldr	r0, [pc, #24]	@ (8001454 <OLED_I2C_Stop+0x30>)
 800143a:	f001 f97f 	bl	800273c <HAL_GPIO_WritePin>
	OLED_W_SDA(1);
 800143e:	2201      	movs	r2, #1
 8001440:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001444:	4802      	ldr	r0, [pc, #8]	@ (8001450 <OLED_I2C_Stop+0x2c>)
 8001446:	f001 f979 	bl	800273c <HAL_GPIO_WritePin>
}
 800144a:	bf00      	nop
 800144c:	bd80      	pop	{r7, pc}
 800144e:	bf00      	nop
 8001450:	40020800 	.word	0x40020800
 8001454:	40020400 	.word	0x40020400

08001458 <OLED_I2C_SendByte>:
  * @brief  I2C发送一个字节
  * @param  Byte 要发送的一个字节
  * @retval 无
  */
void OLED_I2C_SendByte(uint8_t Byte)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b084      	sub	sp, #16
 800145c:	af00      	add	r7, sp, #0
 800145e:	4603      	mov	r3, r0
 8001460:	71fb      	strb	r3, [r7, #7]
	uint8_t i;
	for (i = 0; i < 8; i++)
 8001462:	2300      	movs	r3, #0
 8001464:	73fb      	strb	r3, [r7, #15]
 8001466:	e01c      	b.n	80014a2 <OLED_I2C_SendByte+0x4a>
	{
		OLED_W_SDA(Byte & (0x80 >> i));
 8001468:	7bfb      	ldrb	r3, [r7, #15]
 800146a:	2280      	movs	r2, #128	@ 0x80
 800146c:	fa42 f303 	asr.w	r3, r2, r3
 8001470:	b25a      	sxtb	r2, r3
 8001472:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001476:	4013      	ands	r3, r2
 8001478:	b25b      	sxtb	r3, r3
 800147a:	b2db      	uxtb	r3, r3
 800147c:	461a      	mov	r2, r3
 800147e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001482:	4810      	ldr	r0, [pc, #64]	@ (80014c4 <OLED_I2C_SendByte+0x6c>)
 8001484:	f001 f95a 	bl	800273c <HAL_GPIO_WritePin>
		OLED_W_SCL(1);
 8001488:	2201      	movs	r2, #1
 800148a:	2180      	movs	r1, #128	@ 0x80
 800148c:	480e      	ldr	r0, [pc, #56]	@ (80014c8 <OLED_I2C_SendByte+0x70>)
 800148e:	f001 f955 	bl	800273c <HAL_GPIO_WritePin>
		OLED_W_SCL(0);
 8001492:	2200      	movs	r2, #0
 8001494:	2180      	movs	r1, #128	@ 0x80
 8001496:	480c      	ldr	r0, [pc, #48]	@ (80014c8 <OLED_I2C_SendByte+0x70>)
 8001498:	f001 f950 	bl	800273c <HAL_GPIO_WritePin>
	for (i = 0; i < 8; i++)
 800149c:	7bfb      	ldrb	r3, [r7, #15]
 800149e:	3301      	adds	r3, #1
 80014a0:	73fb      	strb	r3, [r7, #15]
 80014a2:	7bfb      	ldrb	r3, [r7, #15]
 80014a4:	2b07      	cmp	r3, #7
 80014a6:	d9df      	bls.n	8001468 <OLED_I2C_SendByte+0x10>
	}
	OLED_W_SCL(1);	//额外的一个时钟，不处理应答信号
 80014a8:	2201      	movs	r2, #1
 80014aa:	2180      	movs	r1, #128	@ 0x80
 80014ac:	4806      	ldr	r0, [pc, #24]	@ (80014c8 <OLED_I2C_SendByte+0x70>)
 80014ae:	f001 f945 	bl	800273c <HAL_GPIO_WritePin>
	OLED_W_SCL(0);
 80014b2:	2200      	movs	r2, #0
 80014b4:	2180      	movs	r1, #128	@ 0x80
 80014b6:	4804      	ldr	r0, [pc, #16]	@ (80014c8 <OLED_I2C_SendByte+0x70>)
 80014b8:	f001 f940 	bl	800273c <HAL_GPIO_WritePin>
}
 80014bc:	bf00      	nop
 80014be:	3710      	adds	r7, #16
 80014c0:	46bd      	mov	sp, r7
 80014c2:	bd80      	pop	{r7, pc}
 80014c4:	40020800 	.word	0x40020800
 80014c8:	40020400 	.word	0x40020400

080014cc <OLED_WriteCommand>:
  * @brief  OLED写命令
  * @param  Command 要写入的命令
  * @retval 无
  */
void OLED_WriteCommand(uint8_t Command)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b082      	sub	sp, #8
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	4603      	mov	r3, r0
 80014d4:	71fb      	strb	r3, [r7, #7]
	OLED_I2C_Start();
 80014d6:	f7ff ff87 	bl	80013e8 <OLED_I2C_Start>
	OLED_I2C_SendByte(0x78);		//从机地址
 80014da:	2078      	movs	r0, #120	@ 0x78
 80014dc:	f7ff ffbc 	bl	8001458 <OLED_I2C_SendByte>
	OLED_I2C_SendByte(0x00);		//写命令
 80014e0:	2000      	movs	r0, #0
 80014e2:	f7ff ffb9 	bl	8001458 <OLED_I2C_SendByte>
	OLED_I2C_SendByte(Command);
 80014e6:	79fb      	ldrb	r3, [r7, #7]
 80014e8:	4618      	mov	r0, r3
 80014ea:	f7ff ffb5 	bl	8001458 <OLED_I2C_SendByte>
	OLED_I2C_Stop();
 80014ee:	f7ff ff99 	bl	8001424 <OLED_I2C_Stop>
}
 80014f2:	bf00      	nop
 80014f4:	3708      	adds	r7, #8
 80014f6:	46bd      	mov	sp, r7
 80014f8:	bd80      	pop	{r7, pc}

080014fa <OLED_WriteData>:
  * @brief  OLED写数据
  * @param  Data 要写入的数据
  * @retval 无
  */
void OLED_WriteData(uint8_t Data)
{
 80014fa:	b580      	push	{r7, lr}
 80014fc:	b082      	sub	sp, #8
 80014fe:	af00      	add	r7, sp, #0
 8001500:	4603      	mov	r3, r0
 8001502:	71fb      	strb	r3, [r7, #7]
	OLED_I2C_Start();
 8001504:	f7ff ff70 	bl	80013e8 <OLED_I2C_Start>
	OLED_I2C_SendByte(0x78);		//从机地址
 8001508:	2078      	movs	r0, #120	@ 0x78
 800150a:	f7ff ffa5 	bl	8001458 <OLED_I2C_SendByte>
	OLED_I2C_SendByte(0x40);		//写数据
 800150e:	2040      	movs	r0, #64	@ 0x40
 8001510:	f7ff ffa2 	bl	8001458 <OLED_I2C_SendByte>
	OLED_I2C_SendByte(Data);
 8001514:	79fb      	ldrb	r3, [r7, #7]
 8001516:	4618      	mov	r0, r3
 8001518:	f7ff ff9e 	bl	8001458 <OLED_I2C_SendByte>
	OLED_I2C_Stop();
 800151c:	f7ff ff82 	bl	8001424 <OLED_I2C_Stop>
}
 8001520:	bf00      	nop
 8001522:	3708      	adds	r7, #8
 8001524:	46bd      	mov	sp, r7
 8001526:	bd80      	pop	{r7, pc}

08001528 <OLED_SetCursor>:
  * @param  Y 以左上角为原点，向下方向的坐标，范围：0~7
  * @param  X 以左上角为原点，向右方向的坐标，范围：0~127
  * @retval 无
  */
void OLED_SetCursor(uint8_t Y, uint8_t X)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b082      	sub	sp, #8
 800152c:	af00      	add	r7, sp, #0
 800152e:	4603      	mov	r3, r0
 8001530:	460a      	mov	r2, r1
 8001532:	71fb      	strb	r3, [r7, #7]
 8001534:	4613      	mov	r3, r2
 8001536:	71bb      	strb	r3, [r7, #6]
	OLED_WriteCommand(0xB0 | Y);					//设置Y位置
 8001538:	79fb      	ldrb	r3, [r7, #7]
 800153a:	f063 034f 	orn	r3, r3, #79	@ 0x4f
 800153e:	b2db      	uxtb	r3, r3
 8001540:	4618      	mov	r0, r3
 8001542:	f7ff ffc3 	bl	80014cc <OLED_WriteCommand>
	OLED_WriteCommand(0x10 | ((X & 0xF0) >> 4));	//设置X位置高4位
 8001546:	79bb      	ldrb	r3, [r7, #6]
 8001548:	091b      	lsrs	r3, r3, #4
 800154a:	b2db      	uxtb	r3, r3
 800154c:	f043 0310 	orr.w	r3, r3, #16
 8001550:	b2db      	uxtb	r3, r3
 8001552:	4618      	mov	r0, r3
 8001554:	f7ff ffba 	bl	80014cc <OLED_WriteCommand>
	OLED_WriteCommand(0x00 | (X & 0x0F));			//设置X位置低4位
 8001558:	79bb      	ldrb	r3, [r7, #6]
 800155a:	f003 030f 	and.w	r3, r3, #15
 800155e:	b2db      	uxtb	r3, r3
 8001560:	4618      	mov	r0, r3
 8001562:	f7ff ffb3 	bl	80014cc <OLED_WriteCommand>
}
 8001566:	bf00      	nop
 8001568:	3708      	adds	r7, #8
 800156a:	46bd      	mov	sp, r7
 800156c:	bd80      	pop	{r7, pc}

0800156e <OLED_Clear>:
  * @brief  OLED清屏
  * @param  无
  * @retval 无
  */
void OLED_Clear(void)
{
 800156e:	b580      	push	{r7, lr}
 8001570:	b082      	sub	sp, #8
 8001572:	af00      	add	r7, sp, #0
	uint8_t i, j;
	for (j = 0; j < 8; j++)
 8001574:	2300      	movs	r3, #0
 8001576:	71bb      	strb	r3, [r7, #6]
 8001578:	e014      	b.n	80015a4 <OLED_Clear+0x36>
	{
		OLED_SetCursor(j, 0);
 800157a:	79bb      	ldrb	r3, [r7, #6]
 800157c:	2100      	movs	r1, #0
 800157e:	4618      	mov	r0, r3
 8001580:	f7ff ffd2 	bl	8001528 <OLED_SetCursor>
		for(i = 0; i < 128; i++)
 8001584:	2300      	movs	r3, #0
 8001586:	71fb      	strb	r3, [r7, #7]
 8001588:	e005      	b.n	8001596 <OLED_Clear+0x28>
		{
			OLED_WriteData(0x00);
 800158a:	2000      	movs	r0, #0
 800158c:	f7ff ffb5 	bl	80014fa <OLED_WriteData>
		for(i = 0; i < 128; i++)
 8001590:	79fb      	ldrb	r3, [r7, #7]
 8001592:	3301      	adds	r3, #1
 8001594:	71fb      	strb	r3, [r7, #7]
 8001596:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800159a:	2b00      	cmp	r3, #0
 800159c:	daf5      	bge.n	800158a <OLED_Clear+0x1c>
	for (j = 0; j < 8; j++)
 800159e:	79bb      	ldrb	r3, [r7, #6]
 80015a0:	3301      	adds	r3, #1
 80015a2:	71bb      	strb	r3, [r7, #6]
 80015a4:	79bb      	ldrb	r3, [r7, #6]
 80015a6:	2b07      	cmp	r3, #7
 80015a8:	d9e7      	bls.n	800157a <OLED_Clear+0xc>
		}
	}
}
 80015aa:	bf00      	nop
 80015ac:	bf00      	nop
 80015ae:	3708      	adds	r7, #8
 80015b0:	46bd      	mov	sp, r7
 80015b2:	bd80      	pop	{r7, pc}

080015b4 <OLED_ShowChar>:
  * @param  Column 列位置，范围：1~16
  * @param  Char 要显示的一个字符，范围：ASCII可见字符
  * @retval 无
  */
void OLED_ShowChar(uint8_t Line, uint8_t Column, char Char)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b084      	sub	sp, #16
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	4603      	mov	r3, r0
 80015bc:	71fb      	strb	r3, [r7, #7]
 80015be:	460b      	mov	r3, r1
 80015c0:	71bb      	strb	r3, [r7, #6]
 80015c2:	4613      	mov	r3, r2
 80015c4:	717b      	strb	r3, [r7, #5]
	uint8_t i;
	OLED_SetCursor((Line - 1) * 2, (Column - 1) * 8);		//设置光标位置在上半部分
 80015c6:	79fb      	ldrb	r3, [r7, #7]
 80015c8:	3b01      	subs	r3, #1
 80015ca:	b2db      	uxtb	r3, r3
 80015cc:	005b      	lsls	r3, r3, #1
 80015ce:	b2da      	uxtb	r2, r3
 80015d0:	79bb      	ldrb	r3, [r7, #6]
 80015d2:	3b01      	subs	r3, #1
 80015d4:	b2db      	uxtb	r3, r3
 80015d6:	00db      	lsls	r3, r3, #3
 80015d8:	b2db      	uxtb	r3, r3
 80015da:	4619      	mov	r1, r3
 80015dc:	4610      	mov	r0, r2
 80015de:	f7ff ffa3 	bl	8001528 <OLED_SetCursor>
	for (i = 0; i < 8; i++)
 80015e2:	2300      	movs	r3, #0
 80015e4:	73fb      	strb	r3, [r7, #15]
 80015e6:	e00e      	b.n	8001606 <OLED_ShowChar+0x52>
	{
		OLED_WriteData(OLED_F8x16[Char - ' '][i]);			//显示上半部分内容
 80015e8:	797b      	ldrb	r3, [r7, #5]
 80015ea:	f1a3 0220 	sub.w	r2, r3, #32
 80015ee:	7bfb      	ldrb	r3, [r7, #15]
 80015f0:	491b      	ldr	r1, [pc, #108]	@ (8001660 <OLED_ShowChar+0xac>)
 80015f2:	0112      	lsls	r2, r2, #4
 80015f4:	440a      	add	r2, r1
 80015f6:	4413      	add	r3, r2
 80015f8:	781b      	ldrb	r3, [r3, #0]
 80015fa:	4618      	mov	r0, r3
 80015fc:	f7ff ff7d 	bl	80014fa <OLED_WriteData>
	for (i = 0; i < 8; i++)
 8001600:	7bfb      	ldrb	r3, [r7, #15]
 8001602:	3301      	adds	r3, #1
 8001604:	73fb      	strb	r3, [r7, #15]
 8001606:	7bfb      	ldrb	r3, [r7, #15]
 8001608:	2b07      	cmp	r3, #7
 800160a:	d9ed      	bls.n	80015e8 <OLED_ShowChar+0x34>
	}
	OLED_SetCursor((Line - 1) * 2 + 1, (Column - 1) * 8);	//设置光标位置在下半部分
 800160c:	79fb      	ldrb	r3, [r7, #7]
 800160e:	005b      	lsls	r3, r3, #1
 8001610:	b2db      	uxtb	r3, r3
 8001612:	3b01      	subs	r3, #1
 8001614:	b2da      	uxtb	r2, r3
 8001616:	79bb      	ldrb	r3, [r7, #6]
 8001618:	3b01      	subs	r3, #1
 800161a:	b2db      	uxtb	r3, r3
 800161c:	00db      	lsls	r3, r3, #3
 800161e:	b2db      	uxtb	r3, r3
 8001620:	4619      	mov	r1, r3
 8001622:	4610      	mov	r0, r2
 8001624:	f7ff ff80 	bl	8001528 <OLED_SetCursor>
	for (i = 0; i < 8; i++)
 8001628:	2300      	movs	r3, #0
 800162a:	73fb      	strb	r3, [r7, #15]
 800162c:	e00f      	b.n	800164e <OLED_ShowChar+0x9a>
	{
		OLED_WriteData(OLED_F8x16[Char - ' '][i + 8]);		//显示下半部分内容
 800162e:	797b      	ldrb	r3, [r7, #5]
 8001630:	f1a3 0220 	sub.w	r2, r3, #32
 8001634:	7bfb      	ldrb	r3, [r7, #15]
 8001636:	3308      	adds	r3, #8
 8001638:	4909      	ldr	r1, [pc, #36]	@ (8001660 <OLED_ShowChar+0xac>)
 800163a:	0112      	lsls	r2, r2, #4
 800163c:	440a      	add	r2, r1
 800163e:	4413      	add	r3, r2
 8001640:	781b      	ldrb	r3, [r3, #0]
 8001642:	4618      	mov	r0, r3
 8001644:	f7ff ff59 	bl	80014fa <OLED_WriteData>
	for (i = 0; i < 8; i++)
 8001648:	7bfb      	ldrb	r3, [r7, #15]
 800164a:	3301      	adds	r3, #1
 800164c:	73fb      	strb	r3, [r7, #15]
 800164e:	7bfb      	ldrb	r3, [r7, #15]
 8001650:	2b07      	cmp	r3, #7
 8001652:	d9ec      	bls.n	800162e <OLED_ShowChar+0x7a>
	}
}
 8001654:	bf00      	nop
 8001656:	bf00      	nop
 8001658:	3710      	adds	r7, #16
 800165a:	46bd      	mov	sp, r7
 800165c:	bd80      	pop	{r7, pc}
 800165e:	bf00      	nop
 8001660:	080092b8 	.word	0x080092b8

08001664 <OLED_ShowString>:
  * @param  Column 起始列位置，范围：1~16
  * @param  String 要显示的字符串，范围：ASCII可见字符
  * @retval 无
  */
void OLED_ShowString(uint8_t Line, uint8_t Column, char *String)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b084      	sub	sp, #16
 8001668:	af00      	add	r7, sp, #0
 800166a:	4603      	mov	r3, r0
 800166c:	603a      	str	r2, [r7, #0]
 800166e:	71fb      	strb	r3, [r7, #7]
 8001670:	460b      	mov	r3, r1
 8001672:	71bb      	strb	r3, [r7, #6]
	uint8_t i;
	for (i = 0; String[i] != '\0'; i++)
 8001674:	2300      	movs	r3, #0
 8001676:	73fb      	strb	r3, [r7, #15]
 8001678:	e00e      	b.n	8001698 <OLED_ShowString+0x34>
	{
		OLED_ShowChar(Line, Column + i, String[i]);
 800167a:	79ba      	ldrb	r2, [r7, #6]
 800167c:	7bfb      	ldrb	r3, [r7, #15]
 800167e:	4413      	add	r3, r2
 8001680:	b2d9      	uxtb	r1, r3
 8001682:	7bfb      	ldrb	r3, [r7, #15]
 8001684:	683a      	ldr	r2, [r7, #0]
 8001686:	4413      	add	r3, r2
 8001688:	781a      	ldrb	r2, [r3, #0]
 800168a:	79fb      	ldrb	r3, [r7, #7]
 800168c:	4618      	mov	r0, r3
 800168e:	f7ff ff91 	bl	80015b4 <OLED_ShowChar>
	for (i = 0; String[i] != '\0'; i++)
 8001692:	7bfb      	ldrb	r3, [r7, #15]
 8001694:	3301      	adds	r3, #1
 8001696:	73fb      	strb	r3, [r7, #15]
 8001698:	7bfb      	ldrb	r3, [r7, #15]
 800169a:	683a      	ldr	r2, [r7, #0]
 800169c:	4413      	add	r3, r2
 800169e:	781b      	ldrb	r3, [r3, #0]
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d1ea      	bne.n	800167a <OLED_ShowString+0x16>
	}
}
 80016a4:	bf00      	nop
 80016a6:	bf00      	nop
 80016a8:	3710      	adds	r7, #16
 80016aa:	46bd      	mov	sp, r7
 80016ac:	bd80      	pop	{r7, pc}

080016ae <OLED_Init>:
  * @brief  OLED初始化
  * @param  无
  * @retval 无
  */
void OLED_Init(void)
{
 80016ae:	b580      	push	{r7, lr}
 80016b0:	b082      	sub	sp, #8
 80016b2:	af00      	add	r7, sp, #0
	uint32_t i, j;

	for (i = 0; i < 1000; i++)			//上电延时
 80016b4:	2300      	movs	r3, #0
 80016b6:	607b      	str	r3, [r7, #4]
 80016b8:	e00c      	b.n	80016d4 <OLED_Init+0x26>
	{
		for (j = 0; j < 1000; j++);
 80016ba:	2300      	movs	r3, #0
 80016bc:	603b      	str	r3, [r7, #0]
 80016be:	e002      	b.n	80016c6 <OLED_Init+0x18>
 80016c0:	683b      	ldr	r3, [r7, #0]
 80016c2:	3301      	adds	r3, #1
 80016c4:	603b      	str	r3, [r7, #0]
 80016c6:	683b      	ldr	r3, [r7, #0]
 80016c8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80016cc:	d3f8      	bcc.n	80016c0 <OLED_Init+0x12>
	for (i = 0; i < 1000; i++)			//上电延时
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	3301      	adds	r3, #1
 80016d2:	607b      	str	r3, [r7, #4]
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80016da:	d3ee      	bcc.n	80016ba <OLED_Init+0xc>
	}

	OLED_I2C_Init();			//端口初始化
 80016dc:	f7ff fe70 	bl	80013c0 <OLED_I2C_Init>

	OLED_WriteCommand(0xAE);	//关闭显示
 80016e0:	20ae      	movs	r0, #174	@ 0xae
 80016e2:	f7ff fef3 	bl	80014cc <OLED_WriteCommand>

	OLED_WriteCommand(0xD5);	//设置显示时钟分频比/振荡器频率
 80016e6:	20d5      	movs	r0, #213	@ 0xd5
 80016e8:	f7ff fef0 	bl	80014cc <OLED_WriteCommand>
	OLED_WriteCommand(0x80);
 80016ec:	2080      	movs	r0, #128	@ 0x80
 80016ee:	f7ff feed 	bl	80014cc <OLED_WriteCommand>

	OLED_WriteCommand(0xA8);	//设置多路复用率
 80016f2:	20a8      	movs	r0, #168	@ 0xa8
 80016f4:	f7ff feea 	bl	80014cc <OLED_WriteCommand>
	OLED_WriteCommand(0x3F);
 80016f8:	203f      	movs	r0, #63	@ 0x3f
 80016fa:	f7ff fee7 	bl	80014cc <OLED_WriteCommand>

	OLED_WriteCommand(0xD3);	//设置显示偏移
 80016fe:	20d3      	movs	r0, #211	@ 0xd3
 8001700:	f7ff fee4 	bl	80014cc <OLED_WriteCommand>
	OLED_WriteCommand(0x00);
 8001704:	2000      	movs	r0, #0
 8001706:	f7ff fee1 	bl	80014cc <OLED_WriteCommand>

	OLED_WriteCommand(0x40);	//设置显示开始行
 800170a:	2040      	movs	r0, #64	@ 0x40
 800170c:	f7ff fede 	bl	80014cc <OLED_WriteCommand>

	OLED_WriteCommand(0xA1);	//设置左右方向，0xA1正常 0xA0左右反置
 8001710:	20a1      	movs	r0, #161	@ 0xa1
 8001712:	f7ff fedb 	bl	80014cc <OLED_WriteCommand>

	OLED_WriteCommand(0xC8);	//设置上下方向，0xC8正常 0xC0上下反置
 8001716:	20c8      	movs	r0, #200	@ 0xc8
 8001718:	f7ff fed8 	bl	80014cc <OLED_WriteCommand>

	OLED_WriteCommand(0xDA);	//设置COM引脚硬件配置
 800171c:	20da      	movs	r0, #218	@ 0xda
 800171e:	f7ff fed5 	bl	80014cc <OLED_WriteCommand>
	OLED_WriteCommand(0x12);
 8001722:	2012      	movs	r0, #18
 8001724:	f7ff fed2 	bl	80014cc <OLED_WriteCommand>

	OLED_WriteCommand(0x81);	//设置对比度控制
 8001728:	2081      	movs	r0, #129	@ 0x81
 800172a:	f7ff fecf 	bl	80014cc <OLED_WriteCommand>
	OLED_WriteCommand(0xCF);
 800172e:	20cf      	movs	r0, #207	@ 0xcf
 8001730:	f7ff fecc 	bl	80014cc <OLED_WriteCommand>

	OLED_WriteCommand(0xD9);	//设置预充电周期
 8001734:	20d9      	movs	r0, #217	@ 0xd9
 8001736:	f7ff fec9 	bl	80014cc <OLED_WriteCommand>
	OLED_WriteCommand(0xF1);
 800173a:	20f1      	movs	r0, #241	@ 0xf1
 800173c:	f7ff fec6 	bl	80014cc <OLED_WriteCommand>

	OLED_WriteCommand(0xDB);	//设置VCOMH取消选择级别
 8001740:	20db      	movs	r0, #219	@ 0xdb
 8001742:	f7ff fec3 	bl	80014cc <OLED_WriteCommand>
	OLED_WriteCommand(0x30);
 8001746:	2030      	movs	r0, #48	@ 0x30
 8001748:	f7ff fec0 	bl	80014cc <OLED_WriteCommand>

	OLED_WriteCommand(0xA4);	//设置整个显示打开/关闭
 800174c:	20a4      	movs	r0, #164	@ 0xa4
 800174e:	f7ff febd 	bl	80014cc <OLED_WriteCommand>

	OLED_WriteCommand(0xA6);	//设置正常/倒转显示
 8001752:	20a6      	movs	r0, #166	@ 0xa6
 8001754:	f7ff feba 	bl	80014cc <OLED_WriteCommand>

	OLED_WriteCommand(0x8D);	//设置充电泵
 8001758:	208d      	movs	r0, #141	@ 0x8d
 800175a:	f7ff feb7 	bl	80014cc <OLED_WriteCommand>
	OLED_WriteCommand(0x14);
 800175e:	2014      	movs	r0, #20
 8001760:	f7ff feb4 	bl	80014cc <OLED_WriteCommand>

	OLED_WriteCommand(0xAF);	//开启显示
 8001764:	20af      	movs	r0, #175	@ 0xaf
 8001766:	f7ff feb1 	bl	80014cc <OLED_WriteCommand>

	OLED_Clear();				//OLED清屏
 800176a:	f7ff ff00 	bl	800156e <OLED_Clear>
}
 800176e:	bf00      	nop
 8001770:	3708      	adds	r7, #8
 8001772:	46bd      	mov	sp, r7
 8001774:	bd80      	pop	{r7, pc}
	...

08001778 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001778:	b480      	push	{r7}
 800177a:	b083      	sub	sp, #12
 800177c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800177e:	2300      	movs	r3, #0
 8001780:	607b      	str	r3, [r7, #4]
 8001782:	4b10      	ldr	r3, [pc, #64]	@ (80017c4 <HAL_MspInit+0x4c>)
 8001784:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001786:	4a0f      	ldr	r2, [pc, #60]	@ (80017c4 <HAL_MspInit+0x4c>)
 8001788:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800178c:	6453      	str	r3, [r2, #68]	@ 0x44
 800178e:	4b0d      	ldr	r3, [pc, #52]	@ (80017c4 <HAL_MspInit+0x4c>)
 8001790:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001792:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001796:	607b      	str	r3, [r7, #4]
 8001798:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800179a:	2300      	movs	r3, #0
 800179c:	603b      	str	r3, [r7, #0]
 800179e:	4b09      	ldr	r3, [pc, #36]	@ (80017c4 <HAL_MspInit+0x4c>)
 80017a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017a2:	4a08      	ldr	r2, [pc, #32]	@ (80017c4 <HAL_MspInit+0x4c>)
 80017a4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80017a8:	6413      	str	r3, [r2, #64]	@ 0x40
 80017aa:	4b06      	ldr	r3, [pc, #24]	@ (80017c4 <HAL_MspInit+0x4c>)
 80017ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80017b2:	603b      	str	r3, [r7, #0]
 80017b4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017b6:	bf00      	nop
 80017b8:	370c      	adds	r7, #12
 80017ba:	46bd      	mov	sp, r7
 80017bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c0:	4770      	bx	lr
 80017c2:	bf00      	nop
 80017c4:	40023800 	.word	0x40023800

080017c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017c8:	b480      	push	{r7}
 80017ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80017cc:	bf00      	nop
 80017ce:	e7fd      	b.n	80017cc <NMI_Handler+0x4>

080017d0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017d0:	b480      	push	{r7}
 80017d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017d4:	bf00      	nop
 80017d6:	e7fd      	b.n	80017d4 <HardFault_Handler+0x4>

080017d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017d8:	b480      	push	{r7}
 80017da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017dc:	bf00      	nop
 80017de:	e7fd      	b.n	80017dc <MemManage_Handler+0x4>

080017e0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017e0:	b480      	push	{r7}
 80017e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017e4:	bf00      	nop
 80017e6:	e7fd      	b.n	80017e4 <BusFault_Handler+0x4>

080017e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017e8:	b480      	push	{r7}
 80017ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017ec:	bf00      	nop
 80017ee:	e7fd      	b.n	80017ec <UsageFault_Handler+0x4>

080017f0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80017f0:	b480      	push	{r7}
 80017f2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80017f4:	bf00      	nop
 80017f6:	46bd      	mov	sp, r7
 80017f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fc:	4770      	bx	lr

080017fe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017fe:	b480      	push	{r7}
 8001800:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001802:	bf00      	nop
 8001804:	46bd      	mov	sp, r7
 8001806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180a:	4770      	bx	lr

0800180c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800180c:	b480      	push	{r7}
 800180e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001810:	bf00      	nop
 8001812:	46bd      	mov	sp, r7
 8001814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001818:	4770      	bx	lr

0800181a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800181a:	b580      	push	{r7, lr}
 800181c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800181e:	f000 fcb3 	bl	8002188 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001822:	bf00      	nop
 8001824:	bd80      	pop	{r7, pc}
	...

08001828 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800182c:	4802      	ldr	r0, [pc, #8]	@ (8001838 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 800182e:	f001 ff81 	bl	8003734 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8001832:	bf00      	nop
 8001834:	bd80      	pop	{r7, pc}
 8001836:	bf00      	nop
 8001838:	20000230 	.word	0x20000230

0800183c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001840:	4802      	ldr	r0, [pc, #8]	@ (800184c <TIM4_IRQHandler+0x10>)
 8001842:	f001 ff77 	bl	8003734 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001846:	bf00      	nop
 8001848:	bd80      	pop	{r7, pc}
 800184a:	bf00      	nop
 800184c:	20000308 	.word	0x20000308

08001850 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001850:	b480      	push	{r7}
 8001852:	af00      	add	r7, sp, #0
  return 1;
 8001854:	2301      	movs	r3, #1
}
 8001856:	4618      	mov	r0, r3
 8001858:	46bd      	mov	sp, r7
 800185a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185e:	4770      	bx	lr

08001860 <_kill>:

int _kill(int pid, int sig)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b082      	sub	sp, #8
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
 8001868:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800186a:	f004 f983 	bl	8005b74 <__errno>
 800186e:	4603      	mov	r3, r0
 8001870:	2216      	movs	r2, #22
 8001872:	601a      	str	r2, [r3, #0]
  return -1;
 8001874:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001878:	4618      	mov	r0, r3
 800187a:	3708      	adds	r7, #8
 800187c:	46bd      	mov	sp, r7
 800187e:	bd80      	pop	{r7, pc}

08001880 <_exit>:

void _exit (int status)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	b082      	sub	sp, #8
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001888:	f04f 31ff 	mov.w	r1, #4294967295
 800188c:	6878      	ldr	r0, [r7, #4]
 800188e:	f7ff ffe7 	bl	8001860 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001892:	bf00      	nop
 8001894:	e7fd      	b.n	8001892 <_exit+0x12>

08001896 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001896:	b580      	push	{r7, lr}
 8001898:	b086      	sub	sp, #24
 800189a:	af00      	add	r7, sp, #0
 800189c:	60f8      	str	r0, [r7, #12]
 800189e:	60b9      	str	r1, [r7, #8]
 80018a0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018a2:	2300      	movs	r3, #0
 80018a4:	617b      	str	r3, [r7, #20]
 80018a6:	e00a      	b.n	80018be <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80018a8:	f3af 8000 	nop.w
 80018ac:	4601      	mov	r1, r0
 80018ae:	68bb      	ldr	r3, [r7, #8]
 80018b0:	1c5a      	adds	r2, r3, #1
 80018b2:	60ba      	str	r2, [r7, #8]
 80018b4:	b2ca      	uxtb	r2, r1
 80018b6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018b8:	697b      	ldr	r3, [r7, #20]
 80018ba:	3301      	adds	r3, #1
 80018bc:	617b      	str	r3, [r7, #20]
 80018be:	697a      	ldr	r2, [r7, #20]
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	429a      	cmp	r2, r3
 80018c4:	dbf0      	blt.n	80018a8 <_read+0x12>
  }

  return len;
 80018c6:	687b      	ldr	r3, [r7, #4]
}
 80018c8:	4618      	mov	r0, r3
 80018ca:	3718      	adds	r7, #24
 80018cc:	46bd      	mov	sp, r7
 80018ce:	bd80      	pop	{r7, pc}

080018d0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b086      	sub	sp, #24
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	60f8      	str	r0, [r7, #12]
 80018d8:	60b9      	str	r1, [r7, #8]
 80018da:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018dc:	2300      	movs	r3, #0
 80018de:	617b      	str	r3, [r7, #20]
 80018e0:	e009      	b.n	80018f6 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80018e2:	68bb      	ldr	r3, [r7, #8]
 80018e4:	1c5a      	adds	r2, r3, #1
 80018e6:	60ba      	str	r2, [r7, #8]
 80018e8:	781b      	ldrb	r3, [r3, #0]
 80018ea:	4618      	mov	r0, r3
 80018ec:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018f0:	697b      	ldr	r3, [r7, #20]
 80018f2:	3301      	adds	r3, #1
 80018f4:	617b      	str	r3, [r7, #20]
 80018f6:	697a      	ldr	r2, [r7, #20]
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	429a      	cmp	r2, r3
 80018fc:	dbf1      	blt.n	80018e2 <_write+0x12>
  }
  return len;
 80018fe:	687b      	ldr	r3, [r7, #4]
}
 8001900:	4618      	mov	r0, r3
 8001902:	3718      	adds	r7, #24
 8001904:	46bd      	mov	sp, r7
 8001906:	bd80      	pop	{r7, pc}

08001908 <_close>:

int _close(int file)
{
 8001908:	b480      	push	{r7}
 800190a:	b083      	sub	sp, #12
 800190c:	af00      	add	r7, sp, #0
 800190e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001910:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001914:	4618      	mov	r0, r3
 8001916:	370c      	adds	r7, #12
 8001918:	46bd      	mov	sp, r7
 800191a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191e:	4770      	bx	lr

08001920 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001920:	b480      	push	{r7}
 8001922:	b083      	sub	sp, #12
 8001924:	af00      	add	r7, sp, #0
 8001926:	6078      	str	r0, [r7, #4]
 8001928:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800192a:	683b      	ldr	r3, [r7, #0]
 800192c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001930:	605a      	str	r2, [r3, #4]
  return 0;
 8001932:	2300      	movs	r3, #0
}
 8001934:	4618      	mov	r0, r3
 8001936:	370c      	adds	r7, #12
 8001938:	46bd      	mov	sp, r7
 800193a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193e:	4770      	bx	lr

08001940 <_isatty>:

int _isatty(int file)
{
 8001940:	b480      	push	{r7}
 8001942:	b083      	sub	sp, #12
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001948:	2301      	movs	r3, #1
}
 800194a:	4618      	mov	r0, r3
 800194c:	370c      	adds	r7, #12
 800194e:	46bd      	mov	sp, r7
 8001950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001954:	4770      	bx	lr

08001956 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001956:	b480      	push	{r7}
 8001958:	b085      	sub	sp, #20
 800195a:	af00      	add	r7, sp, #0
 800195c:	60f8      	str	r0, [r7, #12]
 800195e:	60b9      	str	r1, [r7, #8]
 8001960:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001962:	2300      	movs	r3, #0
}
 8001964:	4618      	mov	r0, r3
 8001966:	3714      	adds	r7, #20
 8001968:	46bd      	mov	sp, r7
 800196a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196e:	4770      	bx	lr

08001970 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	b086      	sub	sp, #24
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001978:	4a14      	ldr	r2, [pc, #80]	@ (80019cc <_sbrk+0x5c>)
 800197a:	4b15      	ldr	r3, [pc, #84]	@ (80019d0 <_sbrk+0x60>)
 800197c:	1ad3      	subs	r3, r2, r3
 800197e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001980:	697b      	ldr	r3, [r7, #20]
 8001982:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001984:	4b13      	ldr	r3, [pc, #76]	@ (80019d4 <_sbrk+0x64>)
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	2b00      	cmp	r3, #0
 800198a:	d102      	bne.n	8001992 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800198c:	4b11      	ldr	r3, [pc, #68]	@ (80019d4 <_sbrk+0x64>)
 800198e:	4a12      	ldr	r2, [pc, #72]	@ (80019d8 <_sbrk+0x68>)
 8001990:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001992:	4b10      	ldr	r3, [pc, #64]	@ (80019d4 <_sbrk+0x64>)
 8001994:	681a      	ldr	r2, [r3, #0]
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	4413      	add	r3, r2
 800199a:	693a      	ldr	r2, [r7, #16]
 800199c:	429a      	cmp	r2, r3
 800199e:	d207      	bcs.n	80019b0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80019a0:	f004 f8e8 	bl	8005b74 <__errno>
 80019a4:	4603      	mov	r3, r0
 80019a6:	220c      	movs	r2, #12
 80019a8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80019aa:	f04f 33ff 	mov.w	r3, #4294967295
 80019ae:	e009      	b.n	80019c4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80019b0:	4b08      	ldr	r3, [pc, #32]	@ (80019d4 <_sbrk+0x64>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80019b6:	4b07      	ldr	r3, [pc, #28]	@ (80019d4 <_sbrk+0x64>)
 80019b8:	681a      	ldr	r2, [r3, #0]
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	4413      	add	r3, r2
 80019be:	4a05      	ldr	r2, [pc, #20]	@ (80019d4 <_sbrk+0x64>)
 80019c0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80019c2:	68fb      	ldr	r3, [r7, #12]
}
 80019c4:	4618      	mov	r0, r3
 80019c6:	3718      	adds	r7, #24
 80019c8:	46bd      	mov	sp, r7
 80019ca:	bd80      	pop	{r7, pc}
 80019cc:	20018000 	.word	0x20018000
 80019d0:	00000400 	.word	0x00000400
 80019d4:	2000022c 	.word	0x2000022c
 80019d8:	200004e8 	.word	0x200004e8

080019dc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80019dc:	b480      	push	{r7}
 80019de:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80019e0:	4b06      	ldr	r3, [pc, #24]	@ (80019fc <SystemInit+0x20>)
 80019e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80019e6:	4a05      	ldr	r2, [pc, #20]	@ (80019fc <SystemInit+0x20>)
 80019e8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80019ec:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80019f0:	bf00      	nop
 80019f2:	46bd      	mov	sp, r7
 80019f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f8:	4770      	bx	lr
 80019fa:	bf00      	nop
 80019fc:	e000ed00 	.word	0xe000ed00

08001a00 <MX_TIM1_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b092      	sub	sp, #72	@ 0x48
 8001a04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a06:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	601a      	str	r2, [r3, #0]
 8001a0e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001a10:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001a14:	2200      	movs	r2, #0
 8001a16:	601a      	str	r2, [r3, #0]
 8001a18:	605a      	str	r2, [r3, #4]
 8001a1a:	609a      	str	r2, [r3, #8]
 8001a1c:	60da      	str	r2, [r3, #12]
 8001a1e:	611a      	str	r2, [r3, #16]
 8001a20:	615a      	str	r2, [r3, #20]
 8001a22:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001a24:	1d3b      	adds	r3, r7, #4
 8001a26:	2220      	movs	r2, #32
 8001a28:	2100      	movs	r1, #0
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	f004 f84f 	bl	8005ace <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001a30:	4b3a      	ldr	r3, [pc, #232]	@ (8001b1c <MX_TIM1_Init+0x11c>)
 8001a32:	4a3b      	ldr	r2, [pc, #236]	@ (8001b20 <MX_TIM1_Init+0x120>)
 8001a34:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 84-1;
 8001a36:	4b39      	ldr	r3, [pc, #228]	@ (8001b1c <MX_TIM1_Init+0x11c>)
 8001a38:	2253      	movs	r2, #83	@ 0x53
 8001a3a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a3c:	4b37      	ldr	r3, [pc, #220]	@ (8001b1c <MX_TIM1_Init+0x11c>)
 8001a3e:	2200      	movs	r2, #0
 8001a40:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100-1;
 8001a42:	4b36      	ldr	r3, [pc, #216]	@ (8001b1c <MX_TIM1_Init+0x11c>)
 8001a44:	2263      	movs	r2, #99	@ 0x63
 8001a46:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a48:	4b34      	ldr	r3, [pc, #208]	@ (8001b1c <MX_TIM1_Init+0x11c>)
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001a4e:	4b33      	ldr	r3, [pc, #204]	@ (8001b1c <MX_TIM1_Init+0x11c>)
 8001a50:	2200      	movs	r2, #0
 8001a52:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a54:	4b31      	ldr	r3, [pc, #196]	@ (8001b1c <MX_TIM1_Init+0x11c>)
 8001a56:	2200      	movs	r2, #0
 8001a58:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001a5a:	4830      	ldr	r0, [pc, #192]	@ (8001b1c <MX_TIM1_Init+0x11c>)
 8001a5c:	f001 fbd2 	bl	8003204 <HAL_TIM_PWM_Init>
 8001a60:	4603      	mov	r3, r0
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d001      	beq.n	8001a6a <MX_TIM1_Init+0x6a>
  {
    Error_Handler();
 8001a66:	f7ff fc11 	bl	800128c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a6e:	2300      	movs	r3, #0
 8001a70:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001a72:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001a76:	4619      	mov	r1, r3
 8001a78:	4828      	ldr	r0, [pc, #160]	@ (8001b1c <MX_TIM1_Init+0x11c>)
 8001a7a:	f002 fcdf 	bl	800443c <HAL_TIMEx_MasterConfigSynchronization>
 8001a7e:	4603      	mov	r3, r0
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d001      	beq.n	8001a88 <MX_TIM1_Init+0x88>
  {
    Error_Handler();
 8001a84:	f7ff fc02 	bl	800128c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001a88:	2360      	movs	r3, #96	@ 0x60
 8001a8a:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 50;
 8001a8c:	2332      	movs	r3, #50	@ 0x32
 8001a8e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001a90:	2300      	movs	r3, #0
 8001a92:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001a94:	2300      	movs	r3, #0
 8001a96:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001a98:	2300      	movs	r3, #0
 8001a9a:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001aa4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	4619      	mov	r1, r3
 8001aac:	481b      	ldr	r0, [pc, #108]	@ (8001b1c <MX_TIM1_Init+0x11c>)
 8001aae:	f001 ff31 	bl	8003914 <HAL_TIM_PWM_ConfigChannel>
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d001      	beq.n	8001abc <MX_TIM1_Init+0xbc>
  {
    Error_Handler();
 8001ab8:	f7ff fbe8 	bl	800128c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001abc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001ac0:	2204      	movs	r2, #4
 8001ac2:	4619      	mov	r1, r3
 8001ac4:	4815      	ldr	r0, [pc, #84]	@ (8001b1c <MX_TIM1_Init+0x11c>)
 8001ac6:	f001 ff25 	bl	8003914 <HAL_TIM_PWM_ConfigChannel>
 8001aca:	4603      	mov	r3, r0
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d001      	beq.n	8001ad4 <MX_TIM1_Init+0xd4>
  {
    Error_Handler();
 8001ad0:	f7ff fbdc 	bl	800128c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_ENABLE;
 8001ad4:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001ad8:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_ENABLE;
 8001ada:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001ade:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 3;
 8001ae4:	2303      	movs	r3, #3
 8001ae6:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_ENABLE;
 8001ae8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001aec:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001aee:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001af2:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_ENABLE;
 8001af4:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001af8:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001afa:	1d3b      	adds	r3, r7, #4
 8001afc:	4619      	mov	r1, r3
 8001afe:	4807      	ldr	r0, [pc, #28]	@ (8001b1c <MX_TIM1_Init+0x11c>)
 8001b00:	f002 fd0a 	bl	8004518 <HAL_TIMEx_ConfigBreakDeadTime>
 8001b04:	4603      	mov	r3, r0
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d001      	beq.n	8001b0e <MX_TIM1_Init+0x10e>
  {
    Error_Handler();
 8001b0a:	f7ff fbbf 	bl	800128c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001b0e:	4803      	ldr	r0, [pc, #12]	@ (8001b1c <MX_TIM1_Init+0x11c>)
 8001b10:	f000 f9f2 	bl	8001ef8 <HAL_TIM_MspPostInit>

}
 8001b14:	bf00      	nop
 8001b16:	3748      	adds	r7, #72	@ 0x48
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	bd80      	pop	{r7, pc}
 8001b1c:	20000230 	.word	0x20000230
 8001b20:	40010000 	.word	0x40010000

08001b24 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b08c      	sub	sp, #48	@ 0x30
 8001b28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001b2a:	f107 030c 	add.w	r3, r7, #12
 8001b2e:	2224      	movs	r2, #36	@ 0x24
 8001b30:	2100      	movs	r1, #0
 8001b32:	4618      	mov	r0, r3
 8001b34:	f003 ffcb 	bl	8005ace <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b38:	1d3b      	adds	r3, r7, #4
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	601a      	str	r2, [r3, #0]
 8001b3e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001b40:	4b21      	ldr	r3, [pc, #132]	@ (8001bc8 <MX_TIM2_Init+0xa4>)
 8001b42:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001b46:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001b48:	4b1f      	ldr	r3, [pc, #124]	@ (8001bc8 <MX_TIM2_Init+0xa4>)
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b4e:	4b1e      	ldr	r3, [pc, #120]	@ (8001bc8 <MX_TIM2_Init+0xa4>)
 8001b50:	2200      	movs	r2, #0
 8001b52:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8001b54:	4b1c      	ldr	r3, [pc, #112]	@ (8001bc8 <MX_TIM2_Init+0xa4>)
 8001b56:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001b5a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b5c:	4b1a      	ldr	r3, [pc, #104]	@ (8001bc8 <MX_TIM2_Init+0xa4>)
 8001b5e:	2200      	movs	r2, #0
 8001b60:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b62:	4b19      	ldr	r3, [pc, #100]	@ (8001bc8 <MX_TIM2_Init+0xa4>)
 8001b64:	2200      	movs	r2, #0
 8001b66:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001b68:	2301      	movs	r3, #1
 8001b6a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001b70:	2301      	movs	r3, #1
 8001b72:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001b74:	2300      	movs	r3, #0
 8001b76:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001b78:	2300      	movs	r3, #0
 8001b7a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001b80:	2301      	movs	r3, #1
 8001b82:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001b84:	2300      	movs	r3, #0
 8001b86:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001b88:	2300      	movs	r3, #0
 8001b8a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8001b8c:	f107 030c 	add.w	r3, r7, #12
 8001b90:	4619      	mov	r1, r3
 8001b92:	480d      	ldr	r0, [pc, #52]	@ (8001bc8 <MX_TIM2_Init+0xa4>)
 8001b94:	f001 fc9a 	bl	80034cc <HAL_TIM_Encoder_Init>
 8001b98:	4603      	mov	r3, r0
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d001      	beq.n	8001ba2 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8001b9e:	f7ff fb75 	bl	800128c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001baa:	1d3b      	adds	r3, r7, #4
 8001bac:	4619      	mov	r1, r3
 8001bae:	4806      	ldr	r0, [pc, #24]	@ (8001bc8 <MX_TIM2_Init+0xa4>)
 8001bb0:	f002 fc44 	bl	800443c <HAL_TIMEx_MasterConfigSynchronization>
 8001bb4:	4603      	mov	r3, r0
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d001      	beq.n	8001bbe <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8001bba:	f7ff fb67 	bl	800128c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001bbe:	bf00      	nop
 8001bc0:	3730      	adds	r7, #48	@ 0x30
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	bd80      	pop	{r7, pc}
 8001bc6:	bf00      	nop
 8001bc8:	20000278 	.word	0x20000278

08001bcc <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b08c      	sub	sp, #48	@ 0x30
 8001bd0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001bd2:	f107 030c 	add.w	r3, r7, #12
 8001bd6:	2224      	movs	r2, #36	@ 0x24
 8001bd8:	2100      	movs	r1, #0
 8001bda:	4618      	mov	r0, r3
 8001bdc:	f003 ff77 	bl	8005ace <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001be0:	1d3b      	adds	r3, r7, #4
 8001be2:	2200      	movs	r2, #0
 8001be4:	601a      	str	r2, [r3, #0]
 8001be6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001be8:	4b20      	ldr	r3, [pc, #128]	@ (8001c6c <MX_TIM3_Init+0xa0>)
 8001bea:	4a21      	ldr	r2, [pc, #132]	@ (8001c70 <MX_TIM3_Init+0xa4>)
 8001bec:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001bee:	4b1f      	ldr	r3, [pc, #124]	@ (8001c6c <MX_TIM3_Init+0xa0>)
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bf4:	4b1d      	ldr	r3, [pc, #116]	@ (8001c6c <MX_TIM3_Init+0xa0>)
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001bfa:	4b1c      	ldr	r3, [pc, #112]	@ (8001c6c <MX_TIM3_Init+0xa0>)
 8001bfc:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001c00:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c02:	4b1a      	ldr	r3, [pc, #104]	@ (8001c6c <MX_TIM3_Init+0xa0>)
 8001c04:	2200      	movs	r2, #0
 8001c06:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c08:	4b18      	ldr	r3, [pc, #96]	@ (8001c6c <MX_TIM3_Init+0xa0>)
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001c0e:	2301      	movs	r3, #1
 8001c10:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001c12:	2300      	movs	r3, #0
 8001c14:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001c16:	2301      	movs	r3, #1
 8001c18:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001c1e:	2300      	movs	r3, #0
 8001c20:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001c22:	2300      	movs	r3, #0
 8001c24:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001c26:	2301      	movs	r3, #1
 8001c28:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001c2e:	2300      	movs	r3, #0
 8001c30:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001c32:	f107 030c 	add.w	r3, r7, #12
 8001c36:	4619      	mov	r1, r3
 8001c38:	480c      	ldr	r0, [pc, #48]	@ (8001c6c <MX_TIM3_Init+0xa0>)
 8001c3a:	f001 fc47 	bl	80034cc <HAL_TIM_Encoder_Init>
 8001c3e:	4603      	mov	r3, r0
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d001      	beq.n	8001c48 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8001c44:	f7ff fb22 	bl	800128c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c48:	2300      	movs	r3, #0
 8001c4a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001c50:	1d3b      	adds	r3, r7, #4
 8001c52:	4619      	mov	r1, r3
 8001c54:	4805      	ldr	r0, [pc, #20]	@ (8001c6c <MX_TIM3_Init+0xa0>)
 8001c56:	f002 fbf1 	bl	800443c <HAL_TIMEx_MasterConfigSynchronization>
 8001c5a:	4603      	mov	r3, r0
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d001      	beq.n	8001c64 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8001c60:	f7ff fb14 	bl	800128c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001c64:	bf00      	nop
 8001c66:	3730      	adds	r7, #48	@ 0x30
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	bd80      	pop	{r7, pc}
 8001c6c:	200002c0 	.word	0x200002c0
 8001c70:	40000400 	.word	0x40000400

08001c74 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b086      	sub	sp, #24
 8001c78:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001c7a:	f107 0308 	add.w	r3, r7, #8
 8001c7e:	2200      	movs	r2, #0
 8001c80:	601a      	str	r2, [r3, #0]
 8001c82:	605a      	str	r2, [r3, #4]
 8001c84:	609a      	str	r2, [r3, #8]
 8001c86:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c88:	463b      	mov	r3, r7
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	601a      	str	r2, [r3, #0]
 8001c8e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001c90:	4b1d      	ldr	r3, [pc, #116]	@ (8001d08 <MX_TIM4_Init+0x94>)
 8001c92:	4a1e      	ldr	r2, [pc, #120]	@ (8001d0c <MX_TIM4_Init+0x98>)
 8001c94:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 8400-1;
 8001c96:	4b1c      	ldr	r3, [pc, #112]	@ (8001d08 <MX_TIM4_Init+0x94>)
 8001c98:	f242 02cf 	movw	r2, #8399	@ 0x20cf
 8001c9c:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c9e:	4b1a      	ldr	r3, [pc, #104]	@ (8001d08 <MX_TIM4_Init+0x94>)
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1000-1;
 8001ca4:	4b18      	ldr	r3, [pc, #96]	@ (8001d08 <MX_TIM4_Init+0x94>)
 8001ca6:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001caa:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001cac:	4b16      	ldr	r3, [pc, #88]	@ (8001d08 <MX_TIM4_Init+0x94>)
 8001cae:	2200      	movs	r2, #0
 8001cb0:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001cb2:	4b15      	ldr	r3, [pc, #84]	@ (8001d08 <MX_TIM4_Init+0x94>)
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001cb8:	4813      	ldr	r0, [pc, #76]	@ (8001d08 <MX_TIM4_Init+0x94>)
 8001cba:	f001 f9f1 	bl	80030a0 <HAL_TIM_Base_Init>
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d001      	beq.n	8001cc8 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 8001cc4:	f7ff fae2 	bl	800128c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001cc8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001ccc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001cce:	f107 0308 	add.w	r3, r7, #8
 8001cd2:	4619      	mov	r1, r3
 8001cd4:	480c      	ldr	r0, [pc, #48]	@ (8001d08 <MX_TIM4_Init+0x94>)
 8001cd6:	f001 fedf 	bl	8003a98 <HAL_TIM_ConfigClockSource>
 8001cda:	4603      	mov	r3, r0
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d001      	beq.n	8001ce4 <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8001ce0:	f7ff fad4 	bl	800128c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ce8:	2300      	movs	r3, #0
 8001cea:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001cec:	463b      	mov	r3, r7
 8001cee:	4619      	mov	r1, r3
 8001cf0:	4805      	ldr	r0, [pc, #20]	@ (8001d08 <MX_TIM4_Init+0x94>)
 8001cf2:	f002 fba3 	bl	800443c <HAL_TIMEx_MasterConfigSynchronization>
 8001cf6:	4603      	mov	r3, r0
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d001      	beq.n	8001d00 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8001cfc:	f7ff fac6 	bl	800128c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001d00:	bf00      	nop
 8001d02:	3718      	adds	r7, #24
 8001d04:	46bd      	mov	sp, r7
 8001d06:	bd80      	pop	{r7, pc}
 8001d08:	20000308 	.word	0x20000308
 8001d0c:	40000800 	.word	0x40000800

08001d10 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b08a      	sub	sp, #40	@ 0x28
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d18:	f107 0314 	add.w	r3, r7, #20
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	601a      	str	r2, [r3, #0]
 8001d20:	605a      	str	r2, [r3, #4]
 8001d22:	609a      	str	r2, [r3, #8]
 8001d24:	60da      	str	r2, [r3, #12]
 8001d26:	611a      	str	r2, [r3, #16]
  if(tim_pwmHandle->Instance==TIM1)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	4a1d      	ldr	r2, [pc, #116]	@ (8001da4 <HAL_TIM_PWM_MspInit+0x94>)
 8001d2e:	4293      	cmp	r3, r2
 8001d30:	d133      	bne.n	8001d9a <HAL_TIM_PWM_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001d32:	2300      	movs	r3, #0
 8001d34:	613b      	str	r3, [r7, #16]
 8001d36:	4b1c      	ldr	r3, [pc, #112]	@ (8001da8 <HAL_TIM_PWM_MspInit+0x98>)
 8001d38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d3a:	4a1b      	ldr	r2, [pc, #108]	@ (8001da8 <HAL_TIM_PWM_MspInit+0x98>)
 8001d3c:	f043 0301 	orr.w	r3, r3, #1
 8001d40:	6453      	str	r3, [r2, #68]	@ 0x44
 8001d42:	4b19      	ldr	r3, [pc, #100]	@ (8001da8 <HAL_TIM_PWM_MspInit+0x98>)
 8001d44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d46:	f003 0301 	and.w	r3, r3, #1
 8001d4a:	613b      	str	r3, [r7, #16]
 8001d4c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d4e:	2300      	movs	r3, #0
 8001d50:	60fb      	str	r3, [r7, #12]
 8001d52:	4b15      	ldr	r3, [pc, #84]	@ (8001da8 <HAL_TIM_PWM_MspInit+0x98>)
 8001d54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d56:	4a14      	ldr	r2, [pc, #80]	@ (8001da8 <HAL_TIM_PWM_MspInit+0x98>)
 8001d58:	f043 0301 	orr.w	r3, r3, #1
 8001d5c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d5e:	4b12      	ldr	r3, [pc, #72]	@ (8001da8 <HAL_TIM_PWM_MspInit+0x98>)
 8001d60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d62:	f003 0301 	and.w	r3, r3, #1
 8001d66:	60fb      	str	r3, [r7, #12]
 8001d68:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA6     ------> TIM1_BKIN
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001d6a:	2340      	movs	r3, #64	@ 0x40
 8001d6c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d6e:	2302      	movs	r3, #2
 8001d70:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d72:	2300      	movs	r3, #0
 8001d74:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d76:	2300      	movs	r3, #0
 8001d78:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001d7a:	2301      	movs	r3, #1
 8001d7c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d7e:	f107 0314 	add.w	r3, r7, #20
 8001d82:	4619      	mov	r1, r3
 8001d84:	4809      	ldr	r0, [pc, #36]	@ (8001dac <HAL_TIM_PWM_MspInit+0x9c>)
 8001d86:	f000 fb55 	bl	8002434 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 15, 0);
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	210f      	movs	r1, #15
 8001d8e:	201a      	movs	r0, #26
 8001d90:	f000 fb19 	bl	80023c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8001d94:	201a      	movs	r0, #26
 8001d96:	f000 fb32 	bl	80023fe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8001d9a:	bf00      	nop
 8001d9c:	3728      	adds	r7, #40	@ 0x28
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	bd80      	pop	{r7, pc}
 8001da2:	bf00      	nop
 8001da4:	40010000 	.word	0x40010000
 8001da8:	40023800 	.word	0x40023800
 8001dac:	40020000 	.word	0x40020000

08001db0 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b08c      	sub	sp, #48	@ 0x30
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001db8:	f107 031c 	add.w	r3, r7, #28
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	601a      	str	r2, [r3, #0]
 8001dc0:	605a      	str	r2, [r3, #4]
 8001dc2:	609a      	str	r2, [r3, #8]
 8001dc4:	60da      	str	r2, [r3, #12]
 8001dc6:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM2)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001dd0:	d12c      	bne.n	8001e2c <HAL_TIM_Encoder_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	61bb      	str	r3, [r7, #24]
 8001dd6:	4b30      	ldr	r3, [pc, #192]	@ (8001e98 <HAL_TIM_Encoder_MspInit+0xe8>)
 8001dd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dda:	4a2f      	ldr	r2, [pc, #188]	@ (8001e98 <HAL_TIM_Encoder_MspInit+0xe8>)
 8001ddc:	f043 0301 	orr.w	r3, r3, #1
 8001de0:	6413      	str	r3, [r2, #64]	@ 0x40
 8001de2:	4b2d      	ldr	r3, [pc, #180]	@ (8001e98 <HAL_TIM_Encoder_MspInit+0xe8>)
 8001de4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001de6:	f003 0301 	and.w	r3, r3, #1
 8001dea:	61bb      	str	r3, [r7, #24]
 8001dec:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dee:	2300      	movs	r3, #0
 8001df0:	617b      	str	r3, [r7, #20]
 8001df2:	4b29      	ldr	r3, [pc, #164]	@ (8001e98 <HAL_TIM_Encoder_MspInit+0xe8>)
 8001df4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001df6:	4a28      	ldr	r2, [pc, #160]	@ (8001e98 <HAL_TIM_Encoder_MspInit+0xe8>)
 8001df8:	f043 0301 	orr.w	r3, r3, #1
 8001dfc:	6313      	str	r3, [r2, #48]	@ 0x30
 8001dfe:	4b26      	ldr	r3, [pc, #152]	@ (8001e98 <HAL_TIM_Encoder_MspInit+0xe8>)
 8001e00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e02:	f003 0301 	and.w	r3, r3, #1
 8001e06:	617b      	str	r3, [r7, #20]
 8001e08:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001e0a:	2303      	movs	r3, #3
 8001e0c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e0e:	2302      	movs	r3, #2
 8001e10:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e12:	2300      	movs	r3, #0
 8001e14:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e16:	2300      	movs	r3, #0
 8001e18:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001e1a:	2301      	movs	r3, #1
 8001e1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e1e:	f107 031c 	add.w	r3, r7, #28
 8001e22:	4619      	mov	r1, r3
 8001e24:	481d      	ldr	r0, [pc, #116]	@ (8001e9c <HAL_TIM_Encoder_MspInit+0xec>)
 8001e26:	f000 fb05 	bl	8002434 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8001e2a:	e030      	b.n	8001e8e <HAL_TIM_Encoder_MspInit+0xde>
  else if(tim_encoderHandle->Instance==TIM3)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	4a1b      	ldr	r2, [pc, #108]	@ (8001ea0 <HAL_TIM_Encoder_MspInit+0xf0>)
 8001e32:	4293      	cmp	r3, r2
 8001e34:	d12b      	bne.n	8001e8e <HAL_TIM_Encoder_MspInit+0xde>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001e36:	2300      	movs	r3, #0
 8001e38:	613b      	str	r3, [r7, #16]
 8001e3a:	4b17      	ldr	r3, [pc, #92]	@ (8001e98 <HAL_TIM_Encoder_MspInit+0xe8>)
 8001e3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e3e:	4a16      	ldr	r2, [pc, #88]	@ (8001e98 <HAL_TIM_Encoder_MspInit+0xe8>)
 8001e40:	f043 0302 	orr.w	r3, r3, #2
 8001e44:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e46:	4b14      	ldr	r3, [pc, #80]	@ (8001e98 <HAL_TIM_Encoder_MspInit+0xe8>)
 8001e48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e4a:	f003 0302 	and.w	r3, r3, #2
 8001e4e:	613b      	str	r3, [r7, #16]
 8001e50:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e52:	2300      	movs	r3, #0
 8001e54:	60fb      	str	r3, [r7, #12]
 8001e56:	4b10      	ldr	r3, [pc, #64]	@ (8001e98 <HAL_TIM_Encoder_MspInit+0xe8>)
 8001e58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e5a:	4a0f      	ldr	r2, [pc, #60]	@ (8001e98 <HAL_TIM_Encoder_MspInit+0xe8>)
 8001e5c:	f043 0304 	orr.w	r3, r3, #4
 8001e60:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e62:	4b0d      	ldr	r3, [pc, #52]	@ (8001e98 <HAL_TIM_Encoder_MspInit+0xe8>)
 8001e64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e66:	f003 0304 	and.w	r3, r3, #4
 8001e6a:	60fb      	str	r3, [r7, #12]
 8001e6c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001e6e:	23c0      	movs	r3, #192	@ 0xc0
 8001e70:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e72:	2302      	movs	r3, #2
 8001e74:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e76:	2300      	movs	r3, #0
 8001e78:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001e7e:	2302      	movs	r3, #2
 8001e80:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e82:	f107 031c 	add.w	r3, r7, #28
 8001e86:	4619      	mov	r1, r3
 8001e88:	4806      	ldr	r0, [pc, #24]	@ (8001ea4 <HAL_TIM_Encoder_MspInit+0xf4>)
 8001e8a:	f000 fad3 	bl	8002434 <HAL_GPIO_Init>
}
 8001e8e:	bf00      	nop
 8001e90:	3730      	adds	r7, #48	@ 0x30
 8001e92:	46bd      	mov	sp, r7
 8001e94:	bd80      	pop	{r7, pc}
 8001e96:	bf00      	nop
 8001e98:	40023800 	.word	0x40023800
 8001e9c:	40020000 	.word	0x40020000
 8001ea0:	40000400 	.word	0x40000400
 8001ea4:	40020800 	.word	0x40020800

08001ea8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b084      	sub	sp, #16
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM4)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	4a0e      	ldr	r2, [pc, #56]	@ (8001ef0 <HAL_TIM_Base_MspInit+0x48>)
 8001eb6:	4293      	cmp	r3, r2
 8001eb8:	d115      	bne.n	8001ee6 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001eba:	2300      	movs	r3, #0
 8001ebc:	60fb      	str	r3, [r7, #12]
 8001ebe:	4b0d      	ldr	r3, [pc, #52]	@ (8001ef4 <HAL_TIM_Base_MspInit+0x4c>)
 8001ec0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ec2:	4a0c      	ldr	r2, [pc, #48]	@ (8001ef4 <HAL_TIM_Base_MspInit+0x4c>)
 8001ec4:	f043 0304 	orr.w	r3, r3, #4
 8001ec8:	6413      	str	r3, [r2, #64]	@ 0x40
 8001eca:	4b0a      	ldr	r3, [pc, #40]	@ (8001ef4 <HAL_TIM_Base_MspInit+0x4c>)
 8001ecc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ece:	f003 0304 	and.w	r3, r3, #4
 8001ed2:	60fb      	str	r3, [r7, #12]
 8001ed4:	68fb      	ldr	r3, [r7, #12]

    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	2100      	movs	r1, #0
 8001eda:	201e      	movs	r0, #30
 8001edc:	f000 fa73 	bl	80023c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001ee0:	201e      	movs	r0, #30
 8001ee2:	f000 fa8c 	bl	80023fe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8001ee6:	bf00      	nop
 8001ee8:	3710      	adds	r7, #16
 8001eea:	46bd      	mov	sp, r7
 8001eec:	bd80      	pop	{r7, pc}
 8001eee:	bf00      	nop
 8001ef0:	40000800 	.word	0x40000800
 8001ef4:	40023800 	.word	0x40023800

08001ef8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b08a      	sub	sp, #40	@ 0x28
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f00:	f107 0314 	add.w	r3, r7, #20
 8001f04:	2200      	movs	r2, #0
 8001f06:	601a      	str	r2, [r3, #0]
 8001f08:	605a      	str	r2, [r3, #4]
 8001f0a:	609a      	str	r2, [r3, #8]
 8001f0c:	60da      	str	r2, [r3, #12]
 8001f0e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	4a21      	ldr	r2, [pc, #132]	@ (8001f9c <HAL_TIM_MspPostInit+0xa4>)
 8001f16:	4293      	cmp	r3, r2
 8001f18:	d13c      	bne.n	8001f94 <HAL_TIM_MspPostInit+0x9c>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	613b      	str	r3, [r7, #16]
 8001f1e:	4b20      	ldr	r3, [pc, #128]	@ (8001fa0 <HAL_TIM_MspPostInit+0xa8>)
 8001f20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f22:	4a1f      	ldr	r2, [pc, #124]	@ (8001fa0 <HAL_TIM_MspPostInit+0xa8>)
 8001f24:	f043 0301 	orr.w	r3, r3, #1
 8001f28:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f2a:	4b1d      	ldr	r3, [pc, #116]	@ (8001fa0 <HAL_TIM_MspPostInit+0xa8>)
 8001f2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f2e:	f003 0301 	and.w	r3, r3, #1
 8001f32:	613b      	str	r3, [r7, #16]
 8001f34:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f36:	2300      	movs	r3, #0
 8001f38:	60fb      	str	r3, [r7, #12]
 8001f3a:	4b19      	ldr	r3, [pc, #100]	@ (8001fa0 <HAL_TIM_MspPostInit+0xa8>)
 8001f3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f3e:	4a18      	ldr	r2, [pc, #96]	@ (8001fa0 <HAL_TIM_MspPostInit+0xa8>)
 8001f40:	f043 0302 	orr.w	r3, r3, #2
 8001f44:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f46:	4b16      	ldr	r3, [pc, #88]	@ (8001fa0 <HAL_TIM_MspPostInit+0xa8>)
 8001f48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f4a:	f003 0302 	and.w	r3, r3, #2
 8001f4e:	60fb      	str	r3, [r7, #12]
 8001f50:	68fb      	ldr	r3, [r7, #12]
    PA7     ------> TIM1_CH1N
    PB0     ------> TIM1_CH2N
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8001f52:	f44f 7360 	mov.w	r3, #896	@ 0x380
 8001f56:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f58:	2302      	movs	r3, #2
 8001f5a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f5c:	2300      	movs	r3, #0
 8001f5e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f60:	2300      	movs	r3, #0
 8001f62:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001f64:	2301      	movs	r3, #1
 8001f66:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f68:	f107 0314 	add.w	r3, r7, #20
 8001f6c:	4619      	mov	r1, r3
 8001f6e:	480d      	ldr	r0, [pc, #52]	@ (8001fa4 <HAL_TIM_MspPostInit+0xac>)
 8001f70:	f000 fa60 	bl	8002434 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001f74:	2301      	movs	r3, #1
 8001f76:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f78:	2302      	movs	r3, #2
 8001f7a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f80:	2300      	movs	r3, #0
 8001f82:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001f84:	2301      	movs	r3, #1
 8001f86:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f88:	f107 0314 	add.w	r3, r7, #20
 8001f8c:	4619      	mov	r1, r3
 8001f8e:	4806      	ldr	r0, [pc, #24]	@ (8001fa8 <HAL_TIM_MspPostInit+0xb0>)
 8001f90:	f000 fa50 	bl	8002434 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001f94:	bf00      	nop
 8001f96:	3728      	adds	r7, #40	@ 0x28
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	bd80      	pop	{r7, pc}
 8001f9c:	40010000 	.word	0x40010000
 8001fa0:	40023800 	.word	0x40023800
 8001fa4:	40020000 	.word	0x40020000
 8001fa8:	40020400 	.word	0x40020400

08001fac <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001fb0:	4b11      	ldr	r3, [pc, #68]	@ (8001ff8 <MX_USART2_UART_Init+0x4c>)
 8001fb2:	4a12      	ldr	r2, [pc, #72]	@ (8001ffc <MX_USART2_UART_Init+0x50>)
 8001fb4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001fb6:	4b10      	ldr	r3, [pc, #64]	@ (8001ff8 <MX_USART2_UART_Init+0x4c>)
 8001fb8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001fbc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001fbe:	4b0e      	ldr	r3, [pc, #56]	@ (8001ff8 <MX_USART2_UART_Init+0x4c>)
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001fc4:	4b0c      	ldr	r3, [pc, #48]	@ (8001ff8 <MX_USART2_UART_Init+0x4c>)
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001fca:	4b0b      	ldr	r3, [pc, #44]	@ (8001ff8 <MX_USART2_UART_Init+0x4c>)
 8001fcc:	2200      	movs	r2, #0
 8001fce:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001fd0:	4b09      	ldr	r3, [pc, #36]	@ (8001ff8 <MX_USART2_UART_Init+0x4c>)
 8001fd2:	220c      	movs	r2, #12
 8001fd4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001fd6:	4b08      	ldr	r3, [pc, #32]	@ (8001ff8 <MX_USART2_UART_Init+0x4c>)
 8001fd8:	2200      	movs	r2, #0
 8001fda:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001fdc:	4b06      	ldr	r3, [pc, #24]	@ (8001ff8 <MX_USART2_UART_Init+0x4c>)
 8001fde:	2200      	movs	r2, #0
 8001fe0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001fe2:	4805      	ldr	r0, [pc, #20]	@ (8001ff8 <MX_USART2_UART_Init+0x4c>)
 8001fe4:	f002 fb23 	bl	800462e <HAL_UART_Init>
 8001fe8:	4603      	mov	r3, r0
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d001      	beq.n	8001ff2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001fee:	f7ff f94d 	bl	800128c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001ff2:	bf00      	nop
 8001ff4:	bd80      	pop	{r7, pc}
 8001ff6:	bf00      	nop
 8001ff8:	20000350 	.word	0x20000350
 8001ffc:	40004400 	.word	0x40004400

08002000 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	b08a      	sub	sp, #40	@ 0x28
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002008:	f107 0314 	add.w	r3, r7, #20
 800200c:	2200      	movs	r2, #0
 800200e:	601a      	str	r2, [r3, #0]
 8002010:	605a      	str	r2, [r3, #4]
 8002012:	609a      	str	r2, [r3, #8]
 8002014:	60da      	str	r2, [r3, #12]
 8002016:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	4a19      	ldr	r2, [pc, #100]	@ (8002084 <HAL_UART_MspInit+0x84>)
 800201e:	4293      	cmp	r3, r2
 8002020:	d12b      	bne.n	800207a <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002022:	2300      	movs	r3, #0
 8002024:	613b      	str	r3, [r7, #16]
 8002026:	4b18      	ldr	r3, [pc, #96]	@ (8002088 <HAL_UART_MspInit+0x88>)
 8002028:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800202a:	4a17      	ldr	r2, [pc, #92]	@ (8002088 <HAL_UART_MspInit+0x88>)
 800202c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002030:	6413      	str	r3, [r2, #64]	@ 0x40
 8002032:	4b15      	ldr	r3, [pc, #84]	@ (8002088 <HAL_UART_MspInit+0x88>)
 8002034:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002036:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800203a:	613b      	str	r3, [r7, #16]
 800203c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800203e:	2300      	movs	r3, #0
 8002040:	60fb      	str	r3, [r7, #12]
 8002042:	4b11      	ldr	r3, [pc, #68]	@ (8002088 <HAL_UART_MspInit+0x88>)
 8002044:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002046:	4a10      	ldr	r2, [pc, #64]	@ (8002088 <HAL_UART_MspInit+0x88>)
 8002048:	f043 0301 	orr.w	r3, r3, #1
 800204c:	6313      	str	r3, [r2, #48]	@ 0x30
 800204e:	4b0e      	ldr	r3, [pc, #56]	@ (8002088 <HAL_UART_MspInit+0x88>)
 8002050:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002052:	f003 0301 	and.w	r3, r3, #1
 8002056:	60fb      	str	r3, [r7, #12]
 8002058:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800205a:	230c      	movs	r3, #12
 800205c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800205e:	2302      	movs	r3, #2
 8002060:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002062:	2300      	movs	r3, #0
 8002064:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002066:	2300      	movs	r3, #0
 8002068:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800206a:	2307      	movs	r3, #7
 800206c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800206e:	f107 0314 	add.w	r3, r7, #20
 8002072:	4619      	mov	r1, r3
 8002074:	4805      	ldr	r0, [pc, #20]	@ (800208c <HAL_UART_MspInit+0x8c>)
 8002076:	f000 f9dd 	bl	8002434 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800207a:	bf00      	nop
 800207c:	3728      	adds	r7, #40	@ 0x28
 800207e:	46bd      	mov	sp, r7
 8002080:	bd80      	pop	{r7, pc}
 8002082:	bf00      	nop
 8002084:	40004400 	.word	0x40004400
 8002088:	40023800 	.word	0x40023800
 800208c:	40020000 	.word	0x40020000

08002090 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002090:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80020c8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002094:	f7ff fca2 	bl	80019dc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002098:	480c      	ldr	r0, [pc, #48]	@ (80020cc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800209a:	490d      	ldr	r1, [pc, #52]	@ (80020d0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800209c:	4a0d      	ldr	r2, [pc, #52]	@ (80020d4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800209e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80020a0:	e002      	b.n	80020a8 <LoopCopyDataInit>

080020a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80020a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80020a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80020a6:	3304      	adds	r3, #4

080020a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80020a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80020aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80020ac:	d3f9      	bcc.n	80020a2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80020ae:	4a0a      	ldr	r2, [pc, #40]	@ (80020d8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80020b0:	4c0a      	ldr	r4, [pc, #40]	@ (80020dc <LoopFillZerobss+0x22>)
  movs r3, #0
 80020b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80020b4:	e001      	b.n	80020ba <LoopFillZerobss>

080020b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80020b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80020b8:	3204      	adds	r2, #4

080020ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80020ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80020bc:	d3fb      	bcc.n	80020b6 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 80020be:	f003 fd5f 	bl	8005b80 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80020c2:	f7ff f82b 	bl	800111c <main>
  bx  lr    
 80020c6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80020c8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80020cc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80020d0:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 80020d4:	08009cfc 	.word	0x08009cfc
  ldr r2, =_sbss
 80020d8:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 80020dc:	200004e8 	.word	0x200004e8

080020e0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80020e0:	e7fe      	b.n	80020e0 <ADC_IRQHandler>
	...

080020e4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80020e8:	4b0e      	ldr	r3, [pc, #56]	@ (8002124 <HAL_Init+0x40>)
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	4a0d      	ldr	r2, [pc, #52]	@ (8002124 <HAL_Init+0x40>)
 80020ee:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80020f2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80020f4:	4b0b      	ldr	r3, [pc, #44]	@ (8002124 <HAL_Init+0x40>)
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	4a0a      	ldr	r2, [pc, #40]	@ (8002124 <HAL_Init+0x40>)
 80020fa:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80020fe:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002100:	4b08      	ldr	r3, [pc, #32]	@ (8002124 <HAL_Init+0x40>)
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	4a07      	ldr	r2, [pc, #28]	@ (8002124 <HAL_Init+0x40>)
 8002106:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800210a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800210c:	2003      	movs	r0, #3
 800210e:	f000 f94f 	bl	80023b0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002112:	2000      	movs	r0, #0
 8002114:	f000 f808 	bl	8002128 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002118:	f7ff fb2e 	bl	8001778 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800211c:	2300      	movs	r3, #0
}
 800211e:	4618      	mov	r0, r3
 8002120:	bd80      	pop	{r7, pc}
 8002122:	bf00      	nop
 8002124:	40023c00 	.word	0x40023c00

08002128 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	b082      	sub	sp, #8
 800212c:	af00      	add	r7, sp, #0
 800212e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002130:	4b12      	ldr	r3, [pc, #72]	@ (800217c <HAL_InitTick+0x54>)
 8002132:	681a      	ldr	r2, [r3, #0]
 8002134:	4b12      	ldr	r3, [pc, #72]	@ (8002180 <HAL_InitTick+0x58>)
 8002136:	781b      	ldrb	r3, [r3, #0]
 8002138:	4619      	mov	r1, r3
 800213a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800213e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002142:	fbb2 f3f3 	udiv	r3, r2, r3
 8002146:	4618      	mov	r0, r3
 8002148:	f000 f967 	bl	800241a <HAL_SYSTICK_Config>
 800214c:	4603      	mov	r3, r0
 800214e:	2b00      	cmp	r3, #0
 8002150:	d001      	beq.n	8002156 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002152:	2301      	movs	r3, #1
 8002154:	e00e      	b.n	8002174 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	2b0f      	cmp	r3, #15
 800215a:	d80a      	bhi.n	8002172 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800215c:	2200      	movs	r2, #0
 800215e:	6879      	ldr	r1, [r7, #4]
 8002160:	f04f 30ff 	mov.w	r0, #4294967295
 8002164:	f000 f92f 	bl	80023c6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002168:	4a06      	ldr	r2, [pc, #24]	@ (8002184 <HAL_InitTick+0x5c>)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800216e:	2300      	movs	r3, #0
 8002170:	e000      	b.n	8002174 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002172:	2301      	movs	r3, #1
}
 8002174:	4618      	mov	r0, r3
 8002176:	3708      	adds	r7, #8
 8002178:	46bd      	mov	sp, r7
 800217a:	bd80      	pop	{r7, pc}
 800217c:	20000000 	.word	0x20000000
 8002180:	20000008 	.word	0x20000008
 8002184:	20000004 	.word	0x20000004

08002188 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002188:	b480      	push	{r7}
 800218a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800218c:	4b06      	ldr	r3, [pc, #24]	@ (80021a8 <HAL_IncTick+0x20>)
 800218e:	781b      	ldrb	r3, [r3, #0]
 8002190:	461a      	mov	r2, r3
 8002192:	4b06      	ldr	r3, [pc, #24]	@ (80021ac <HAL_IncTick+0x24>)
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	4413      	add	r3, r2
 8002198:	4a04      	ldr	r2, [pc, #16]	@ (80021ac <HAL_IncTick+0x24>)
 800219a:	6013      	str	r3, [r2, #0]
}
 800219c:	bf00      	nop
 800219e:	46bd      	mov	sp, r7
 80021a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a4:	4770      	bx	lr
 80021a6:	bf00      	nop
 80021a8:	20000008 	.word	0x20000008
 80021ac:	20000398 	.word	0x20000398

080021b0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80021b0:	b480      	push	{r7}
 80021b2:	af00      	add	r7, sp, #0
  return uwTick;
 80021b4:	4b03      	ldr	r3, [pc, #12]	@ (80021c4 <HAL_GetTick+0x14>)
 80021b6:	681b      	ldr	r3, [r3, #0]
}
 80021b8:	4618      	mov	r0, r3
 80021ba:	46bd      	mov	sp, r7
 80021bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c0:	4770      	bx	lr
 80021c2:	bf00      	nop
 80021c4:	20000398 	.word	0x20000398

080021c8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b084      	sub	sp, #16
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80021d0:	f7ff ffee 	bl	80021b0 <HAL_GetTick>
 80021d4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021e0:	d005      	beq.n	80021ee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80021e2:	4b0a      	ldr	r3, [pc, #40]	@ (800220c <HAL_Delay+0x44>)
 80021e4:	781b      	ldrb	r3, [r3, #0]
 80021e6:	461a      	mov	r2, r3
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	4413      	add	r3, r2
 80021ec:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80021ee:	bf00      	nop
 80021f0:	f7ff ffde 	bl	80021b0 <HAL_GetTick>
 80021f4:	4602      	mov	r2, r0
 80021f6:	68bb      	ldr	r3, [r7, #8]
 80021f8:	1ad3      	subs	r3, r2, r3
 80021fa:	68fa      	ldr	r2, [r7, #12]
 80021fc:	429a      	cmp	r2, r3
 80021fe:	d8f7      	bhi.n	80021f0 <HAL_Delay+0x28>
  {
  }
}
 8002200:	bf00      	nop
 8002202:	bf00      	nop
 8002204:	3710      	adds	r7, #16
 8002206:	46bd      	mov	sp, r7
 8002208:	bd80      	pop	{r7, pc}
 800220a:	bf00      	nop
 800220c:	20000008 	.word	0x20000008

08002210 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002210:	b480      	push	{r7}
 8002212:	b085      	sub	sp, #20
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	f003 0307 	and.w	r3, r3, #7
 800221e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002220:	4b0c      	ldr	r3, [pc, #48]	@ (8002254 <__NVIC_SetPriorityGrouping+0x44>)
 8002222:	68db      	ldr	r3, [r3, #12]
 8002224:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002226:	68ba      	ldr	r2, [r7, #8]
 8002228:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800222c:	4013      	ands	r3, r2
 800222e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002234:	68bb      	ldr	r3, [r7, #8]
 8002236:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002238:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800223c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002240:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002242:	4a04      	ldr	r2, [pc, #16]	@ (8002254 <__NVIC_SetPriorityGrouping+0x44>)
 8002244:	68bb      	ldr	r3, [r7, #8]
 8002246:	60d3      	str	r3, [r2, #12]
}
 8002248:	bf00      	nop
 800224a:	3714      	adds	r7, #20
 800224c:	46bd      	mov	sp, r7
 800224e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002252:	4770      	bx	lr
 8002254:	e000ed00 	.word	0xe000ed00

08002258 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002258:	b480      	push	{r7}
 800225a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800225c:	4b04      	ldr	r3, [pc, #16]	@ (8002270 <__NVIC_GetPriorityGrouping+0x18>)
 800225e:	68db      	ldr	r3, [r3, #12]
 8002260:	0a1b      	lsrs	r3, r3, #8
 8002262:	f003 0307 	and.w	r3, r3, #7
}
 8002266:	4618      	mov	r0, r3
 8002268:	46bd      	mov	sp, r7
 800226a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226e:	4770      	bx	lr
 8002270:	e000ed00 	.word	0xe000ed00

08002274 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002274:	b480      	push	{r7}
 8002276:	b083      	sub	sp, #12
 8002278:	af00      	add	r7, sp, #0
 800227a:	4603      	mov	r3, r0
 800227c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800227e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002282:	2b00      	cmp	r3, #0
 8002284:	db0b      	blt.n	800229e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002286:	79fb      	ldrb	r3, [r7, #7]
 8002288:	f003 021f 	and.w	r2, r3, #31
 800228c:	4907      	ldr	r1, [pc, #28]	@ (80022ac <__NVIC_EnableIRQ+0x38>)
 800228e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002292:	095b      	lsrs	r3, r3, #5
 8002294:	2001      	movs	r0, #1
 8002296:	fa00 f202 	lsl.w	r2, r0, r2
 800229a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800229e:	bf00      	nop
 80022a0:	370c      	adds	r7, #12
 80022a2:	46bd      	mov	sp, r7
 80022a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a8:	4770      	bx	lr
 80022aa:	bf00      	nop
 80022ac:	e000e100 	.word	0xe000e100

080022b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80022b0:	b480      	push	{r7}
 80022b2:	b083      	sub	sp, #12
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	4603      	mov	r3, r0
 80022b8:	6039      	str	r1, [r7, #0]
 80022ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	db0a      	blt.n	80022da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	b2da      	uxtb	r2, r3
 80022c8:	490c      	ldr	r1, [pc, #48]	@ (80022fc <__NVIC_SetPriority+0x4c>)
 80022ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022ce:	0112      	lsls	r2, r2, #4
 80022d0:	b2d2      	uxtb	r2, r2
 80022d2:	440b      	add	r3, r1
 80022d4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80022d8:	e00a      	b.n	80022f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022da:	683b      	ldr	r3, [r7, #0]
 80022dc:	b2da      	uxtb	r2, r3
 80022de:	4908      	ldr	r1, [pc, #32]	@ (8002300 <__NVIC_SetPriority+0x50>)
 80022e0:	79fb      	ldrb	r3, [r7, #7]
 80022e2:	f003 030f 	and.w	r3, r3, #15
 80022e6:	3b04      	subs	r3, #4
 80022e8:	0112      	lsls	r2, r2, #4
 80022ea:	b2d2      	uxtb	r2, r2
 80022ec:	440b      	add	r3, r1
 80022ee:	761a      	strb	r2, [r3, #24]
}
 80022f0:	bf00      	nop
 80022f2:	370c      	adds	r7, #12
 80022f4:	46bd      	mov	sp, r7
 80022f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fa:	4770      	bx	lr
 80022fc:	e000e100 	.word	0xe000e100
 8002300:	e000ed00 	.word	0xe000ed00

08002304 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002304:	b480      	push	{r7}
 8002306:	b089      	sub	sp, #36	@ 0x24
 8002308:	af00      	add	r7, sp, #0
 800230a:	60f8      	str	r0, [r7, #12]
 800230c:	60b9      	str	r1, [r7, #8]
 800230e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	f003 0307 	and.w	r3, r3, #7
 8002316:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002318:	69fb      	ldr	r3, [r7, #28]
 800231a:	f1c3 0307 	rsb	r3, r3, #7
 800231e:	2b04      	cmp	r3, #4
 8002320:	bf28      	it	cs
 8002322:	2304      	movcs	r3, #4
 8002324:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002326:	69fb      	ldr	r3, [r7, #28]
 8002328:	3304      	adds	r3, #4
 800232a:	2b06      	cmp	r3, #6
 800232c:	d902      	bls.n	8002334 <NVIC_EncodePriority+0x30>
 800232e:	69fb      	ldr	r3, [r7, #28]
 8002330:	3b03      	subs	r3, #3
 8002332:	e000      	b.n	8002336 <NVIC_EncodePriority+0x32>
 8002334:	2300      	movs	r3, #0
 8002336:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002338:	f04f 32ff 	mov.w	r2, #4294967295
 800233c:	69bb      	ldr	r3, [r7, #24]
 800233e:	fa02 f303 	lsl.w	r3, r2, r3
 8002342:	43da      	mvns	r2, r3
 8002344:	68bb      	ldr	r3, [r7, #8]
 8002346:	401a      	ands	r2, r3
 8002348:	697b      	ldr	r3, [r7, #20]
 800234a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800234c:	f04f 31ff 	mov.w	r1, #4294967295
 8002350:	697b      	ldr	r3, [r7, #20]
 8002352:	fa01 f303 	lsl.w	r3, r1, r3
 8002356:	43d9      	mvns	r1, r3
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800235c:	4313      	orrs	r3, r2
         );
}
 800235e:	4618      	mov	r0, r3
 8002360:	3724      	adds	r7, #36	@ 0x24
 8002362:	46bd      	mov	sp, r7
 8002364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002368:	4770      	bx	lr
	...

0800236c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800236c:	b580      	push	{r7, lr}
 800236e:	b082      	sub	sp, #8
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	3b01      	subs	r3, #1
 8002378:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800237c:	d301      	bcc.n	8002382 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800237e:	2301      	movs	r3, #1
 8002380:	e00f      	b.n	80023a2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002382:	4a0a      	ldr	r2, [pc, #40]	@ (80023ac <SysTick_Config+0x40>)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	3b01      	subs	r3, #1
 8002388:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800238a:	210f      	movs	r1, #15
 800238c:	f04f 30ff 	mov.w	r0, #4294967295
 8002390:	f7ff ff8e 	bl	80022b0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002394:	4b05      	ldr	r3, [pc, #20]	@ (80023ac <SysTick_Config+0x40>)
 8002396:	2200      	movs	r2, #0
 8002398:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800239a:	4b04      	ldr	r3, [pc, #16]	@ (80023ac <SysTick_Config+0x40>)
 800239c:	2207      	movs	r2, #7
 800239e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80023a0:	2300      	movs	r3, #0
}
 80023a2:	4618      	mov	r0, r3
 80023a4:	3708      	adds	r7, #8
 80023a6:	46bd      	mov	sp, r7
 80023a8:	bd80      	pop	{r7, pc}
 80023aa:	bf00      	nop
 80023ac:	e000e010 	.word	0xe000e010

080023b0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b082      	sub	sp, #8
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80023b8:	6878      	ldr	r0, [r7, #4]
 80023ba:	f7ff ff29 	bl	8002210 <__NVIC_SetPriorityGrouping>
}
 80023be:	bf00      	nop
 80023c0:	3708      	adds	r7, #8
 80023c2:	46bd      	mov	sp, r7
 80023c4:	bd80      	pop	{r7, pc}

080023c6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80023c6:	b580      	push	{r7, lr}
 80023c8:	b086      	sub	sp, #24
 80023ca:	af00      	add	r7, sp, #0
 80023cc:	4603      	mov	r3, r0
 80023ce:	60b9      	str	r1, [r7, #8]
 80023d0:	607a      	str	r2, [r7, #4]
 80023d2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80023d4:	2300      	movs	r3, #0
 80023d6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80023d8:	f7ff ff3e 	bl	8002258 <__NVIC_GetPriorityGrouping>
 80023dc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80023de:	687a      	ldr	r2, [r7, #4]
 80023e0:	68b9      	ldr	r1, [r7, #8]
 80023e2:	6978      	ldr	r0, [r7, #20]
 80023e4:	f7ff ff8e 	bl	8002304 <NVIC_EncodePriority>
 80023e8:	4602      	mov	r2, r0
 80023ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80023ee:	4611      	mov	r1, r2
 80023f0:	4618      	mov	r0, r3
 80023f2:	f7ff ff5d 	bl	80022b0 <__NVIC_SetPriority>
}
 80023f6:	bf00      	nop
 80023f8:	3718      	adds	r7, #24
 80023fa:	46bd      	mov	sp, r7
 80023fc:	bd80      	pop	{r7, pc}

080023fe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023fe:	b580      	push	{r7, lr}
 8002400:	b082      	sub	sp, #8
 8002402:	af00      	add	r7, sp, #0
 8002404:	4603      	mov	r3, r0
 8002406:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002408:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800240c:	4618      	mov	r0, r3
 800240e:	f7ff ff31 	bl	8002274 <__NVIC_EnableIRQ>
}
 8002412:	bf00      	nop
 8002414:	3708      	adds	r7, #8
 8002416:	46bd      	mov	sp, r7
 8002418:	bd80      	pop	{r7, pc}

0800241a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800241a:	b580      	push	{r7, lr}
 800241c:	b082      	sub	sp, #8
 800241e:	af00      	add	r7, sp, #0
 8002420:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002422:	6878      	ldr	r0, [r7, #4]
 8002424:	f7ff ffa2 	bl	800236c <SysTick_Config>
 8002428:	4603      	mov	r3, r0
}
 800242a:	4618      	mov	r0, r3
 800242c:	3708      	adds	r7, #8
 800242e:	46bd      	mov	sp, r7
 8002430:	bd80      	pop	{r7, pc}
	...

08002434 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002434:	b480      	push	{r7}
 8002436:	b089      	sub	sp, #36	@ 0x24
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
 800243c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800243e:	2300      	movs	r3, #0
 8002440:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002442:	2300      	movs	r3, #0
 8002444:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002446:	2300      	movs	r3, #0
 8002448:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800244a:	2300      	movs	r3, #0
 800244c:	61fb      	str	r3, [r7, #28]
 800244e:	e159      	b.n	8002704 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002450:	2201      	movs	r2, #1
 8002452:	69fb      	ldr	r3, [r7, #28]
 8002454:	fa02 f303 	lsl.w	r3, r2, r3
 8002458:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800245a:	683b      	ldr	r3, [r7, #0]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	697a      	ldr	r2, [r7, #20]
 8002460:	4013      	ands	r3, r2
 8002462:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002464:	693a      	ldr	r2, [r7, #16]
 8002466:	697b      	ldr	r3, [r7, #20]
 8002468:	429a      	cmp	r2, r3
 800246a:	f040 8148 	bne.w	80026fe <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800246e:	683b      	ldr	r3, [r7, #0]
 8002470:	685b      	ldr	r3, [r3, #4]
 8002472:	f003 0303 	and.w	r3, r3, #3
 8002476:	2b01      	cmp	r3, #1
 8002478:	d005      	beq.n	8002486 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800247a:	683b      	ldr	r3, [r7, #0]
 800247c:	685b      	ldr	r3, [r3, #4]
 800247e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002482:	2b02      	cmp	r3, #2
 8002484:	d130      	bne.n	80024e8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	689b      	ldr	r3, [r3, #8]
 800248a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800248c:	69fb      	ldr	r3, [r7, #28]
 800248e:	005b      	lsls	r3, r3, #1
 8002490:	2203      	movs	r2, #3
 8002492:	fa02 f303 	lsl.w	r3, r2, r3
 8002496:	43db      	mvns	r3, r3
 8002498:	69ba      	ldr	r2, [r7, #24]
 800249a:	4013      	ands	r3, r2
 800249c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800249e:	683b      	ldr	r3, [r7, #0]
 80024a0:	68da      	ldr	r2, [r3, #12]
 80024a2:	69fb      	ldr	r3, [r7, #28]
 80024a4:	005b      	lsls	r3, r3, #1
 80024a6:	fa02 f303 	lsl.w	r3, r2, r3
 80024aa:	69ba      	ldr	r2, [r7, #24]
 80024ac:	4313      	orrs	r3, r2
 80024ae:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	69ba      	ldr	r2, [r7, #24]
 80024b4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	685b      	ldr	r3, [r3, #4]
 80024ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80024bc:	2201      	movs	r2, #1
 80024be:	69fb      	ldr	r3, [r7, #28]
 80024c0:	fa02 f303 	lsl.w	r3, r2, r3
 80024c4:	43db      	mvns	r3, r3
 80024c6:	69ba      	ldr	r2, [r7, #24]
 80024c8:	4013      	ands	r3, r2
 80024ca:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80024cc:	683b      	ldr	r3, [r7, #0]
 80024ce:	685b      	ldr	r3, [r3, #4]
 80024d0:	091b      	lsrs	r3, r3, #4
 80024d2:	f003 0201 	and.w	r2, r3, #1
 80024d6:	69fb      	ldr	r3, [r7, #28]
 80024d8:	fa02 f303 	lsl.w	r3, r2, r3
 80024dc:	69ba      	ldr	r2, [r7, #24]
 80024de:	4313      	orrs	r3, r2
 80024e0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	69ba      	ldr	r2, [r7, #24]
 80024e6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80024e8:	683b      	ldr	r3, [r7, #0]
 80024ea:	685b      	ldr	r3, [r3, #4]
 80024ec:	f003 0303 	and.w	r3, r3, #3
 80024f0:	2b03      	cmp	r3, #3
 80024f2:	d017      	beq.n	8002524 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	68db      	ldr	r3, [r3, #12]
 80024f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80024fa:	69fb      	ldr	r3, [r7, #28]
 80024fc:	005b      	lsls	r3, r3, #1
 80024fe:	2203      	movs	r2, #3
 8002500:	fa02 f303 	lsl.w	r3, r2, r3
 8002504:	43db      	mvns	r3, r3
 8002506:	69ba      	ldr	r2, [r7, #24]
 8002508:	4013      	ands	r3, r2
 800250a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800250c:	683b      	ldr	r3, [r7, #0]
 800250e:	689a      	ldr	r2, [r3, #8]
 8002510:	69fb      	ldr	r3, [r7, #28]
 8002512:	005b      	lsls	r3, r3, #1
 8002514:	fa02 f303 	lsl.w	r3, r2, r3
 8002518:	69ba      	ldr	r2, [r7, #24]
 800251a:	4313      	orrs	r3, r2
 800251c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	69ba      	ldr	r2, [r7, #24]
 8002522:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002524:	683b      	ldr	r3, [r7, #0]
 8002526:	685b      	ldr	r3, [r3, #4]
 8002528:	f003 0303 	and.w	r3, r3, #3
 800252c:	2b02      	cmp	r3, #2
 800252e:	d123      	bne.n	8002578 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002530:	69fb      	ldr	r3, [r7, #28]
 8002532:	08da      	lsrs	r2, r3, #3
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	3208      	adds	r2, #8
 8002538:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800253c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800253e:	69fb      	ldr	r3, [r7, #28]
 8002540:	f003 0307 	and.w	r3, r3, #7
 8002544:	009b      	lsls	r3, r3, #2
 8002546:	220f      	movs	r2, #15
 8002548:	fa02 f303 	lsl.w	r3, r2, r3
 800254c:	43db      	mvns	r3, r3
 800254e:	69ba      	ldr	r2, [r7, #24]
 8002550:	4013      	ands	r3, r2
 8002552:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002554:	683b      	ldr	r3, [r7, #0]
 8002556:	691a      	ldr	r2, [r3, #16]
 8002558:	69fb      	ldr	r3, [r7, #28]
 800255a:	f003 0307 	and.w	r3, r3, #7
 800255e:	009b      	lsls	r3, r3, #2
 8002560:	fa02 f303 	lsl.w	r3, r2, r3
 8002564:	69ba      	ldr	r2, [r7, #24]
 8002566:	4313      	orrs	r3, r2
 8002568:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800256a:	69fb      	ldr	r3, [r7, #28]
 800256c:	08da      	lsrs	r2, r3, #3
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	3208      	adds	r2, #8
 8002572:	69b9      	ldr	r1, [r7, #24]
 8002574:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800257e:	69fb      	ldr	r3, [r7, #28]
 8002580:	005b      	lsls	r3, r3, #1
 8002582:	2203      	movs	r2, #3
 8002584:	fa02 f303 	lsl.w	r3, r2, r3
 8002588:	43db      	mvns	r3, r3
 800258a:	69ba      	ldr	r2, [r7, #24]
 800258c:	4013      	ands	r3, r2
 800258e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002590:	683b      	ldr	r3, [r7, #0]
 8002592:	685b      	ldr	r3, [r3, #4]
 8002594:	f003 0203 	and.w	r2, r3, #3
 8002598:	69fb      	ldr	r3, [r7, #28]
 800259a:	005b      	lsls	r3, r3, #1
 800259c:	fa02 f303 	lsl.w	r3, r2, r3
 80025a0:	69ba      	ldr	r2, [r7, #24]
 80025a2:	4313      	orrs	r3, r2
 80025a4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	69ba      	ldr	r2, [r7, #24]
 80025aa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80025ac:	683b      	ldr	r3, [r7, #0]
 80025ae:	685b      	ldr	r3, [r3, #4]
 80025b0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	f000 80a2 	beq.w	80026fe <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025ba:	2300      	movs	r3, #0
 80025bc:	60fb      	str	r3, [r7, #12]
 80025be:	4b57      	ldr	r3, [pc, #348]	@ (800271c <HAL_GPIO_Init+0x2e8>)
 80025c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025c2:	4a56      	ldr	r2, [pc, #344]	@ (800271c <HAL_GPIO_Init+0x2e8>)
 80025c4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80025c8:	6453      	str	r3, [r2, #68]	@ 0x44
 80025ca:	4b54      	ldr	r3, [pc, #336]	@ (800271c <HAL_GPIO_Init+0x2e8>)
 80025cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80025ce:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80025d2:	60fb      	str	r3, [r7, #12]
 80025d4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80025d6:	4a52      	ldr	r2, [pc, #328]	@ (8002720 <HAL_GPIO_Init+0x2ec>)
 80025d8:	69fb      	ldr	r3, [r7, #28]
 80025da:	089b      	lsrs	r3, r3, #2
 80025dc:	3302      	adds	r3, #2
 80025de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80025e4:	69fb      	ldr	r3, [r7, #28]
 80025e6:	f003 0303 	and.w	r3, r3, #3
 80025ea:	009b      	lsls	r3, r3, #2
 80025ec:	220f      	movs	r2, #15
 80025ee:	fa02 f303 	lsl.w	r3, r2, r3
 80025f2:	43db      	mvns	r3, r3
 80025f4:	69ba      	ldr	r2, [r7, #24]
 80025f6:	4013      	ands	r3, r2
 80025f8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	4a49      	ldr	r2, [pc, #292]	@ (8002724 <HAL_GPIO_Init+0x2f0>)
 80025fe:	4293      	cmp	r3, r2
 8002600:	d019      	beq.n	8002636 <HAL_GPIO_Init+0x202>
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	4a48      	ldr	r2, [pc, #288]	@ (8002728 <HAL_GPIO_Init+0x2f4>)
 8002606:	4293      	cmp	r3, r2
 8002608:	d013      	beq.n	8002632 <HAL_GPIO_Init+0x1fe>
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	4a47      	ldr	r2, [pc, #284]	@ (800272c <HAL_GPIO_Init+0x2f8>)
 800260e:	4293      	cmp	r3, r2
 8002610:	d00d      	beq.n	800262e <HAL_GPIO_Init+0x1fa>
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	4a46      	ldr	r2, [pc, #280]	@ (8002730 <HAL_GPIO_Init+0x2fc>)
 8002616:	4293      	cmp	r3, r2
 8002618:	d007      	beq.n	800262a <HAL_GPIO_Init+0x1f6>
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	4a45      	ldr	r2, [pc, #276]	@ (8002734 <HAL_GPIO_Init+0x300>)
 800261e:	4293      	cmp	r3, r2
 8002620:	d101      	bne.n	8002626 <HAL_GPIO_Init+0x1f2>
 8002622:	2304      	movs	r3, #4
 8002624:	e008      	b.n	8002638 <HAL_GPIO_Init+0x204>
 8002626:	2307      	movs	r3, #7
 8002628:	e006      	b.n	8002638 <HAL_GPIO_Init+0x204>
 800262a:	2303      	movs	r3, #3
 800262c:	e004      	b.n	8002638 <HAL_GPIO_Init+0x204>
 800262e:	2302      	movs	r3, #2
 8002630:	e002      	b.n	8002638 <HAL_GPIO_Init+0x204>
 8002632:	2301      	movs	r3, #1
 8002634:	e000      	b.n	8002638 <HAL_GPIO_Init+0x204>
 8002636:	2300      	movs	r3, #0
 8002638:	69fa      	ldr	r2, [r7, #28]
 800263a:	f002 0203 	and.w	r2, r2, #3
 800263e:	0092      	lsls	r2, r2, #2
 8002640:	4093      	lsls	r3, r2
 8002642:	69ba      	ldr	r2, [r7, #24]
 8002644:	4313      	orrs	r3, r2
 8002646:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002648:	4935      	ldr	r1, [pc, #212]	@ (8002720 <HAL_GPIO_Init+0x2ec>)
 800264a:	69fb      	ldr	r3, [r7, #28]
 800264c:	089b      	lsrs	r3, r3, #2
 800264e:	3302      	adds	r3, #2
 8002650:	69ba      	ldr	r2, [r7, #24]
 8002652:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002656:	4b38      	ldr	r3, [pc, #224]	@ (8002738 <HAL_GPIO_Init+0x304>)
 8002658:	689b      	ldr	r3, [r3, #8]
 800265a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800265c:	693b      	ldr	r3, [r7, #16]
 800265e:	43db      	mvns	r3, r3
 8002660:	69ba      	ldr	r2, [r7, #24]
 8002662:	4013      	ands	r3, r2
 8002664:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002666:	683b      	ldr	r3, [r7, #0]
 8002668:	685b      	ldr	r3, [r3, #4]
 800266a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800266e:	2b00      	cmp	r3, #0
 8002670:	d003      	beq.n	800267a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002672:	69ba      	ldr	r2, [r7, #24]
 8002674:	693b      	ldr	r3, [r7, #16]
 8002676:	4313      	orrs	r3, r2
 8002678:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800267a:	4a2f      	ldr	r2, [pc, #188]	@ (8002738 <HAL_GPIO_Init+0x304>)
 800267c:	69bb      	ldr	r3, [r7, #24]
 800267e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002680:	4b2d      	ldr	r3, [pc, #180]	@ (8002738 <HAL_GPIO_Init+0x304>)
 8002682:	68db      	ldr	r3, [r3, #12]
 8002684:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002686:	693b      	ldr	r3, [r7, #16]
 8002688:	43db      	mvns	r3, r3
 800268a:	69ba      	ldr	r2, [r7, #24]
 800268c:	4013      	ands	r3, r2
 800268e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002690:	683b      	ldr	r3, [r7, #0]
 8002692:	685b      	ldr	r3, [r3, #4]
 8002694:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002698:	2b00      	cmp	r3, #0
 800269a:	d003      	beq.n	80026a4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800269c:	69ba      	ldr	r2, [r7, #24]
 800269e:	693b      	ldr	r3, [r7, #16]
 80026a0:	4313      	orrs	r3, r2
 80026a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80026a4:	4a24      	ldr	r2, [pc, #144]	@ (8002738 <HAL_GPIO_Init+0x304>)
 80026a6:	69bb      	ldr	r3, [r7, #24]
 80026a8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80026aa:	4b23      	ldr	r3, [pc, #140]	@ (8002738 <HAL_GPIO_Init+0x304>)
 80026ac:	685b      	ldr	r3, [r3, #4]
 80026ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026b0:	693b      	ldr	r3, [r7, #16]
 80026b2:	43db      	mvns	r3, r3
 80026b4:	69ba      	ldr	r2, [r7, #24]
 80026b6:	4013      	ands	r3, r2
 80026b8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80026ba:	683b      	ldr	r3, [r7, #0]
 80026bc:	685b      	ldr	r3, [r3, #4]
 80026be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d003      	beq.n	80026ce <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80026c6:	69ba      	ldr	r2, [r7, #24]
 80026c8:	693b      	ldr	r3, [r7, #16]
 80026ca:	4313      	orrs	r3, r2
 80026cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80026ce:	4a1a      	ldr	r2, [pc, #104]	@ (8002738 <HAL_GPIO_Init+0x304>)
 80026d0:	69bb      	ldr	r3, [r7, #24]
 80026d2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80026d4:	4b18      	ldr	r3, [pc, #96]	@ (8002738 <HAL_GPIO_Init+0x304>)
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026da:	693b      	ldr	r3, [r7, #16]
 80026dc:	43db      	mvns	r3, r3
 80026de:	69ba      	ldr	r2, [r7, #24]
 80026e0:	4013      	ands	r3, r2
 80026e2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80026e4:	683b      	ldr	r3, [r7, #0]
 80026e6:	685b      	ldr	r3, [r3, #4]
 80026e8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d003      	beq.n	80026f8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80026f0:	69ba      	ldr	r2, [r7, #24]
 80026f2:	693b      	ldr	r3, [r7, #16]
 80026f4:	4313      	orrs	r3, r2
 80026f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80026f8:	4a0f      	ldr	r2, [pc, #60]	@ (8002738 <HAL_GPIO_Init+0x304>)
 80026fa:	69bb      	ldr	r3, [r7, #24]
 80026fc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80026fe:	69fb      	ldr	r3, [r7, #28]
 8002700:	3301      	adds	r3, #1
 8002702:	61fb      	str	r3, [r7, #28]
 8002704:	69fb      	ldr	r3, [r7, #28]
 8002706:	2b0f      	cmp	r3, #15
 8002708:	f67f aea2 	bls.w	8002450 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800270c:	bf00      	nop
 800270e:	bf00      	nop
 8002710:	3724      	adds	r7, #36	@ 0x24
 8002712:	46bd      	mov	sp, r7
 8002714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002718:	4770      	bx	lr
 800271a:	bf00      	nop
 800271c:	40023800 	.word	0x40023800
 8002720:	40013800 	.word	0x40013800
 8002724:	40020000 	.word	0x40020000
 8002728:	40020400 	.word	0x40020400
 800272c:	40020800 	.word	0x40020800
 8002730:	40020c00 	.word	0x40020c00
 8002734:	40021000 	.word	0x40021000
 8002738:	40013c00 	.word	0x40013c00

0800273c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800273c:	b480      	push	{r7}
 800273e:	b083      	sub	sp, #12
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
 8002744:	460b      	mov	r3, r1
 8002746:	807b      	strh	r3, [r7, #2]
 8002748:	4613      	mov	r3, r2
 800274a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800274c:	787b      	ldrb	r3, [r7, #1]
 800274e:	2b00      	cmp	r3, #0
 8002750:	d003      	beq.n	800275a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002752:	887a      	ldrh	r2, [r7, #2]
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002758:	e003      	b.n	8002762 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800275a:	887b      	ldrh	r3, [r7, #2]
 800275c:	041a      	lsls	r2, r3, #16
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	619a      	str	r2, [r3, #24]
}
 8002762:	bf00      	nop
 8002764:	370c      	adds	r7, #12
 8002766:	46bd      	mov	sp, r7
 8002768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276c:	4770      	bx	lr
	...

08002770 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	b086      	sub	sp, #24
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	2b00      	cmp	r3, #0
 800277c:	d101      	bne.n	8002782 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800277e:	2301      	movs	r3, #1
 8002780:	e267      	b.n	8002c52 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f003 0301 	and.w	r3, r3, #1
 800278a:	2b00      	cmp	r3, #0
 800278c:	d075      	beq.n	800287a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800278e:	4b88      	ldr	r3, [pc, #544]	@ (80029b0 <HAL_RCC_OscConfig+0x240>)
 8002790:	689b      	ldr	r3, [r3, #8]
 8002792:	f003 030c 	and.w	r3, r3, #12
 8002796:	2b04      	cmp	r3, #4
 8002798:	d00c      	beq.n	80027b4 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800279a:	4b85      	ldr	r3, [pc, #532]	@ (80029b0 <HAL_RCC_OscConfig+0x240>)
 800279c:	689b      	ldr	r3, [r3, #8]
 800279e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80027a2:	2b08      	cmp	r3, #8
 80027a4:	d112      	bne.n	80027cc <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80027a6:	4b82      	ldr	r3, [pc, #520]	@ (80029b0 <HAL_RCC_OscConfig+0x240>)
 80027a8:	685b      	ldr	r3, [r3, #4]
 80027aa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80027ae:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80027b2:	d10b      	bne.n	80027cc <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027b4:	4b7e      	ldr	r3, [pc, #504]	@ (80029b0 <HAL_RCC_OscConfig+0x240>)
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d05b      	beq.n	8002878 <HAL_RCC_OscConfig+0x108>
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	685b      	ldr	r3, [r3, #4]
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d157      	bne.n	8002878 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80027c8:	2301      	movs	r3, #1
 80027ca:	e242      	b.n	8002c52 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	685b      	ldr	r3, [r3, #4]
 80027d0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80027d4:	d106      	bne.n	80027e4 <HAL_RCC_OscConfig+0x74>
 80027d6:	4b76      	ldr	r3, [pc, #472]	@ (80029b0 <HAL_RCC_OscConfig+0x240>)
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	4a75      	ldr	r2, [pc, #468]	@ (80029b0 <HAL_RCC_OscConfig+0x240>)
 80027dc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80027e0:	6013      	str	r3, [r2, #0]
 80027e2:	e01d      	b.n	8002820 <HAL_RCC_OscConfig+0xb0>
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	685b      	ldr	r3, [r3, #4]
 80027e8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80027ec:	d10c      	bne.n	8002808 <HAL_RCC_OscConfig+0x98>
 80027ee:	4b70      	ldr	r3, [pc, #448]	@ (80029b0 <HAL_RCC_OscConfig+0x240>)
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	4a6f      	ldr	r2, [pc, #444]	@ (80029b0 <HAL_RCC_OscConfig+0x240>)
 80027f4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80027f8:	6013      	str	r3, [r2, #0]
 80027fa:	4b6d      	ldr	r3, [pc, #436]	@ (80029b0 <HAL_RCC_OscConfig+0x240>)
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	4a6c      	ldr	r2, [pc, #432]	@ (80029b0 <HAL_RCC_OscConfig+0x240>)
 8002800:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002804:	6013      	str	r3, [r2, #0]
 8002806:	e00b      	b.n	8002820 <HAL_RCC_OscConfig+0xb0>
 8002808:	4b69      	ldr	r3, [pc, #420]	@ (80029b0 <HAL_RCC_OscConfig+0x240>)
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	4a68      	ldr	r2, [pc, #416]	@ (80029b0 <HAL_RCC_OscConfig+0x240>)
 800280e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002812:	6013      	str	r3, [r2, #0]
 8002814:	4b66      	ldr	r3, [pc, #408]	@ (80029b0 <HAL_RCC_OscConfig+0x240>)
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	4a65      	ldr	r2, [pc, #404]	@ (80029b0 <HAL_RCC_OscConfig+0x240>)
 800281a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800281e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	685b      	ldr	r3, [r3, #4]
 8002824:	2b00      	cmp	r3, #0
 8002826:	d013      	beq.n	8002850 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002828:	f7ff fcc2 	bl	80021b0 <HAL_GetTick>
 800282c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800282e:	e008      	b.n	8002842 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002830:	f7ff fcbe 	bl	80021b0 <HAL_GetTick>
 8002834:	4602      	mov	r2, r0
 8002836:	693b      	ldr	r3, [r7, #16]
 8002838:	1ad3      	subs	r3, r2, r3
 800283a:	2b64      	cmp	r3, #100	@ 0x64
 800283c:	d901      	bls.n	8002842 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800283e:	2303      	movs	r3, #3
 8002840:	e207      	b.n	8002c52 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002842:	4b5b      	ldr	r3, [pc, #364]	@ (80029b0 <HAL_RCC_OscConfig+0x240>)
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800284a:	2b00      	cmp	r3, #0
 800284c:	d0f0      	beq.n	8002830 <HAL_RCC_OscConfig+0xc0>
 800284e:	e014      	b.n	800287a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002850:	f7ff fcae 	bl	80021b0 <HAL_GetTick>
 8002854:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002856:	e008      	b.n	800286a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002858:	f7ff fcaa 	bl	80021b0 <HAL_GetTick>
 800285c:	4602      	mov	r2, r0
 800285e:	693b      	ldr	r3, [r7, #16]
 8002860:	1ad3      	subs	r3, r2, r3
 8002862:	2b64      	cmp	r3, #100	@ 0x64
 8002864:	d901      	bls.n	800286a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002866:	2303      	movs	r3, #3
 8002868:	e1f3      	b.n	8002c52 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800286a:	4b51      	ldr	r3, [pc, #324]	@ (80029b0 <HAL_RCC_OscConfig+0x240>)
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002872:	2b00      	cmp	r3, #0
 8002874:	d1f0      	bne.n	8002858 <HAL_RCC_OscConfig+0xe8>
 8002876:	e000      	b.n	800287a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002878:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f003 0302 	and.w	r3, r3, #2
 8002882:	2b00      	cmp	r3, #0
 8002884:	d063      	beq.n	800294e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002886:	4b4a      	ldr	r3, [pc, #296]	@ (80029b0 <HAL_RCC_OscConfig+0x240>)
 8002888:	689b      	ldr	r3, [r3, #8]
 800288a:	f003 030c 	and.w	r3, r3, #12
 800288e:	2b00      	cmp	r3, #0
 8002890:	d00b      	beq.n	80028aa <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002892:	4b47      	ldr	r3, [pc, #284]	@ (80029b0 <HAL_RCC_OscConfig+0x240>)
 8002894:	689b      	ldr	r3, [r3, #8]
 8002896:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800289a:	2b08      	cmp	r3, #8
 800289c:	d11c      	bne.n	80028d8 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800289e:	4b44      	ldr	r3, [pc, #272]	@ (80029b0 <HAL_RCC_OscConfig+0x240>)
 80028a0:	685b      	ldr	r3, [r3, #4]
 80028a2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d116      	bne.n	80028d8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80028aa:	4b41      	ldr	r3, [pc, #260]	@ (80029b0 <HAL_RCC_OscConfig+0x240>)
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f003 0302 	and.w	r3, r3, #2
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d005      	beq.n	80028c2 <HAL_RCC_OscConfig+0x152>
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	68db      	ldr	r3, [r3, #12]
 80028ba:	2b01      	cmp	r3, #1
 80028bc:	d001      	beq.n	80028c2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80028be:	2301      	movs	r3, #1
 80028c0:	e1c7      	b.n	8002c52 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028c2:	4b3b      	ldr	r3, [pc, #236]	@ (80029b0 <HAL_RCC_OscConfig+0x240>)
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	691b      	ldr	r3, [r3, #16]
 80028ce:	00db      	lsls	r3, r3, #3
 80028d0:	4937      	ldr	r1, [pc, #220]	@ (80029b0 <HAL_RCC_OscConfig+0x240>)
 80028d2:	4313      	orrs	r3, r2
 80028d4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80028d6:	e03a      	b.n	800294e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	68db      	ldr	r3, [r3, #12]
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d020      	beq.n	8002922 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80028e0:	4b34      	ldr	r3, [pc, #208]	@ (80029b4 <HAL_RCC_OscConfig+0x244>)
 80028e2:	2201      	movs	r2, #1
 80028e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028e6:	f7ff fc63 	bl	80021b0 <HAL_GetTick>
 80028ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028ec:	e008      	b.n	8002900 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80028ee:	f7ff fc5f 	bl	80021b0 <HAL_GetTick>
 80028f2:	4602      	mov	r2, r0
 80028f4:	693b      	ldr	r3, [r7, #16]
 80028f6:	1ad3      	subs	r3, r2, r3
 80028f8:	2b02      	cmp	r3, #2
 80028fa:	d901      	bls.n	8002900 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80028fc:	2303      	movs	r3, #3
 80028fe:	e1a8      	b.n	8002c52 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002900:	4b2b      	ldr	r3, [pc, #172]	@ (80029b0 <HAL_RCC_OscConfig+0x240>)
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f003 0302 	and.w	r3, r3, #2
 8002908:	2b00      	cmp	r3, #0
 800290a:	d0f0      	beq.n	80028ee <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800290c:	4b28      	ldr	r3, [pc, #160]	@ (80029b0 <HAL_RCC_OscConfig+0x240>)
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	691b      	ldr	r3, [r3, #16]
 8002918:	00db      	lsls	r3, r3, #3
 800291a:	4925      	ldr	r1, [pc, #148]	@ (80029b0 <HAL_RCC_OscConfig+0x240>)
 800291c:	4313      	orrs	r3, r2
 800291e:	600b      	str	r3, [r1, #0]
 8002920:	e015      	b.n	800294e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002922:	4b24      	ldr	r3, [pc, #144]	@ (80029b4 <HAL_RCC_OscConfig+0x244>)
 8002924:	2200      	movs	r2, #0
 8002926:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002928:	f7ff fc42 	bl	80021b0 <HAL_GetTick>
 800292c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800292e:	e008      	b.n	8002942 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002930:	f7ff fc3e 	bl	80021b0 <HAL_GetTick>
 8002934:	4602      	mov	r2, r0
 8002936:	693b      	ldr	r3, [r7, #16]
 8002938:	1ad3      	subs	r3, r2, r3
 800293a:	2b02      	cmp	r3, #2
 800293c:	d901      	bls.n	8002942 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800293e:	2303      	movs	r3, #3
 8002940:	e187      	b.n	8002c52 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002942:	4b1b      	ldr	r3, [pc, #108]	@ (80029b0 <HAL_RCC_OscConfig+0x240>)
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f003 0302 	and.w	r3, r3, #2
 800294a:	2b00      	cmp	r3, #0
 800294c:	d1f0      	bne.n	8002930 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f003 0308 	and.w	r3, r3, #8
 8002956:	2b00      	cmp	r3, #0
 8002958:	d036      	beq.n	80029c8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	695b      	ldr	r3, [r3, #20]
 800295e:	2b00      	cmp	r3, #0
 8002960:	d016      	beq.n	8002990 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002962:	4b15      	ldr	r3, [pc, #84]	@ (80029b8 <HAL_RCC_OscConfig+0x248>)
 8002964:	2201      	movs	r2, #1
 8002966:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002968:	f7ff fc22 	bl	80021b0 <HAL_GetTick>
 800296c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800296e:	e008      	b.n	8002982 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002970:	f7ff fc1e 	bl	80021b0 <HAL_GetTick>
 8002974:	4602      	mov	r2, r0
 8002976:	693b      	ldr	r3, [r7, #16]
 8002978:	1ad3      	subs	r3, r2, r3
 800297a:	2b02      	cmp	r3, #2
 800297c:	d901      	bls.n	8002982 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800297e:	2303      	movs	r3, #3
 8002980:	e167      	b.n	8002c52 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002982:	4b0b      	ldr	r3, [pc, #44]	@ (80029b0 <HAL_RCC_OscConfig+0x240>)
 8002984:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002986:	f003 0302 	and.w	r3, r3, #2
 800298a:	2b00      	cmp	r3, #0
 800298c:	d0f0      	beq.n	8002970 <HAL_RCC_OscConfig+0x200>
 800298e:	e01b      	b.n	80029c8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002990:	4b09      	ldr	r3, [pc, #36]	@ (80029b8 <HAL_RCC_OscConfig+0x248>)
 8002992:	2200      	movs	r2, #0
 8002994:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002996:	f7ff fc0b 	bl	80021b0 <HAL_GetTick>
 800299a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800299c:	e00e      	b.n	80029bc <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800299e:	f7ff fc07 	bl	80021b0 <HAL_GetTick>
 80029a2:	4602      	mov	r2, r0
 80029a4:	693b      	ldr	r3, [r7, #16]
 80029a6:	1ad3      	subs	r3, r2, r3
 80029a8:	2b02      	cmp	r3, #2
 80029aa:	d907      	bls.n	80029bc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80029ac:	2303      	movs	r3, #3
 80029ae:	e150      	b.n	8002c52 <HAL_RCC_OscConfig+0x4e2>
 80029b0:	40023800 	.word	0x40023800
 80029b4:	42470000 	.word	0x42470000
 80029b8:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80029bc:	4b88      	ldr	r3, [pc, #544]	@ (8002be0 <HAL_RCC_OscConfig+0x470>)
 80029be:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80029c0:	f003 0302 	and.w	r3, r3, #2
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d1ea      	bne.n	800299e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f003 0304 	and.w	r3, r3, #4
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	f000 8097 	beq.w	8002b04 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80029d6:	2300      	movs	r3, #0
 80029d8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80029da:	4b81      	ldr	r3, [pc, #516]	@ (8002be0 <HAL_RCC_OscConfig+0x470>)
 80029dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d10f      	bne.n	8002a06 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80029e6:	2300      	movs	r3, #0
 80029e8:	60bb      	str	r3, [r7, #8]
 80029ea:	4b7d      	ldr	r3, [pc, #500]	@ (8002be0 <HAL_RCC_OscConfig+0x470>)
 80029ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029ee:	4a7c      	ldr	r2, [pc, #496]	@ (8002be0 <HAL_RCC_OscConfig+0x470>)
 80029f0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80029f4:	6413      	str	r3, [r2, #64]	@ 0x40
 80029f6:	4b7a      	ldr	r3, [pc, #488]	@ (8002be0 <HAL_RCC_OscConfig+0x470>)
 80029f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80029fe:	60bb      	str	r3, [r7, #8]
 8002a00:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a02:	2301      	movs	r3, #1
 8002a04:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a06:	4b77      	ldr	r3, [pc, #476]	@ (8002be4 <HAL_RCC_OscConfig+0x474>)
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d118      	bne.n	8002a44 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002a12:	4b74      	ldr	r3, [pc, #464]	@ (8002be4 <HAL_RCC_OscConfig+0x474>)
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	4a73      	ldr	r2, [pc, #460]	@ (8002be4 <HAL_RCC_OscConfig+0x474>)
 8002a18:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002a1c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a1e:	f7ff fbc7 	bl	80021b0 <HAL_GetTick>
 8002a22:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a24:	e008      	b.n	8002a38 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a26:	f7ff fbc3 	bl	80021b0 <HAL_GetTick>
 8002a2a:	4602      	mov	r2, r0
 8002a2c:	693b      	ldr	r3, [r7, #16]
 8002a2e:	1ad3      	subs	r3, r2, r3
 8002a30:	2b02      	cmp	r3, #2
 8002a32:	d901      	bls.n	8002a38 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002a34:	2303      	movs	r3, #3
 8002a36:	e10c      	b.n	8002c52 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a38:	4b6a      	ldr	r3, [pc, #424]	@ (8002be4 <HAL_RCC_OscConfig+0x474>)
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d0f0      	beq.n	8002a26 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	689b      	ldr	r3, [r3, #8]
 8002a48:	2b01      	cmp	r3, #1
 8002a4a:	d106      	bne.n	8002a5a <HAL_RCC_OscConfig+0x2ea>
 8002a4c:	4b64      	ldr	r3, [pc, #400]	@ (8002be0 <HAL_RCC_OscConfig+0x470>)
 8002a4e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a50:	4a63      	ldr	r2, [pc, #396]	@ (8002be0 <HAL_RCC_OscConfig+0x470>)
 8002a52:	f043 0301 	orr.w	r3, r3, #1
 8002a56:	6713      	str	r3, [r2, #112]	@ 0x70
 8002a58:	e01c      	b.n	8002a94 <HAL_RCC_OscConfig+0x324>
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	689b      	ldr	r3, [r3, #8]
 8002a5e:	2b05      	cmp	r3, #5
 8002a60:	d10c      	bne.n	8002a7c <HAL_RCC_OscConfig+0x30c>
 8002a62:	4b5f      	ldr	r3, [pc, #380]	@ (8002be0 <HAL_RCC_OscConfig+0x470>)
 8002a64:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a66:	4a5e      	ldr	r2, [pc, #376]	@ (8002be0 <HAL_RCC_OscConfig+0x470>)
 8002a68:	f043 0304 	orr.w	r3, r3, #4
 8002a6c:	6713      	str	r3, [r2, #112]	@ 0x70
 8002a6e:	4b5c      	ldr	r3, [pc, #368]	@ (8002be0 <HAL_RCC_OscConfig+0x470>)
 8002a70:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a72:	4a5b      	ldr	r2, [pc, #364]	@ (8002be0 <HAL_RCC_OscConfig+0x470>)
 8002a74:	f043 0301 	orr.w	r3, r3, #1
 8002a78:	6713      	str	r3, [r2, #112]	@ 0x70
 8002a7a:	e00b      	b.n	8002a94 <HAL_RCC_OscConfig+0x324>
 8002a7c:	4b58      	ldr	r3, [pc, #352]	@ (8002be0 <HAL_RCC_OscConfig+0x470>)
 8002a7e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a80:	4a57      	ldr	r2, [pc, #348]	@ (8002be0 <HAL_RCC_OscConfig+0x470>)
 8002a82:	f023 0301 	bic.w	r3, r3, #1
 8002a86:	6713      	str	r3, [r2, #112]	@ 0x70
 8002a88:	4b55      	ldr	r3, [pc, #340]	@ (8002be0 <HAL_RCC_OscConfig+0x470>)
 8002a8a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a8c:	4a54      	ldr	r2, [pc, #336]	@ (8002be0 <HAL_RCC_OscConfig+0x470>)
 8002a8e:	f023 0304 	bic.w	r3, r3, #4
 8002a92:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	689b      	ldr	r3, [r3, #8]
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d015      	beq.n	8002ac8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a9c:	f7ff fb88 	bl	80021b0 <HAL_GetTick>
 8002aa0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002aa2:	e00a      	b.n	8002aba <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002aa4:	f7ff fb84 	bl	80021b0 <HAL_GetTick>
 8002aa8:	4602      	mov	r2, r0
 8002aaa:	693b      	ldr	r3, [r7, #16]
 8002aac:	1ad3      	subs	r3, r2, r3
 8002aae:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ab2:	4293      	cmp	r3, r2
 8002ab4:	d901      	bls.n	8002aba <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002ab6:	2303      	movs	r3, #3
 8002ab8:	e0cb      	b.n	8002c52 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002aba:	4b49      	ldr	r3, [pc, #292]	@ (8002be0 <HAL_RCC_OscConfig+0x470>)
 8002abc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002abe:	f003 0302 	and.w	r3, r3, #2
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d0ee      	beq.n	8002aa4 <HAL_RCC_OscConfig+0x334>
 8002ac6:	e014      	b.n	8002af2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ac8:	f7ff fb72 	bl	80021b0 <HAL_GetTick>
 8002acc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ace:	e00a      	b.n	8002ae6 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ad0:	f7ff fb6e 	bl	80021b0 <HAL_GetTick>
 8002ad4:	4602      	mov	r2, r0
 8002ad6:	693b      	ldr	r3, [r7, #16]
 8002ad8:	1ad3      	subs	r3, r2, r3
 8002ada:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002ade:	4293      	cmp	r3, r2
 8002ae0:	d901      	bls.n	8002ae6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002ae2:	2303      	movs	r3, #3
 8002ae4:	e0b5      	b.n	8002c52 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ae6:	4b3e      	ldr	r3, [pc, #248]	@ (8002be0 <HAL_RCC_OscConfig+0x470>)
 8002ae8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002aea:	f003 0302 	and.w	r3, r3, #2
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d1ee      	bne.n	8002ad0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002af2:	7dfb      	ldrb	r3, [r7, #23]
 8002af4:	2b01      	cmp	r3, #1
 8002af6:	d105      	bne.n	8002b04 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002af8:	4b39      	ldr	r3, [pc, #228]	@ (8002be0 <HAL_RCC_OscConfig+0x470>)
 8002afa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002afc:	4a38      	ldr	r2, [pc, #224]	@ (8002be0 <HAL_RCC_OscConfig+0x470>)
 8002afe:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002b02:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	699b      	ldr	r3, [r3, #24]
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	f000 80a1 	beq.w	8002c50 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002b0e:	4b34      	ldr	r3, [pc, #208]	@ (8002be0 <HAL_RCC_OscConfig+0x470>)
 8002b10:	689b      	ldr	r3, [r3, #8]
 8002b12:	f003 030c 	and.w	r3, r3, #12
 8002b16:	2b08      	cmp	r3, #8
 8002b18:	d05c      	beq.n	8002bd4 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	699b      	ldr	r3, [r3, #24]
 8002b1e:	2b02      	cmp	r3, #2
 8002b20:	d141      	bne.n	8002ba6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b22:	4b31      	ldr	r3, [pc, #196]	@ (8002be8 <HAL_RCC_OscConfig+0x478>)
 8002b24:	2200      	movs	r2, #0
 8002b26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b28:	f7ff fb42 	bl	80021b0 <HAL_GetTick>
 8002b2c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b2e:	e008      	b.n	8002b42 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b30:	f7ff fb3e 	bl	80021b0 <HAL_GetTick>
 8002b34:	4602      	mov	r2, r0
 8002b36:	693b      	ldr	r3, [r7, #16]
 8002b38:	1ad3      	subs	r3, r2, r3
 8002b3a:	2b02      	cmp	r3, #2
 8002b3c:	d901      	bls.n	8002b42 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002b3e:	2303      	movs	r3, #3
 8002b40:	e087      	b.n	8002c52 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b42:	4b27      	ldr	r3, [pc, #156]	@ (8002be0 <HAL_RCC_OscConfig+0x470>)
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d1f0      	bne.n	8002b30 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	69da      	ldr	r2, [r3, #28]
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	6a1b      	ldr	r3, [r3, #32]
 8002b56:	431a      	orrs	r2, r3
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b5c:	019b      	lsls	r3, r3, #6
 8002b5e:	431a      	orrs	r2, r3
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b64:	085b      	lsrs	r3, r3, #1
 8002b66:	3b01      	subs	r3, #1
 8002b68:	041b      	lsls	r3, r3, #16
 8002b6a:	431a      	orrs	r2, r3
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b70:	061b      	lsls	r3, r3, #24
 8002b72:	491b      	ldr	r1, [pc, #108]	@ (8002be0 <HAL_RCC_OscConfig+0x470>)
 8002b74:	4313      	orrs	r3, r2
 8002b76:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002b78:	4b1b      	ldr	r3, [pc, #108]	@ (8002be8 <HAL_RCC_OscConfig+0x478>)
 8002b7a:	2201      	movs	r2, #1
 8002b7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b7e:	f7ff fb17 	bl	80021b0 <HAL_GetTick>
 8002b82:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b84:	e008      	b.n	8002b98 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b86:	f7ff fb13 	bl	80021b0 <HAL_GetTick>
 8002b8a:	4602      	mov	r2, r0
 8002b8c:	693b      	ldr	r3, [r7, #16]
 8002b8e:	1ad3      	subs	r3, r2, r3
 8002b90:	2b02      	cmp	r3, #2
 8002b92:	d901      	bls.n	8002b98 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002b94:	2303      	movs	r3, #3
 8002b96:	e05c      	b.n	8002c52 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b98:	4b11      	ldr	r3, [pc, #68]	@ (8002be0 <HAL_RCC_OscConfig+0x470>)
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d0f0      	beq.n	8002b86 <HAL_RCC_OscConfig+0x416>
 8002ba4:	e054      	b.n	8002c50 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ba6:	4b10      	ldr	r3, [pc, #64]	@ (8002be8 <HAL_RCC_OscConfig+0x478>)
 8002ba8:	2200      	movs	r2, #0
 8002baa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bac:	f7ff fb00 	bl	80021b0 <HAL_GetTick>
 8002bb0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002bb2:	e008      	b.n	8002bc6 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002bb4:	f7ff fafc 	bl	80021b0 <HAL_GetTick>
 8002bb8:	4602      	mov	r2, r0
 8002bba:	693b      	ldr	r3, [r7, #16]
 8002bbc:	1ad3      	subs	r3, r2, r3
 8002bbe:	2b02      	cmp	r3, #2
 8002bc0:	d901      	bls.n	8002bc6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002bc2:	2303      	movs	r3, #3
 8002bc4:	e045      	b.n	8002c52 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002bc6:	4b06      	ldr	r3, [pc, #24]	@ (8002be0 <HAL_RCC_OscConfig+0x470>)
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d1f0      	bne.n	8002bb4 <HAL_RCC_OscConfig+0x444>
 8002bd2:	e03d      	b.n	8002c50 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	699b      	ldr	r3, [r3, #24]
 8002bd8:	2b01      	cmp	r3, #1
 8002bda:	d107      	bne.n	8002bec <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002bdc:	2301      	movs	r3, #1
 8002bde:	e038      	b.n	8002c52 <HAL_RCC_OscConfig+0x4e2>
 8002be0:	40023800 	.word	0x40023800
 8002be4:	40007000 	.word	0x40007000
 8002be8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002bec:	4b1b      	ldr	r3, [pc, #108]	@ (8002c5c <HAL_RCC_OscConfig+0x4ec>)
 8002bee:	685b      	ldr	r3, [r3, #4]
 8002bf0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	699b      	ldr	r3, [r3, #24]
 8002bf6:	2b01      	cmp	r3, #1
 8002bf8:	d028      	beq.n	8002c4c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002c04:	429a      	cmp	r2, r3
 8002c06:	d121      	bne.n	8002c4c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c12:	429a      	cmp	r2, r3
 8002c14:	d11a      	bne.n	8002c4c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002c16:	68fa      	ldr	r2, [r7, #12]
 8002c18:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002c1c:	4013      	ands	r3, r2
 8002c1e:	687a      	ldr	r2, [r7, #4]
 8002c20:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002c22:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002c24:	4293      	cmp	r3, r2
 8002c26:	d111      	bne.n	8002c4c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c32:	085b      	lsrs	r3, r3, #1
 8002c34:	3b01      	subs	r3, #1
 8002c36:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002c38:	429a      	cmp	r2, r3
 8002c3a:	d107      	bne.n	8002c4c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c46:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002c48:	429a      	cmp	r2, r3
 8002c4a:	d001      	beq.n	8002c50 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002c4c:	2301      	movs	r3, #1
 8002c4e:	e000      	b.n	8002c52 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002c50:	2300      	movs	r3, #0
}
 8002c52:	4618      	mov	r0, r3
 8002c54:	3718      	adds	r7, #24
 8002c56:	46bd      	mov	sp, r7
 8002c58:	bd80      	pop	{r7, pc}
 8002c5a:	bf00      	nop
 8002c5c:	40023800 	.word	0x40023800

08002c60 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	b084      	sub	sp, #16
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
 8002c68:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d101      	bne.n	8002c74 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002c70:	2301      	movs	r3, #1
 8002c72:	e0cc      	b.n	8002e0e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002c74:	4b68      	ldr	r3, [pc, #416]	@ (8002e18 <HAL_RCC_ClockConfig+0x1b8>)
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f003 0307 	and.w	r3, r3, #7
 8002c7c:	683a      	ldr	r2, [r7, #0]
 8002c7e:	429a      	cmp	r2, r3
 8002c80:	d90c      	bls.n	8002c9c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c82:	4b65      	ldr	r3, [pc, #404]	@ (8002e18 <HAL_RCC_ClockConfig+0x1b8>)
 8002c84:	683a      	ldr	r2, [r7, #0]
 8002c86:	b2d2      	uxtb	r2, r2
 8002c88:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c8a:	4b63      	ldr	r3, [pc, #396]	@ (8002e18 <HAL_RCC_ClockConfig+0x1b8>)
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f003 0307 	and.w	r3, r3, #7
 8002c92:	683a      	ldr	r2, [r7, #0]
 8002c94:	429a      	cmp	r2, r3
 8002c96:	d001      	beq.n	8002c9c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002c98:	2301      	movs	r3, #1
 8002c9a:	e0b8      	b.n	8002e0e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f003 0302 	and.w	r3, r3, #2
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d020      	beq.n	8002cea <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f003 0304 	and.w	r3, r3, #4
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d005      	beq.n	8002cc0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002cb4:	4b59      	ldr	r3, [pc, #356]	@ (8002e1c <HAL_RCC_ClockConfig+0x1bc>)
 8002cb6:	689b      	ldr	r3, [r3, #8]
 8002cb8:	4a58      	ldr	r2, [pc, #352]	@ (8002e1c <HAL_RCC_ClockConfig+0x1bc>)
 8002cba:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002cbe:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f003 0308 	and.w	r3, r3, #8
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d005      	beq.n	8002cd8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002ccc:	4b53      	ldr	r3, [pc, #332]	@ (8002e1c <HAL_RCC_ClockConfig+0x1bc>)
 8002cce:	689b      	ldr	r3, [r3, #8]
 8002cd0:	4a52      	ldr	r2, [pc, #328]	@ (8002e1c <HAL_RCC_ClockConfig+0x1bc>)
 8002cd2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002cd6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002cd8:	4b50      	ldr	r3, [pc, #320]	@ (8002e1c <HAL_RCC_ClockConfig+0x1bc>)
 8002cda:	689b      	ldr	r3, [r3, #8]
 8002cdc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	689b      	ldr	r3, [r3, #8]
 8002ce4:	494d      	ldr	r1, [pc, #308]	@ (8002e1c <HAL_RCC_ClockConfig+0x1bc>)
 8002ce6:	4313      	orrs	r3, r2
 8002ce8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f003 0301 	and.w	r3, r3, #1
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d044      	beq.n	8002d80 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	685b      	ldr	r3, [r3, #4]
 8002cfa:	2b01      	cmp	r3, #1
 8002cfc:	d107      	bne.n	8002d0e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cfe:	4b47      	ldr	r3, [pc, #284]	@ (8002e1c <HAL_RCC_ClockConfig+0x1bc>)
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d119      	bne.n	8002d3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d0a:	2301      	movs	r3, #1
 8002d0c:	e07f      	b.n	8002e0e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	685b      	ldr	r3, [r3, #4]
 8002d12:	2b02      	cmp	r3, #2
 8002d14:	d003      	beq.n	8002d1e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002d1a:	2b03      	cmp	r3, #3
 8002d1c:	d107      	bne.n	8002d2e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d1e:	4b3f      	ldr	r3, [pc, #252]	@ (8002e1c <HAL_RCC_ClockConfig+0x1bc>)
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d109      	bne.n	8002d3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d2a:	2301      	movs	r3, #1
 8002d2c:	e06f      	b.n	8002e0e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d2e:	4b3b      	ldr	r3, [pc, #236]	@ (8002e1c <HAL_RCC_ClockConfig+0x1bc>)
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f003 0302 	and.w	r3, r3, #2
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d101      	bne.n	8002d3e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d3a:	2301      	movs	r3, #1
 8002d3c:	e067      	b.n	8002e0e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002d3e:	4b37      	ldr	r3, [pc, #220]	@ (8002e1c <HAL_RCC_ClockConfig+0x1bc>)
 8002d40:	689b      	ldr	r3, [r3, #8]
 8002d42:	f023 0203 	bic.w	r2, r3, #3
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	685b      	ldr	r3, [r3, #4]
 8002d4a:	4934      	ldr	r1, [pc, #208]	@ (8002e1c <HAL_RCC_ClockConfig+0x1bc>)
 8002d4c:	4313      	orrs	r3, r2
 8002d4e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002d50:	f7ff fa2e 	bl	80021b0 <HAL_GetTick>
 8002d54:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d56:	e00a      	b.n	8002d6e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d58:	f7ff fa2a 	bl	80021b0 <HAL_GetTick>
 8002d5c:	4602      	mov	r2, r0
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	1ad3      	subs	r3, r2, r3
 8002d62:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d66:	4293      	cmp	r3, r2
 8002d68:	d901      	bls.n	8002d6e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002d6a:	2303      	movs	r3, #3
 8002d6c:	e04f      	b.n	8002e0e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d6e:	4b2b      	ldr	r3, [pc, #172]	@ (8002e1c <HAL_RCC_ClockConfig+0x1bc>)
 8002d70:	689b      	ldr	r3, [r3, #8]
 8002d72:	f003 020c 	and.w	r2, r3, #12
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	685b      	ldr	r3, [r3, #4]
 8002d7a:	009b      	lsls	r3, r3, #2
 8002d7c:	429a      	cmp	r2, r3
 8002d7e:	d1eb      	bne.n	8002d58 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002d80:	4b25      	ldr	r3, [pc, #148]	@ (8002e18 <HAL_RCC_ClockConfig+0x1b8>)
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f003 0307 	and.w	r3, r3, #7
 8002d88:	683a      	ldr	r2, [r7, #0]
 8002d8a:	429a      	cmp	r2, r3
 8002d8c:	d20c      	bcs.n	8002da8 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d8e:	4b22      	ldr	r3, [pc, #136]	@ (8002e18 <HAL_RCC_ClockConfig+0x1b8>)
 8002d90:	683a      	ldr	r2, [r7, #0]
 8002d92:	b2d2      	uxtb	r2, r2
 8002d94:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d96:	4b20      	ldr	r3, [pc, #128]	@ (8002e18 <HAL_RCC_ClockConfig+0x1b8>)
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f003 0307 	and.w	r3, r3, #7
 8002d9e:	683a      	ldr	r2, [r7, #0]
 8002da0:	429a      	cmp	r2, r3
 8002da2:	d001      	beq.n	8002da8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002da4:	2301      	movs	r3, #1
 8002da6:	e032      	b.n	8002e0e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f003 0304 	and.w	r3, r3, #4
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d008      	beq.n	8002dc6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002db4:	4b19      	ldr	r3, [pc, #100]	@ (8002e1c <HAL_RCC_ClockConfig+0x1bc>)
 8002db6:	689b      	ldr	r3, [r3, #8]
 8002db8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	68db      	ldr	r3, [r3, #12]
 8002dc0:	4916      	ldr	r1, [pc, #88]	@ (8002e1c <HAL_RCC_ClockConfig+0x1bc>)
 8002dc2:	4313      	orrs	r3, r2
 8002dc4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f003 0308 	and.w	r3, r3, #8
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d009      	beq.n	8002de6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002dd2:	4b12      	ldr	r3, [pc, #72]	@ (8002e1c <HAL_RCC_ClockConfig+0x1bc>)
 8002dd4:	689b      	ldr	r3, [r3, #8]
 8002dd6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	691b      	ldr	r3, [r3, #16]
 8002dde:	00db      	lsls	r3, r3, #3
 8002de0:	490e      	ldr	r1, [pc, #56]	@ (8002e1c <HAL_RCC_ClockConfig+0x1bc>)
 8002de2:	4313      	orrs	r3, r2
 8002de4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002de6:	f000 f821 	bl	8002e2c <HAL_RCC_GetSysClockFreq>
 8002dea:	4602      	mov	r2, r0
 8002dec:	4b0b      	ldr	r3, [pc, #44]	@ (8002e1c <HAL_RCC_ClockConfig+0x1bc>)
 8002dee:	689b      	ldr	r3, [r3, #8]
 8002df0:	091b      	lsrs	r3, r3, #4
 8002df2:	f003 030f 	and.w	r3, r3, #15
 8002df6:	490a      	ldr	r1, [pc, #40]	@ (8002e20 <HAL_RCC_ClockConfig+0x1c0>)
 8002df8:	5ccb      	ldrb	r3, [r1, r3]
 8002dfa:	fa22 f303 	lsr.w	r3, r2, r3
 8002dfe:	4a09      	ldr	r2, [pc, #36]	@ (8002e24 <HAL_RCC_ClockConfig+0x1c4>)
 8002e00:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002e02:	4b09      	ldr	r3, [pc, #36]	@ (8002e28 <HAL_RCC_ClockConfig+0x1c8>)
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	4618      	mov	r0, r3
 8002e08:	f7ff f98e 	bl	8002128 <HAL_InitTick>

  return HAL_OK;
 8002e0c:	2300      	movs	r3, #0
}
 8002e0e:	4618      	mov	r0, r3
 8002e10:	3710      	adds	r7, #16
 8002e12:	46bd      	mov	sp, r7
 8002e14:	bd80      	pop	{r7, pc}
 8002e16:	bf00      	nop
 8002e18:	40023c00 	.word	0x40023c00
 8002e1c:	40023800 	.word	0x40023800
 8002e20:	080098a8 	.word	0x080098a8
 8002e24:	20000000 	.word	0x20000000
 8002e28:	20000004 	.word	0x20000004

08002e2c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e2c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002e30:	b094      	sub	sp, #80	@ 0x50
 8002e32:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002e34:	2300      	movs	r3, #0
 8002e36:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8002e38:	2300      	movs	r3, #0
 8002e3a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8002e3c:	2300      	movs	r3, #0
 8002e3e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8002e40:	2300      	movs	r3, #0
 8002e42:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002e44:	4b79      	ldr	r3, [pc, #484]	@ (800302c <HAL_RCC_GetSysClockFreq+0x200>)
 8002e46:	689b      	ldr	r3, [r3, #8]
 8002e48:	f003 030c 	and.w	r3, r3, #12
 8002e4c:	2b08      	cmp	r3, #8
 8002e4e:	d00d      	beq.n	8002e6c <HAL_RCC_GetSysClockFreq+0x40>
 8002e50:	2b08      	cmp	r3, #8
 8002e52:	f200 80e1 	bhi.w	8003018 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d002      	beq.n	8002e60 <HAL_RCC_GetSysClockFreq+0x34>
 8002e5a:	2b04      	cmp	r3, #4
 8002e5c:	d003      	beq.n	8002e66 <HAL_RCC_GetSysClockFreq+0x3a>
 8002e5e:	e0db      	b.n	8003018 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002e60:	4b73      	ldr	r3, [pc, #460]	@ (8003030 <HAL_RCC_GetSysClockFreq+0x204>)
 8002e62:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002e64:	e0db      	b.n	800301e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002e66:	4b73      	ldr	r3, [pc, #460]	@ (8003034 <HAL_RCC_GetSysClockFreq+0x208>)
 8002e68:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002e6a:	e0d8      	b.n	800301e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002e6c:	4b6f      	ldr	r3, [pc, #444]	@ (800302c <HAL_RCC_GetSysClockFreq+0x200>)
 8002e6e:	685b      	ldr	r3, [r3, #4]
 8002e70:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002e74:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002e76:	4b6d      	ldr	r3, [pc, #436]	@ (800302c <HAL_RCC_GetSysClockFreq+0x200>)
 8002e78:	685b      	ldr	r3, [r3, #4]
 8002e7a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d063      	beq.n	8002f4a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002e82:	4b6a      	ldr	r3, [pc, #424]	@ (800302c <HAL_RCC_GetSysClockFreq+0x200>)
 8002e84:	685b      	ldr	r3, [r3, #4]
 8002e86:	099b      	lsrs	r3, r3, #6
 8002e88:	2200      	movs	r2, #0
 8002e8a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002e8c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002e8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002e90:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e94:	633b      	str	r3, [r7, #48]	@ 0x30
 8002e96:	2300      	movs	r3, #0
 8002e98:	637b      	str	r3, [r7, #52]	@ 0x34
 8002e9a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002e9e:	4622      	mov	r2, r4
 8002ea0:	462b      	mov	r3, r5
 8002ea2:	f04f 0000 	mov.w	r0, #0
 8002ea6:	f04f 0100 	mov.w	r1, #0
 8002eaa:	0159      	lsls	r1, r3, #5
 8002eac:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002eb0:	0150      	lsls	r0, r2, #5
 8002eb2:	4602      	mov	r2, r0
 8002eb4:	460b      	mov	r3, r1
 8002eb6:	4621      	mov	r1, r4
 8002eb8:	1a51      	subs	r1, r2, r1
 8002eba:	6139      	str	r1, [r7, #16]
 8002ebc:	4629      	mov	r1, r5
 8002ebe:	eb63 0301 	sbc.w	r3, r3, r1
 8002ec2:	617b      	str	r3, [r7, #20]
 8002ec4:	f04f 0200 	mov.w	r2, #0
 8002ec8:	f04f 0300 	mov.w	r3, #0
 8002ecc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002ed0:	4659      	mov	r1, fp
 8002ed2:	018b      	lsls	r3, r1, #6
 8002ed4:	4651      	mov	r1, sl
 8002ed6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002eda:	4651      	mov	r1, sl
 8002edc:	018a      	lsls	r2, r1, #6
 8002ede:	4651      	mov	r1, sl
 8002ee0:	ebb2 0801 	subs.w	r8, r2, r1
 8002ee4:	4659      	mov	r1, fp
 8002ee6:	eb63 0901 	sbc.w	r9, r3, r1
 8002eea:	f04f 0200 	mov.w	r2, #0
 8002eee:	f04f 0300 	mov.w	r3, #0
 8002ef2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002ef6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002efa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002efe:	4690      	mov	r8, r2
 8002f00:	4699      	mov	r9, r3
 8002f02:	4623      	mov	r3, r4
 8002f04:	eb18 0303 	adds.w	r3, r8, r3
 8002f08:	60bb      	str	r3, [r7, #8]
 8002f0a:	462b      	mov	r3, r5
 8002f0c:	eb49 0303 	adc.w	r3, r9, r3
 8002f10:	60fb      	str	r3, [r7, #12]
 8002f12:	f04f 0200 	mov.w	r2, #0
 8002f16:	f04f 0300 	mov.w	r3, #0
 8002f1a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002f1e:	4629      	mov	r1, r5
 8002f20:	024b      	lsls	r3, r1, #9
 8002f22:	4621      	mov	r1, r4
 8002f24:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002f28:	4621      	mov	r1, r4
 8002f2a:	024a      	lsls	r2, r1, #9
 8002f2c:	4610      	mov	r0, r2
 8002f2e:	4619      	mov	r1, r3
 8002f30:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002f32:	2200      	movs	r2, #0
 8002f34:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002f36:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002f38:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002f3c:	f7fd feac 	bl	8000c98 <__aeabi_uldivmod>
 8002f40:	4602      	mov	r2, r0
 8002f42:	460b      	mov	r3, r1
 8002f44:	4613      	mov	r3, r2
 8002f46:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002f48:	e058      	b.n	8002ffc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f4a:	4b38      	ldr	r3, [pc, #224]	@ (800302c <HAL_RCC_GetSysClockFreq+0x200>)
 8002f4c:	685b      	ldr	r3, [r3, #4]
 8002f4e:	099b      	lsrs	r3, r3, #6
 8002f50:	2200      	movs	r2, #0
 8002f52:	4618      	mov	r0, r3
 8002f54:	4611      	mov	r1, r2
 8002f56:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002f5a:	623b      	str	r3, [r7, #32]
 8002f5c:	2300      	movs	r3, #0
 8002f5e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002f60:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002f64:	4642      	mov	r2, r8
 8002f66:	464b      	mov	r3, r9
 8002f68:	f04f 0000 	mov.w	r0, #0
 8002f6c:	f04f 0100 	mov.w	r1, #0
 8002f70:	0159      	lsls	r1, r3, #5
 8002f72:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002f76:	0150      	lsls	r0, r2, #5
 8002f78:	4602      	mov	r2, r0
 8002f7a:	460b      	mov	r3, r1
 8002f7c:	4641      	mov	r1, r8
 8002f7e:	ebb2 0a01 	subs.w	sl, r2, r1
 8002f82:	4649      	mov	r1, r9
 8002f84:	eb63 0b01 	sbc.w	fp, r3, r1
 8002f88:	f04f 0200 	mov.w	r2, #0
 8002f8c:	f04f 0300 	mov.w	r3, #0
 8002f90:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002f94:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002f98:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002f9c:	ebb2 040a 	subs.w	r4, r2, sl
 8002fa0:	eb63 050b 	sbc.w	r5, r3, fp
 8002fa4:	f04f 0200 	mov.w	r2, #0
 8002fa8:	f04f 0300 	mov.w	r3, #0
 8002fac:	00eb      	lsls	r3, r5, #3
 8002fae:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002fb2:	00e2      	lsls	r2, r4, #3
 8002fb4:	4614      	mov	r4, r2
 8002fb6:	461d      	mov	r5, r3
 8002fb8:	4643      	mov	r3, r8
 8002fba:	18e3      	adds	r3, r4, r3
 8002fbc:	603b      	str	r3, [r7, #0]
 8002fbe:	464b      	mov	r3, r9
 8002fc0:	eb45 0303 	adc.w	r3, r5, r3
 8002fc4:	607b      	str	r3, [r7, #4]
 8002fc6:	f04f 0200 	mov.w	r2, #0
 8002fca:	f04f 0300 	mov.w	r3, #0
 8002fce:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002fd2:	4629      	mov	r1, r5
 8002fd4:	028b      	lsls	r3, r1, #10
 8002fd6:	4621      	mov	r1, r4
 8002fd8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002fdc:	4621      	mov	r1, r4
 8002fde:	028a      	lsls	r2, r1, #10
 8002fe0:	4610      	mov	r0, r2
 8002fe2:	4619      	mov	r1, r3
 8002fe4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	61bb      	str	r3, [r7, #24]
 8002fea:	61fa      	str	r2, [r7, #28]
 8002fec:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002ff0:	f7fd fe52 	bl	8000c98 <__aeabi_uldivmod>
 8002ff4:	4602      	mov	r2, r0
 8002ff6:	460b      	mov	r3, r1
 8002ff8:	4613      	mov	r3, r2
 8002ffa:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002ffc:	4b0b      	ldr	r3, [pc, #44]	@ (800302c <HAL_RCC_GetSysClockFreq+0x200>)
 8002ffe:	685b      	ldr	r3, [r3, #4]
 8003000:	0c1b      	lsrs	r3, r3, #16
 8003002:	f003 0303 	and.w	r3, r3, #3
 8003006:	3301      	adds	r3, #1
 8003008:	005b      	lsls	r3, r3, #1
 800300a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 800300c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800300e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003010:	fbb2 f3f3 	udiv	r3, r2, r3
 8003014:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003016:	e002      	b.n	800301e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003018:	4b05      	ldr	r3, [pc, #20]	@ (8003030 <HAL_RCC_GetSysClockFreq+0x204>)
 800301a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800301c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800301e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003020:	4618      	mov	r0, r3
 8003022:	3750      	adds	r7, #80	@ 0x50
 8003024:	46bd      	mov	sp, r7
 8003026:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800302a:	bf00      	nop
 800302c:	40023800 	.word	0x40023800
 8003030:	00f42400 	.word	0x00f42400
 8003034:	007a1200 	.word	0x007a1200

08003038 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003038:	b480      	push	{r7}
 800303a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800303c:	4b03      	ldr	r3, [pc, #12]	@ (800304c <HAL_RCC_GetHCLKFreq+0x14>)
 800303e:	681b      	ldr	r3, [r3, #0]
}
 8003040:	4618      	mov	r0, r3
 8003042:	46bd      	mov	sp, r7
 8003044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003048:	4770      	bx	lr
 800304a:	bf00      	nop
 800304c:	20000000 	.word	0x20000000

08003050 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003050:	b580      	push	{r7, lr}
 8003052:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003054:	f7ff fff0 	bl	8003038 <HAL_RCC_GetHCLKFreq>
 8003058:	4602      	mov	r2, r0
 800305a:	4b05      	ldr	r3, [pc, #20]	@ (8003070 <HAL_RCC_GetPCLK1Freq+0x20>)
 800305c:	689b      	ldr	r3, [r3, #8]
 800305e:	0a9b      	lsrs	r3, r3, #10
 8003060:	f003 0307 	and.w	r3, r3, #7
 8003064:	4903      	ldr	r1, [pc, #12]	@ (8003074 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003066:	5ccb      	ldrb	r3, [r1, r3]
 8003068:	fa22 f303 	lsr.w	r3, r2, r3
}
 800306c:	4618      	mov	r0, r3
 800306e:	bd80      	pop	{r7, pc}
 8003070:	40023800 	.word	0x40023800
 8003074:	080098b8 	.word	0x080098b8

08003078 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003078:	b580      	push	{r7, lr}
 800307a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800307c:	f7ff ffdc 	bl	8003038 <HAL_RCC_GetHCLKFreq>
 8003080:	4602      	mov	r2, r0
 8003082:	4b05      	ldr	r3, [pc, #20]	@ (8003098 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003084:	689b      	ldr	r3, [r3, #8]
 8003086:	0b5b      	lsrs	r3, r3, #13
 8003088:	f003 0307 	and.w	r3, r3, #7
 800308c:	4903      	ldr	r1, [pc, #12]	@ (800309c <HAL_RCC_GetPCLK2Freq+0x24>)
 800308e:	5ccb      	ldrb	r3, [r1, r3]
 8003090:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003094:	4618      	mov	r0, r3
 8003096:	bd80      	pop	{r7, pc}
 8003098:	40023800 	.word	0x40023800
 800309c:	080098b8 	.word	0x080098b8

080030a0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80030a0:	b580      	push	{r7, lr}
 80030a2:	b082      	sub	sp, #8
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d101      	bne.n	80030b2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80030ae:	2301      	movs	r3, #1
 80030b0:	e041      	b.n	8003136 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80030b8:	b2db      	uxtb	r3, r3
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d106      	bne.n	80030cc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	2200      	movs	r2, #0
 80030c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80030c6:	6878      	ldr	r0, [r7, #4]
 80030c8:	f7fe feee 	bl	8001ea8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	2202      	movs	r2, #2
 80030d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681a      	ldr	r2, [r3, #0]
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	3304      	adds	r3, #4
 80030dc:	4619      	mov	r1, r3
 80030de:	4610      	mov	r0, r2
 80030e0:	f000 fdca 	bl	8003c78 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	2201      	movs	r2, #1
 80030e8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	2201      	movs	r2, #1
 80030f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	2201      	movs	r2, #1
 80030f8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	2201      	movs	r2, #1
 8003100:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	2201      	movs	r2, #1
 8003108:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	2201      	movs	r2, #1
 8003110:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	2201      	movs	r2, #1
 8003118:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	2201      	movs	r2, #1
 8003120:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	2201      	movs	r2, #1
 8003128:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	2201      	movs	r2, #1
 8003130:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003134:	2300      	movs	r3, #0
}
 8003136:	4618      	mov	r0, r3
 8003138:	3708      	adds	r7, #8
 800313a:	46bd      	mov	sp, r7
 800313c:	bd80      	pop	{r7, pc}
	...

08003140 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003140:	b480      	push	{r7}
 8003142:	b085      	sub	sp, #20
 8003144:	af00      	add	r7, sp, #0
 8003146:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800314e:	b2db      	uxtb	r3, r3
 8003150:	2b01      	cmp	r3, #1
 8003152:	d001      	beq.n	8003158 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003154:	2301      	movs	r3, #1
 8003156:	e044      	b.n	80031e2 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	2202      	movs	r2, #2
 800315c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	68da      	ldr	r2, [r3, #12]
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f042 0201 	orr.w	r2, r2, #1
 800316e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	4a1e      	ldr	r2, [pc, #120]	@ (80031f0 <HAL_TIM_Base_Start_IT+0xb0>)
 8003176:	4293      	cmp	r3, r2
 8003178:	d018      	beq.n	80031ac <HAL_TIM_Base_Start_IT+0x6c>
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003182:	d013      	beq.n	80031ac <HAL_TIM_Base_Start_IT+0x6c>
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	4a1a      	ldr	r2, [pc, #104]	@ (80031f4 <HAL_TIM_Base_Start_IT+0xb4>)
 800318a:	4293      	cmp	r3, r2
 800318c:	d00e      	beq.n	80031ac <HAL_TIM_Base_Start_IT+0x6c>
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	4a19      	ldr	r2, [pc, #100]	@ (80031f8 <HAL_TIM_Base_Start_IT+0xb8>)
 8003194:	4293      	cmp	r3, r2
 8003196:	d009      	beq.n	80031ac <HAL_TIM_Base_Start_IT+0x6c>
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	4a17      	ldr	r2, [pc, #92]	@ (80031fc <HAL_TIM_Base_Start_IT+0xbc>)
 800319e:	4293      	cmp	r3, r2
 80031a0:	d004      	beq.n	80031ac <HAL_TIM_Base_Start_IT+0x6c>
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	4a16      	ldr	r2, [pc, #88]	@ (8003200 <HAL_TIM_Base_Start_IT+0xc0>)
 80031a8:	4293      	cmp	r3, r2
 80031aa:	d111      	bne.n	80031d0 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	689b      	ldr	r3, [r3, #8]
 80031b2:	f003 0307 	and.w	r3, r3, #7
 80031b6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	2b06      	cmp	r3, #6
 80031bc:	d010      	beq.n	80031e0 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	681a      	ldr	r2, [r3, #0]
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f042 0201 	orr.w	r2, r2, #1
 80031cc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80031ce:	e007      	b.n	80031e0 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	681a      	ldr	r2, [r3, #0]
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f042 0201 	orr.w	r2, r2, #1
 80031de:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80031e0:	2300      	movs	r3, #0
}
 80031e2:	4618      	mov	r0, r3
 80031e4:	3714      	adds	r7, #20
 80031e6:	46bd      	mov	sp, r7
 80031e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ec:	4770      	bx	lr
 80031ee:	bf00      	nop
 80031f0:	40010000 	.word	0x40010000
 80031f4:	40000400 	.word	0x40000400
 80031f8:	40000800 	.word	0x40000800
 80031fc:	40000c00 	.word	0x40000c00
 8003200:	40014000 	.word	0x40014000

08003204 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003204:	b580      	push	{r7, lr}
 8003206:	b082      	sub	sp, #8
 8003208:	af00      	add	r7, sp, #0
 800320a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	2b00      	cmp	r3, #0
 8003210:	d101      	bne.n	8003216 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003212:	2301      	movs	r3, #1
 8003214:	e041      	b.n	800329a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800321c:	b2db      	uxtb	r3, r3
 800321e:	2b00      	cmp	r3, #0
 8003220:	d106      	bne.n	8003230 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	2200      	movs	r2, #0
 8003226:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800322a:	6878      	ldr	r0, [r7, #4]
 800322c:	f7fe fd70 	bl	8001d10 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	2202      	movs	r2, #2
 8003234:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681a      	ldr	r2, [r3, #0]
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	3304      	adds	r3, #4
 8003240:	4619      	mov	r1, r3
 8003242:	4610      	mov	r0, r2
 8003244:	f000 fd18 	bl	8003c78 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	2201      	movs	r2, #1
 800324c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	2201      	movs	r2, #1
 8003254:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	2201      	movs	r2, #1
 800325c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	2201      	movs	r2, #1
 8003264:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	2201      	movs	r2, #1
 800326c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	2201      	movs	r2, #1
 8003274:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	2201      	movs	r2, #1
 800327c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	2201      	movs	r2, #1
 8003284:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	2201      	movs	r2, #1
 800328c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	2201      	movs	r2, #1
 8003294:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003298:	2300      	movs	r3, #0
}
 800329a:	4618      	mov	r0, r3
 800329c:	3708      	adds	r7, #8
 800329e:	46bd      	mov	sp, r7
 80032a0:	bd80      	pop	{r7, pc}
	...

080032a4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80032a4:	b580      	push	{r7, lr}
 80032a6:	b084      	sub	sp, #16
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	6078      	str	r0, [r7, #4]
 80032ac:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80032ae:	683b      	ldr	r3, [r7, #0]
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d109      	bne.n	80032c8 <HAL_TIM_PWM_Start+0x24>
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80032ba:	b2db      	uxtb	r3, r3
 80032bc:	2b01      	cmp	r3, #1
 80032be:	bf14      	ite	ne
 80032c0:	2301      	movne	r3, #1
 80032c2:	2300      	moveq	r3, #0
 80032c4:	b2db      	uxtb	r3, r3
 80032c6:	e022      	b.n	800330e <HAL_TIM_PWM_Start+0x6a>
 80032c8:	683b      	ldr	r3, [r7, #0]
 80032ca:	2b04      	cmp	r3, #4
 80032cc:	d109      	bne.n	80032e2 <HAL_TIM_PWM_Start+0x3e>
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80032d4:	b2db      	uxtb	r3, r3
 80032d6:	2b01      	cmp	r3, #1
 80032d8:	bf14      	ite	ne
 80032da:	2301      	movne	r3, #1
 80032dc:	2300      	moveq	r3, #0
 80032de:	b2db      	uxtb	r3, r3
 80032e0:	e015      	b.n	800330e <HAL_TIM_PWM_Start+0x6a>
 80032e2:	683b      	ldr	r3, [r7, #0]
 80032e4:	2b08      	cmp	r3, #8
 80032e6:	d109      	bne.n	80032fc <HAL_TIM_PWM_Start+0x58>
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80032ee:	b2db      	uxtb	r3, r3
 80032f0:	2b01      	cmp	r3, #1
 80032f2:	bf14      	ite	ne
 80032f4:	2301      	movne	r3, #1
 80032f6:	2300      	moveq	r3, #0
 80032f8:	b2db      	uxtb	r3, r3
 80032fa:	e008      	b.n	800330e <HAL_TIM_PWM_Start+0x6a>
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003302:	b2db      	uxtb	r3, r3
 8003304:	2b01      	cmp	r3, #1
 8003306:	bf14      	ite	ne
 8003308:	2301      	movne	r3, #1
 800330a:	2300      	moveq	r3, #0
 800330c:	b2db      	uxtb	r3, r3
 800330e:	2b00      	cmp	r3, #0
 8003310:	d001      	beq.n	8003316 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003312:	2301      	movs	r3, #1
 8003314:	e068      	b.n	80033e8 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003316:	683b      	ldr	r3, [r7, #0]
 8003318:	2b00      	cmp	r3, #0
 800331a:	d104      	bne.n	8003326 <HAL_TIM_PWM_Start+0x82>
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	2202      	movs	r2, #2
 8003320:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003324:	e013      	b.n	800334e <HAL_TIM_PWM_Start+0xaa>
 8003326:	683b      	ldr	r3, [r7, #0]
 8003328:	2b04      	cmp	r3, #4
 800332a:	d104      	bne.n	8003336 <HAL_TIM_PWM_Start+0x92>
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	2202      	movs	r2, #2
 8003330:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003334:	e00b      	b.n	800334e <HAL_TIM_PWM_Start+0xaa>
 8003336:	683b      	ldr	r3, [r7, #0]
 8003338:	2b08      	cmp	r3, #8
 800333a:	d104      	bne.n	8003346 <HAL_TIM_PWM_Start+0xa2>
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	2202      	movs	r2, #2
 8003340:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003344:	e003      	b.n	800334e <HAL_TIM_PWM_Start+0xaa>
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	2202      	movs	r2, #2
 800334a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	2201      	movs	r2, #1
 8003354:	6839      	ldr	r1, [r7, #0]
 8003356:	4618      	mov	r0, r3
 8003358:	f000 ff40 	bl	80041dc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	4a23      	ldr	r2, [pc, #140]	@ (80033f0 <HAL_TIM_PWM_Start+0x14c>)
 8003362:	4293      	cmp	r3, r2
 8003364:	d107      	bne.n	8003376 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003374:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	4a1d      	ldr	r2, [pc, #116]	@ (80033f0 <HAL_TIM_PWM_Start+0x14c>)
 800337c:	4293      	cmp	r3, r2
 800337e:	d018      	beq.n	80033b2 <HAL_TIM_PWM_Start+0x10e>
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003388:	d013      	beq.n	80033b2 <HAL_TIM_PWM_Start+0x10e>
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	4a19      	ldr	r2, [pc, #100]	@ (80033f4 <HAL_TIM_PWM_Start+0x150>)
 8003390:	4293      	cmp	r3, r2
 8003392:	d00e      	beq.n	80033b2 <HAL_TIM_PWM_Start+0x10e>
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	4a17      	ldr	r2, [pc, #92]	@ (80033f8 <HAL_TIM_PWM_Start+0x154>)
 800339a:	4293      	cmp	r3, r2
 800339c:	d009      	beq.n	80033b2 <HAL_TIM_PWM_Start+0x10e>
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	4a16      	ldr	r2, [pc, #88]	@ (80033fc <HAL_TIM_PWM_Start+0x158>)
 80033a4:	4293      	cmp	r3, r2
 80033a6:	d004      	beq.n	80033b2 <HAL_TIM_PWM_Start+0x10e>
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	4a14      	ldr	r2, [pc, #80]	@ (8003400 <HAL_TIM_PWM_Start+0x15c>)
 80033ae:	4293      	cmp	r3, r2
 80033b0:	d111      	bne.n	80033d6 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	689b      	ldr	r3, [r3, #8]
 80033b8:	f003 0307 	and.w	r3, r3, #7
 80033bc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	2b06      	cmp	r3, #6
 80033c2:	d010      	beq.n	80033e6 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	681a      	ldr	r2, [r3, #0]
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f042 0201 	orr.w	r2, r2, #1
 80033d2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80033d4:	e007      	b.n	80033e6 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	681a      	ldr	r2, [r3, #0]
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f042 0201 	orr.w	r2, r2, #1
 80033e4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80033e6:	2300      	movs	r3, #0
}
 80033e8:	4618      	mov	r0, r3
 80033ea:	3710      	adds	r7, #16
 80033ec:	46bd      	mov	sp, r7
 80033ee:	bd80      	pop	{r7, pc}
 80033f0:	40010000 	.word	0x40010000
 80033f4:	40000400 	.word	0x40000400
 80033f8:	40000800 	.word	0x40000800
 80033fc:	40000c00 	.word	0x40000c00
 8003400:	40014000 	.word	0x40014000

08003404 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003404:	b580      	push	{r7, lr}
 8003406:	b082      	sub	sp, #8
 8003408:	af00      	add	r7, sp, #0
 800340a:	6078      	str	r0, [r7, #4]
 800340c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	2200      	movs	r2, #0
 8003414:	6839      	ldr	r1, [r7, #0]
 8003416:	4618      	mov	r0, r3
 8003418:	f000 fee0 	bl	80041dc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	4a29      	ldr	r2, [pc, #164]	@ (80034c8 <HAL_TIM_PWM_Stop+0xc4>)
 8003422:	4293      	cmp	r3, r2
 8003424:	d117      	bne.n	8003456 <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	6a1a      	ldr	r2, [r3, #32]
 800342c:	f241 1311 	movw	r3, #4369	@ 0x1111
 8003430:	4013      	ands	r3, r2
 8003432:	2b00      	cmp	r3, #0
 8003434:	d10f      	bne.n	8003456 <HAL_TIM_PWM_Stop+0x52>
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	6a1a      	ldr	r2, [r3, #32]
 800343c:	f240 4344 	movw	r3, #1092	@ 0x444
 8003440:	4013      	ands	r3, r2
 8003442:	2b00      	cmp	r3, #0
 8003444:	d107      	bne.n	8003456 <HAL_TIM_PWM_Stop+0x52>
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003454:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	6a1a      	ldr	r2, [r3, #32]
 800345c:	f241 1311 	movw	r3, #4369	@ 0x1111
 8003460:	4013      	ands	r3, r2
 8003462:	2b00      	cmp	r3, #0
 8003464:	d10f      	bne.n	8003486 <HAL_TIM_PWM_Stop+0x82>
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	6a1a      	ldr	r2, [r3, #32]
 800346c:	f240 4344 	movw	r3, #1092	@ 0x444
 8003470:	4013      	ands	r3, r2
 8003472:	2b00      	cmp	r3, #0
 8003474:	d107      	bne.n	8003486 <HAL_TIM_PWM_Stop+0x82>
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	681a      	ldr	r2, [r3, #0]
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f022 0201 	bic.w	r2, r2, #1
 8003484:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8003486:	683b      	ldr	r3, [r7, #0]
 8003488:	2b00      	cmp	r3, #0
 800348a:	d104      	bne.n	8003496 <HAL_TIM_PWM_Stop+0x92>
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	2201      	movs	r2, #1
 8003490:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003494:	e013      	b.n	80034be <HAL_TIM_PWM_Stop+0xba>
 8003496:	683b      	ldr	r3, [r7, #0]
 8003498:	2b04      	cmp	r3, #4
 800349a:	d104      	bne.n	80034a6 <HAL_TIM_PWM_Stop+0xa2>
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	2201      	movs	r2, #1
 80034a0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80034a4:	e00b      	b.n	80034be <HAL_TIM_PWM_Stop+0xba>
 80034a6:	683b      	ldr	r3, [r7, #0]
 80034a8:	2b08      	cmp	r3, #8
 80034aa:	d104      	bne.n	80034b6 <HAL_TIM_PWM_Stop+0xb2>
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	2201      	movs	r2, #1
 80034b0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80034b4:	e003      	b.n	80034be <HAL_TIM_PWM_Stop+0xba>
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	2201      	movs	r2, #1
 80034ba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Return function status */
  return HAL_OK;
 80034be:	2300      	movs	r3, #0
}
 80034c0:	4618      	mov	r0, r3
 80034c2:	3708      	adds	r7, #8
 80034c4:	46bd      	mov	sp, r7
 80034c6:	bd80      	pop	{r7, pc}
 80034c8:	40010000 	.word	0x40010000

080034cc <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 80034cc:	b580      	push	{r7, lr}
 80034ce:	b086      	sub	sp, #24
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	6078      	str	r0, [r7, #4]
 80034d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	2b00      	cmp	r3, #0
 80034da:	d101      	bne.n	80034e0 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80034dc:	2301      	movs	r3, #1
 80034de:	e097      	b.n	8003610 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80034e6:	b2db      	uxtb	r3, r3
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d106      	bne.n	80034fa <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	2200      	movs	r2, #0
 80034f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80034f4:	6878      	ldr	r0, [r7, #4]
 80034f6:	f7fe fc5b 	bl	8001db0 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	2202      	movs	r2, #2
 80034fe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	689b      	ldr	r3, [r3, #8]
 8003508:	687a      	ldr	r2, [r7, #4]
 800350a:	6812      	ldr	r2, [r2, #0]
 800350c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003510:	f023 0307 	bic.w	r3, r3, #7
 8003514:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681a      	ldr	r2, [r3, #0]
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	3304      	adds	r3, #4
 800351e:	4619      	mov	r1, r3
 8003520:	4610      	mov	r0, r2
 8003522:	f000 fba9 	bl	8003c78 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	689b      	ldr	r3, [r3, #8]
 800352c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	699b      	ldr	r3, [r3, #24]
 8003534:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	6a1b      	ldr	r3, [r3, #32]
 800353c:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800353e:	683b      	ldr	r3, [r7, #0]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	697a      	ldr	r2, [r7, #20]
 8003544:	4313      	orrs	r3, r2
 8003546:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8003548:	693b      	ldr	r3, [r7, #16]
 800354a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800354e:	f023 0303 	bic.w	r3, r3, #3
 8003552:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8003554:	683b      	ldr	r3, [r7, #0]
 8003556:	689a      	ldr	r2, [r3, #8]
 8003558:	683b      	ldr	r3, [r7, #0]
 800355a:	699b      	ldr	r3, [r3, #24]
 800355c:	021b      	lsls	r3, r3, #8
 800355e:	4313      	orrs	r3, r2
 8003560:	693a      	ldr	r2, [r7, #16]
 8003562:	4313      	orrs	r3, r2
 8003564:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8003566:	693b      	ldr	r3, [r7, #16]
 8003568:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 800356c:	f023 030c 	bic.w	r3, r3, #12
 8003570:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8003572:	693b      	ldr	r3, [r7, #16]
 8003574:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003578:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800357c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800357e:	683b      	ldr	r3, [r7, #0]
 8003580:	68da      	ldr	r2, [r3, #12]
 8003582:	683b      	ldr	r3, [r7, #0]
 8003584:	69db      	ldr	r3, [r3, #28]
 8003586:	021b      	lsls	r3, r3, #8
 8003588:	4313      	orrs	r3, r2
 800358a:	693a      	ldr	r2, [r7, #16]
 800358c:	4313      	orrs	r3, r2
 800358e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8003590:	683b      	ldr	r3, [r7, #0]
 8003592:	691b      	ldr	r3, [r3, #16]
 8003594:	011a      	lsls	r2, r3, #4
 8003596:	683b      	ldr	r3, [r7, #0]
 8003598:	6a1b      	ldr	r3, [r3, #32]
 800359a:	031b      	lsls	r3, r3, #12
 800359c:	4313      	orrs	r3, r2
 800359e:	693a      	ldr	r2, [r7, #16]
 80035a0:	4313      	orrs	r3, r2
 80035a2:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 80035aa:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 80035b2:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80035b4:	683b      	ldr	r3, [r7, #0]
 80035b6:	685a      	ldr	r2, [r3, #4]
 80035b8:	683b      	ldr	r3, [r7, #0]
 80035ba:	695b      	ldr	r3, [r3, #20]
 80035bc:	011b      	lsls	r3, r3, #4
 80035be:	4313      	orrs	r3, r2
 80035c0:	68fa      	ldr	r2, [r7, #12]
 80035c2:	4313      	orrs	r3, r2
 80035c4:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	697a      	ldr	r2, [r7, #20]
 80035cc:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	693a      	ldr	r2, [r7, #16]
 80035d4:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	68fa      	ldr	r2, [r7, #12]
 80035dc:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	2201      	movs	r2, #1
 80035e2:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	2201      	movs	r2, #1
 80035ea:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	2201      	movs	r2, #1
 80035f2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	2201      	movs	r2, #1
 80035fa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	2201      	movs	r2, #1
 8003602:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	2201      	movs	r2, #1
 800360a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800360e:	2300      	movs	r3, #0
}
 8003610:	4618      	mov	r0, r3
 8003612:	3718      	adds	r7, #24
 8003614:	46bd      	mov	sp, r7
 8003616:	bd80      	pop	{r7, pc}

08003618 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003618:	b580      	push	{r7, lr}
 800361a:	b084      	sub	sp, #16
 800361c:	af00      	add	r7, sp, #0
 800361e:	6078      	str	r0, [r7, #4]
 8003620:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003628:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003630:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003638:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8003640:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8003642:	683b      	ldr	r3, [r7, #0]
 8003644:	2b00      	cmp	r3, #0
 8003646:	d110      	bne.n	800366a <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003648:	7bfb      	ldrb	r3, [r7, #15]
 800364a:	2b01      	cmp	r3, #1
 800364c:	d102      	bne.n	8003654 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800364e:	7b7b      	ldrb	r3, [r7, #13]
 8003650:	2b01      	cmp	r3, #1
 8003652:	d001      	beq.n	8003658 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8003654:	2301      	movs	r3, #1
 8003656:	e069      	b.n	800372c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	2202      	movs	r2, #2
 800365c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	2202      	movs	r2, #2
 8003664:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003668:	e031      	b.n	80036ce <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800366a:	683b      	ldr	r3, [r7, #0]
 800366c:	2b04      	cmp	r3, #4
 800366e:	d110      	bne.n	8003692 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003670:	7bbb      	ldrb	r3, [r7, #14]
 8003672:	2b01      	cmp	r3, #1
 8003674:	d102      	bne.n	800367c <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003676:	7b3b      	ldrb	r3, [r7, #12]
 8003678:	2b01      	cmp	r3, #1
 800367a:	d001      	beq.n	8003680 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 800367c:	2301      	movs	r3, #1
 800367e:	e055      	b.n	800372c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	2202      	movs	r2, #2
 8003684:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	2202      	movs	r2, #2
 800368c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003690:	e01d      	b.n	80036ce <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003692:	7bfb      	ldrb	r3, [r7, #15]
 8003694:	2b01      	cmp	r3, #1
 8003696:	d108      	bne.n	80036aa <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003698:	7bbb      	ldrb	r3, [r7, #14]
 800369a:	2b01      	cmp	r3, #1
 800369c:	d105      	bne.n	80036aa <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800369e:	7b7b      	ldrb	r3, [r7, #13]
 80036a0:	2b01      	cmp	r3, #1
 80036a2:	d102      	bne.n	80036aa <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80036a4:	7b3b      	ldrb	r3, [r7, #12]
 80036a6:	2b01      	cmp	r3, #1
 80036a8:	d001      	beq.n	80036ae <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80036aa:	2301      	movs	r3, #1
 80036ac:	e03e      	b.n	800372c <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	2202      	movs	r2, #2
 80036b2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	2202      	movs	r2, #2
 80036ba:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	2202      	movs	r2, #2
 80036c2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	2202      	movs	r2, #2
 80036ca:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80036ce:	683b      	ldr	r3, [r7, #0]
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d003      	beq.n	80036dc <HAL_TIM_Encoder_Start+0xc4>
 80036d4:	683b      	ldr	r3, [r7, #0]
 80036d6:	2b04      	cmp	r3, #4
 80036d8:	d008      	beq.n	80036ec <HAL_TIM_Encoder_Start+0xd4>
 80036da:	e00f      	b.n	80036fc <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	2201      	movs	r2, #1
 80036e2:	2100      	movs	r1, #0
 80036e4:	4618      	mov	r0, r3
 80036e6:	f000 fd79 	bl	80041dc <TIM_CCxChannelCmd>
      break;
 80036ea:	e016      	b.n	800371a <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	2201      	movs	r2, #1
 80036f2:	2104      	movs	r1, #4
 80036f4:	4618      	mov	r0, r3
 80036f6:	f000 fd71 	bl	80041dc <TIM_CCxChannelCmd>
      break;
 80036fa:	e00e      	b.n	800371a <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	2201      	movs	r2, #1
 8003702:	2100      	movs	r1, #0
 8003704:	4618      	mov	r0, r3
 8003706:	f000 fd69 	bl	80041dc <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	2201      	movs	r2, #1
 8003710:	2104      	movs	r1, #4
 8003712:	4618      	mov	r0, r3
 8003714:	f000 fd62 	bl	80041dc <TIM_CCxChannelCmd>
      break;
 8003718:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	681a      	ldr	r2, [r3, #0]
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f042 0201 	orr.w	r2, r2, #1
 8003728:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800372a:	2300      	movs	r3, #0
}
 800372c:	4618      	mov	r0, r3
 800372e:	3710      	adds	r7, #16
 8003730:	46bd      	mov	sp, r7
 8003732:	bd80      	pop	{r7, pc}

08003734 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003734:	b580      	push	{r7, lr}
 8003736:	b084      	sub	sp, #16
 8003738:	af00      	add	r7, sp, #0
 800373a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	68db      	ldr	r3, [r3, #12]
 8003742:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	691b      	ldr	r3, [r3, #16]
 800374a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800374c:	68bb      	ldr	r3, [r7, #8]
 800374e:	f003 0302 	and.w	r3, r3, #2
 8003752:	2b00      	cmp	r3, #0
 8003754:	d020      	beq.n	8003798 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	f003 0302 	and.w	r3, r3, #2
 800375c:	2b00      	cmp	r3, #0
 800375e:	d01b      	beq.n	8003798 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f06f 0202 	mvn.w	r2, #2
 8003768:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	2201      	movs	r2, #1
 800376e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	699b      	ldr	r3, [r3, #24]
 8003776:	f003 0303 	and.w	r3, r3, #3
 800377a:	2b00      	cmp	r3, #0
 800377c:	d003      	beq.n	8003786 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800377e:	6878      	ldr	r0, [r7, #4]
 8003780:	f000 fa5b 	bl	8003c3a <HAL_TIM_IC_CaptureCallback>
 8003784:	e005      	b.n	8003792 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003786:	6878      	ldr	r0, [r7, #4]
 8003788:	f000 fa4d 	bl	8003c26 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800378c:	6878      	ldr	r0, [r7, #4]
 800378e:	f000 fa5e 	bl	8003c4e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	2200      	movs	r2, #0
 8003796:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003798:	68bb      	ldr	r3, [r7, #8]
 800379a:	f003 0304 	and.w	r3, r3, #4
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d020      	beq.n	80037e4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	f003 0304 	and.w	r3, r3, #4
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d01b      	beq.n	80037e4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f06f 0204 	mvn.w	r2, #4
 80037b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	2202      	movs	r2, #2
 80037ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	699b      	ldr	r3, [r3, #24]
 80037c2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d003      	beq.n	80037d2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80037ca:	6878      	ldr	r0, [r7, #4]
 80037cc:	f000 fa35 	bl	8003c3a <HAL_TIM_IC_CaptureCallback>
 80037d0:	e005      	b.n	80037de <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80037d2:	6878      	ldr	r0, [r7, #4]
 80037d4:	f000 fa27 	bl	8003c26 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037d8:	6878      	ldr	r0, [r7, #4]
 80037da:	f000 fa38 	bl	8003c4e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	2200      	movs	r2, #0
 80037e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80037e4:	68bb      	ldr	r3, [r7, #8]
 80037e6:	f003 0308 	and.w	r3, r3, #8
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d020      	beq.n	8003830 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	f003 0308 	and.w	r3, r3, #8
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d01b      	beq.n	8003830 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f06f 0208 	mvn.w	r2, #8
 8003800:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	2204      	movs	r2, #4
 8003806:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	69db      	ldr	r3, [r3, #28]
 800380e:	f003 0303 	and.w	r3, r3, #3
 8003812:	2b00      	cmp	r3, #0
 8003814:	d003      	beq.n	800381e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003816:	6878      	ldr	r0, [r7, #4]
 8003818:	f000 fa0f 	bl	8003c3a <HAL_TIM_IC_CaptureCallback>
 800381c:	e005      	b.n	800382a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800381e:	6878      	ldr	r0, [r7, #4]
 8003820:	f000 fa01 	bl	8003c26 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003824:	6878      	ldr	r0, [r7, #4]
 8003826:	f000 fa12 	bl	8003c4e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	2200      	movs	r2, #0
 800382e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003830:	68bb      	ldr	r3, [r7, #8]
 8003832:	f003 0310 	and.w	r3, r3, #16
 8003836:	2b00      	cmp	r3, #0
 8003838:	d020      	beq.n	800387c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	f003 0310 	and.w	r3, r3, #16
 8003840:	2b00      	cmp	r3, #0
 8003842:	d01b      	beq.n	800387c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f06f 0210 	mvn.w	r2, #16
 800384c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	2208      	movs	r2, #8
 8003852:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	69db      	ldr	r3, [r3, #28]
 800385a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800385e:	2b00      	cmp	r3, #0
 8003860:	d003      	beq.n	800386a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003862:	6878      	ldr	r0, [r7, #4]
 8003864:	f000 f9e9 	bl	8003c3a <HAL_TIM_IC_CaptureCallback>
 8003868:	e005      	b.n	8003876 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800386a:	6878      	ldr	r0, [r7, #4]
 800386c:	f000 f9db 	bl	8003c26 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003870:	6878      	ldr	r0, [r7, #4]
 8003872:	f000 f9ec 	bl	8003c4e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	2200      	movs	r2, #0
 800387a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800387c:	68bb      	ldr	r3, [r7, #8]
 800387e:	f003 0301 	and.w	r3, r3, #1
 8003882:	2b00      	cmp	r3, #0
 8003884:	d00c      	beq.n	80038a0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	f003 0301 	and.w	r3, r3, #1
 800388c:	2b00      	cmp	r3, #0
 800388e:	d007      	beq.n	80038a0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f06f 0201 	mvn.w	r2, #1
 8003898:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800389a:	6878      	ldr	r0, [r7, #4]
 800389c:	f7fd fd80 	bl	80013a0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80038a0:	68bb      	ldr	r3, [r7, #8]
 80038a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d00c      	beq.n	80038c4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d007      	beq.n	80038c4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80038bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80038be:	6878      	ldr	r0, [r7, #4]
 80038c0:	f000 fe86 	bl	80045d0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80038c4:	68bb      	ldr	r3, [r7, #8]
 80038c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d00c      	beq.n	80038e8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d007      	beq.n	80038e8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80038e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80038e2:	6878      	ldr	r0, [r7, #4]
 80038e4:	f000 f9bd 	bl	8003c62 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80038e8:	68bb      	ldr	r3, [r7, #8]
 80038ea:	f003 0320 	and.w	r3, r3, #32
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d00c      	beq.n	800390c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	f003 0320 	and.w	r3, r3, #32
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d007      	beq.n	800390c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f06f 0220 	mvn.w	r2, #32
 8003904:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003906:	6878      	ldr	r0, [r7, #4]
 8003908:	f000 fe58 	bl	80045bc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800390c:	bf00      	nop
 800390e:	3710      	adds	r7, #16
 8003910:	46bd      	mov	sp, r7
 8003912:	bd80      	pop	{r7, pc}

08003914 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003914:	b580      	push	{r7, lr}
 8003916:	b086      	sub	sp, #24
 8003918:	af00      	add	r7, sp, #0
 800391a:	60f8      	str	r0, [r7, #12]
 800391c:	60b9      	str	r1, [r7, #8]
 800391e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003920:	2300      	movs	r3, #0
 8003922:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800392a:	2b01      	cmp	r3, #1
 800392c:	d101      	bne.n	8003932 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800392e:	2302      	movs	r3, #2
 8003930:	e0ae      	b.n	8003a90 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	2201      	movs	r2, #1
 8003936:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	2b0c      	cmp	r3, #12
 800393e:	f200 809f 	bhi.w	8003a80 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003942:	a201      	add	r2, pc, #4	@ (adr r2, 8003948 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003944:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003948:	0800397d 	.word	0x0800397d
 800394c:	08003a81 	.word	0x08003a81
 8003950:	08003a81 	.word	0x08003a81
 8003954:	08003a81 	.word	0x08003a81
 8003958:	080039bd 	.word	0x080039bd
 800395c:	08003a81 	.word	0x08003a81
 8003960:	08003a81 	.word	0x08003a81
 8003964:	08003a81 	.word	0x08003a81
 8003968:	080039ff 	.word	0x080039ff
 800396c:	08003a81 	.word	0x08003a81
 8003970:	08003a81 	.word	0x08003a81
 8003974:	08003a81 	.word	0x08003a81
 8003978:	08003a3f 	.word	0x08003a3f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	68b9      	ldr	r1, [r7, #8]
 8003982:	4618      	mov	r0, r3
 8003984:	f000 fa04 	bl	8003d90 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	699a      	ldr	r2, [r3, #24]
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f042 0208 	orr.w	r2, r2, #8
 8003996:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	699a      	ldr	r2, [r3, #24]
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f022 0204 	bic.w	r2, r2, #4
 80039a6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	6999      	ldr	r1, [r3, #24]
 80039ae:	68bb      	ldr	r3, [r7, #8]
 80039b0:	691a      	ldr	r2, [r3, #16]
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	430a      	orrs	r2, r1
 80039b8:	619a      	str	r2, [r3, #24]
      break;
 80039ba:	e064      	b.n	8003a86 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	68b9      	ldr	r1, [r7, #8]
 80039c2:	4618      	mov	r0, r3
 80039c4:	f000 fa4a 	bl	8003e5c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	699a      	ldr	r2, [r3, #24]
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80039d6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	699a      	ldr	r2, [r3, #24]
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80039e6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	6999      	ldr	r1, [r3, #24]
 80039ee:	68bb      	ldr	r3, [r7, #8]
 80039f0:	691b      	ldr	r3, [r3, #16]
 80039f2:	021a      	lsls	r2, r3, #8
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	430a      	orrs	r2, r1
 80039fa:	619a      	str	r2, [r3, #24]
      break;
 80039fc:	e043      	b.n	8003a86 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	68b9      	ldr	r1, [r7, #8]
 8003a04:	4618      	mov	r0, r3
 8003a06:	f000 fa95 	bl	8003f34 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	69da      	ldr	r2, [r3, #28]
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f042 0208 	orr.w	r2, r2, #8
 8003a18:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	69da      	ldr	r2, [r3, #28]
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f022 0204 	bic.w	r2, r2, #4
 8003a28:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	69d9      	ldr	r1, [r3, #28]
 8003a30:	68bb      	ldr	r3, [r7, #8]
 8003a32:	691a      	ldr	r2, [r3, #16]
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	430a      	orrs	r2, r1
 8003a3a:	61da      	str	r2, [r3, #28]
      break;
 8003a3c:	e023      	b.n	8003a86 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	68b9      	ldr	r1, [r7, #8]
 8003a44:	4618      	mov	r0, r3
 8003a46:	f000 fadf 	bl	8004008 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	69da      	ldr	r2, [r3, #28]
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003a58:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	69da      	ldr	r2, [r3, #28]
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003a68:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	69d9      	ldr	r1, [r3, #28]
 8003a70:	68bb      	ldr	r3, [r7, #8]
 8003a72:	691b      	ldr	r3, [r3, #16]
 8003a74:	021a      	lsls	r2, r3, #8
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	430a      	orrs	r2, r1
 8003a7c:	61da      	str	r2, [r3, #28]
      break;
 8003a7e:	e002      	b.n	8003a86 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003a80:	2301      	movs	r3, #1
 8003a82:	75fb      	strb	r3, [r7, #23]
      break;
 8003a84:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	2200      	movs	r2, #0
 8003a8a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003a8e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003a90:	4618      	mov	r0, r3
 8003a92:	3718      	adds	r7, #24
 8003a94:	46bd      	mov	sp, r7
 8003a96:	bd80      	pop	{r7, pc}

08003a98 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003a98:	b580      	push	{r7, lr}
 8003a9a:	b084      	sub	sp, #16
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	6078      	str	r0, [r7, #4]
 8003aa0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003aa2:	2300      	movs	r3, #0
 8003aa4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003aac:	2b01      	cmp	r3, #1
 8003aae:	d101      	bne.n	8003ab4 <HAL_TIM_ConfigClockSource+0x1c>
 8003ab0:	2302      	movs	r3, #2
 8003ab2:	e0b4      	b.n	8003c1e <HAL_TIM_ConfigClockSource+0x186>
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	2201      	movs	r2, #1
 8003ab8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	2202      	movs	r2, #2
 8003ac0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	689b      	ldr	r3, [r3, #8]
 8003aca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003acc:	68bb      	ldr	r3, [r7, #8]
 8003ace:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003ad2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003ad4:	68bb      	ldr	r3, [r7, #8]
 8003ad6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003ada:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	68ba      	ldr	r2, [r7, #8]
 8003ae2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003ae4:	683b      	ldr	r3, [r7, #0]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003aec:	d03e      	beq.n	8003b6c <HAL_TIM_ConfigClockSource+0xd4>
 8003aee:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003af2:	f200 8087 	bhi.w	8003c04 <HAL_TIM_ConfigClockSource+0x16c>
 8003af6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003afa:	f000 8086 	beq.w	8003c0a <HAL_TIM_ConfigClockSource+0x172>
 8003afe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003b02:	d87f      	bhi.n	8003c04 <HAL_TIM_ConfigClockSource+0x16c>
 8003b04:	2b70      	cmp	r3, #112	@ 0x70
 8003b06:	d01a      	beq.n	8003b3e <HAL_TIM_ConfigClockSource+0xa6>
 8003b08:	2b70      	cmp	r3, #112	@ 0x70
 8003b0a:	d87b      	bhi.n	8003c04 <HAL_TIM_ConfigClockSource+0x16c>
 8003b0c:	2b60      	cmp	r3, #96	@ 0x60
 8003b0e:	d050      	beq.n	8003bb2 <HAL_TIM_ConfigClockSource+0x11a>
 8003b10:	2b60      	cmp	r3, #96	@ 0x60
 8003b12:	d877      	bhi.n	8003c04 <HAL_TIM_ConfigClockSource+0x16c>
 8003b14:	2b50      	cmp	r3, #80	@ 0x50
 8003b16:	d03c      	beq.n	8003b92 <HAL_TIM_ConfigClockSource+0xfa>
 8003b18:	2b50      	cmp	r3, #80	@ 0x50
 8003b1a:	d873      	bhi.n	8003c04 <HAL_TIM_ConfigClockSource+0x16c>
 8003b1c:	2b40      	cmp	r3, #64	@ 0x40
 8003b1e:	d058      	beq.n	8003bd2 <HAL_TIM_ConfigClockSource+0x13a>
 8003b20:	2b40      	cmp	r3, #64	@ 0x40
 8003b22:	d86f      	bhi.n	8003c04 <HAL_TIM_ConfigClockSource+0x16c>
 8003b24:	2b30      	cmp	r3, #48	@ 0x30
 8003b26:	d064      	beq.n	8003bf2 <HAL_TIM_ConfigClockSource+0x15a>
 8003b28:	2b30      	cmp	r3, #48	@ 0x30
 8003b2a:	d86b      	bhi.n	8003c04 <HAL_TIM_ConfigClockSource+0x16c>
 8003b2c:	2b20      	cmp	r3, #32
 8003b2e:	d060      	beq.n	8003bf2 <HAL_TIM_ConfigClockSource+0x15a>
 8003b30:	2b20      	cmp	r3, #32
 8003b32:	d867      	bhi.n	8003c04 <HAL_TIM_ConfigClockSource+0x16c>
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d05c      	beq.n	8003bf2 <HAL_TIM_ConfigClockSource+0x15a>
 8003b38:	2b10      	cmp	r3, #16
 8003b3a:	d05a      	beq.n	8003bf2 <HAL_TIM_ConfigClockSource+0x15a>
 8003b3c:	e062      	b.n	8003c04 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003b42:	683b      	ldr	r3, [r7, #0]
 8003b44:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003b46:	683b      	ldr	r3, [r7, #0]
 8003b48:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003b4a:	683b      	ldr	r3, [r7, #0]
 8003b4c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003b4e:	f000 fb25 	bl	800419c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	689b      	ldr	r3, [r3, #8]
 8003b58:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003b5a:	68bb      	ldr	r3, [r7, #8]
 8003b5c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003b60:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	68ba      	ldr	r2, [r7, #8]
 8003b68:	609a      	str	r2, [r3, #8]
      break;
 8003b6a:	e04f      	b.n	8003c0c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003b70:	683b      	ldr	r3, [r7, #0]
 8003b72:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003b74:	683b      	ldr	r3, [r7, #0]
 8003b76:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003b78:	683b      	ldr	r3, [r7, #0]
 8003b7a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003b7c:	f000 fb0e 	bl	800419c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	689a      	ldr	r2, [r3, #8]
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003b8e:	609a      	str	r2, [r3, #8]
      break;
 8003b90:	e03c      	b.n	8003c0c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003b96:	683b      	ldr	r3, [r7, #0]
 8003b98:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003b9a:	683b      	ldr	r3, [r7, #0]
 8003b9c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003b9e:	461a      	mov	r2, r3
 8003ba0:	f000 fa82 	bl	80040a8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	2150      	movs	r1, #80	@ 0x50
 8003baa:	4618      	mov	r0, r3
 8003bac:	f000 fadb 	bl	8004166 <TIM_ITRx_SetConfig>
      break;
 8003bb0:	e02c      	b.n	8003c0c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003bb6:	683b      	ldr	r3, [r7, #0]
 8003bb8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003bba:	683b      	ldr	r3, [r7, #0]
 8003bbc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003bbe:	461a      	mov	r2, r3
 8003bc0:	f000 faa1 	bl	8004106 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	2160      	movs	r1, #96	@ 0x60
 8003bca:	4618      	mov	r0, r3
 8003bcc:	f000 facb 	bl	8004166 <TIM_ITRx_SetConfig>
      break;
 8003bd0:	e01c      	b.n	8003c0c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003bd6:	683b      	ldr	r3, [r7, #0]
 8003bd8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003bda:	683b      	ldr	r3, [r7, #0]
 8003bdc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003bde:	461a      	mov	r2, r3
 8003be0:	f000 fa62 	bl	80040a8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	2140      	movs	r1, #64	@ 0x40
 8003bea:	4618      	mov	r0, r3
 8003bec:	f000 fabb 	bl	8004166 <TIM_ITRx_SetConfig>
      break;
 8003bf0:	e00c      	b.n	8003c0c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681a      	ldr	r2, [r3, #0]
 8003bf6:	683b      	ldr	r3, [r7, #0]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	4619      	mov	r1, r3
 8003bfc:	4610      	mov	r0, r2
 8003bfe:	f000 fab2 	bl	8004166 <TIM_ITRx_SetConfig>
      break;
 8003c02:	e003      	b.n	8003c0c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003c04:	2301      	movs	r3, #1
 8003c06:	73fb      	strb	r3, [r7, #15]
      break;
 8003c08:	e000      	b.n	8003c0c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003c0a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	2201      	movs	r2, #1
 8003c10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	2200      	movs	r2, #0
 8003c18:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003c1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c1e:	4618      	mov	r0, r3
 8003c20:	3710      	adds	r7, #16
 8003c22:	46bd      	mov	sp, r7
 8003c24:	bd80      	pop	{r7, pc}

08003c26 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003c26:	b480      	push	{r7}
 8003c28:	b083      	sub	sp, #12
 8003c2a:	af00      	add	r7, sp, #0
 8003c2c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003c2e:	bf00      	nop
 8003c30:	370c      	adds	r7, #12
 8003c32:	46bd      	mov	sp, r7
 8003c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c38:	4770      	bx	lr

08003c3a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003c3a:	b480      	push	{r7}
 8003c3c:	b083      	sub	sp, #12
 8003c3e:	af00      	add	r7, sp, #0
 8003c40:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003c42:	bf00      	nop
 8003c44:	370c      	adds	r7, #12
 8003c46:	46bd      	mov	sp, r7
 8003c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c4c:	4770      	bx	lr

08003c4e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003c4e:	b480      	push	{r7}
 8003c50:	b083      	sub	sp, #12
 8003c52:	af00      	add	r7, sp, #0
 8003c54:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003c56:	bf00      	nop
 8003c58:	370c      	adds	r7, #12
 8003c5a:	46bd      	mov	sp, r7
 8003c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c60:	4770      	bx	lr

08003c62 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003c62:	b480      	push	{r7}
 8003c64:	b083      	sub	sp, #12
 8003c66:	af00      	add	r7, sp, #0
 8003c68:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003c6a:	bf00      	nop
 8003c6c:	370c      	adds	r7, #12
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c74:	4770      	bx	lr
	...

08003c78 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003c78:	b480      	push	{r7}
 8003c7a:	b085      	sub	sp, #20
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	6078      	str	r0, [r7, #4]
 8003c80:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	4a3a      	ldr	r2, [pc, #232]	@ (8003d74 <TIM_Base_SetConfig+0xfc>)
 8003c8c:	4293      	cmp	r3, r2
 8003c8e:	d00f      	beq.n	8003cb0 <TIM_Base_SetConfig+0x38>
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003c96:	d00b      	beq.n	8003cb0 <TIM_Base_SetConfig+0x38>
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	4a37      	ldr	r2, [pc, #220]	@ (8003d78 <TIM_Base_SetConfig+0x100>)
 8003c9c:	4293      	cmp	r3, r2
 8003c9e:	d007      	beq.n	8003cb0 <TIM_Base_SetConfig+0x38>
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	4a36      	ldr	r2, [pc, #216]	@ (8003d7c <TIM_Base_SetConfig+0x104>)
 8003ca4:	4293      	cmp	r3, r2
 8003ca6:	d003      	beq.n	8003cb0 <TIM_Base_SetConfig+0x38>
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	4a35      	ldr	r2, [pc, #212]	@ (8003d80 <TIM_Base_SetConfig+0x108>)
 8003cac:	4293      	cmp	r3, r2
 8003cae:	d108      	bne.n	8003cc2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003cb6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003cb8:	683b      	ldr	r3, [r7, #0]
 8003cba:	685b      	ldr	r3, [r3, #4]
 8003cbc:	68fa      	ldr	r2, [r7, #12]
 8003cbe:	4313      	orrs	r3, r2
 8003cc0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	4a2b      	ldr	r2, [pc, #172]	@ (8003d74 <TIM_Base_SetConfig+0xfc>)
 8003cc6:	4293      	cmp	r3, r2
 8003cc8:	d01b      	beq.n	8003d02 <TIM_Base_SetConfig+0x8a>
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003cd0:	d017      	beq.n	8003d02 <TIM_Base_SetConfig+0x8a>
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	4a28      	ldr	r2, [pc, #160]	@ (8003d78 <TIM_Base_SetConfig+0x100>)
 8003cd6:	4293      	cmp	r3, r2
 8003cd8:	d013      	beq.n	8003d02 <TIM_Base_SetConfig+0x8a>
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	4a27      	ldr	r2, [pc, #156]	@ (8003d7c <TIM_Base_SetConfig+0x104>)
 8003cde:	4293      	cmp	r3, r2
 8003ce0:	d00f      	beq.n	8003d02 <TIM_Base_SetConfig+0x8a>
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	4a26      	ldr	r2, [pc, #152]	@ (8003d80 <TIM_Base_SetConfig+0x108>)
 8003ce6:	4293      	cmp	r3, r2
 8003ce8:	d00b      	beq.n	8003d02 <TIM_Base_SetConfig+0x8a>
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	4a25      	ldr	r2, [pc, #148]	@ (8003d84 <TIM_Base_SetConfig+0x10c>)
 8003cee:	4293      	cmp	r3, r2
 8003cf0:	d007      	beq.n	8003d02 <TIM_Base_SetConfig+0x8a>
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	4a24      	ldr	r2, [pc, #144]	@ (8003d88 <TIM_Base_SetConfig+0x110>)
 8003cf6:	4293      	cmp	r3, r2
 8003cf8:	d003      	beq.n	8003d02 <TIM_Base_SetConfig+0x8a>
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	4a23      	ldr	r2, [pc, #140]	@ (8003d8c <TIM_Base_SetConfig+0x114>)
 8003cfe:	4293      	cmp	r3, r2
 8003d00:	d108      	bne.n	8003d14 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003d08:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003d0a:	683b      	ldr	r3, [r7, #0]
 8003d0c:	68db      	ldr	r3, [r3, #12]
 8003d0e:	68fa      	ldr	r2, [r7, #12]
 8003d10:	4313      	orrs	r3, r2
 8003d12:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003d1a:	683b      	ldr	r3, [r7, #0]
 8003d1c:	695b      	ldr	r3, [r3, #20]
 8003d1e:	4313      	orrs	r3, r2
 8003d20:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	68fa      	ldr	r2, [r7, #12]
 8003d26:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003d28:	683b      	ldr	r3, [r7, #0]
 8003d2a:	689a      	ldr	r2, [r3, #8]
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003d30:	683b      	ldr	r3, [r7, #0]
 8003d32:	681a      	ldr	r2, [r3, #0]
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	4a0e      	ldr	r2, [pc, #56]	@ (8003d74 <TIM_Base_SetConfig+0xfc>)
 8003d3c:	4293      	cmp	r3, r2
 8003d3e:	d103      	bne.n	8003d48 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003d40:	683b      	ldr	r3, [r7, #0]
 8003d42:	691a      	ldr	r2, [r3, #16]
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	2201      	movs	r2, #1
 8003d4c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	691b      	ldr	r3, [r3, #16]
 8003d52:	f003 0301 	and.w	r3, r3, #1
 8003d56:	2b01      	cmp	r3, #1
 8003d58:	d105      	bne.n	8003d66 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	691b      	ldr	r3, [r3, #16]
 8003d5e:	f023 0201 	bic.w	r2, r3, #1
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	611a      	str	r2, [r3, #16]
  }
}
 8003d66:	bf00      	nop
 8003d68:	3714      	adds	r7, #20
 8003d6a:	46bd      	mov	sp, r7
 8003d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d70:	4770      	bx	lr
 8003d72:	bf00      	nop
 8003d74:	40010000 	.word	0x40010000
 8003d78:	40000400 	.word	0x40000400
 8003d7c:	40000800 	.word	0x40000800
 8003d80:	40000c00 	.word	0x40000c00
 8003d84:	40014000 	.word	0x40014000
 8003d88:	40014400 	.word	0x40014400
 8003d8c:	40014800 	.word	0x40014800

08003d90 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003d90:	b480      	push	{r7}
 8003d92:	b087      	sub	sp, #28
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	6078      	str	r0, [r7, #4]
 8003d98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	6a1b      	ldr	r3, [r3, #32]
 8003d9e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	6a1b      	ldr	r3, [r3, #32]
 8003da4:	f023 0201 	bic.w	r2, r3, #1
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	685b      	ldr	r3, [r3, #4]
 8003db0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	699b      	ldr	r3, [r3, #24]
 8003db6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003dbe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	f023 0303 	bic.w	r3, r3, #3
 8003dc6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003dc8:	683b      	ldr	r3, [r7, #0]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	68fa      	ldr	r2, [r7, #12]
 8003dce:	4313      	orrs	r3, r2
 8003dd0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003dd2:	697b      	ldr	r3, [r7, #20]
 8003dd4:	f023 0302 	bic.w	r3, r3, #2
 8003dd8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003dda:	683b      	ldr	r3, [r7, #0]
 8003ddc:	689b      	ldr	r3, [r3, #8]
 8003dde:	697a      	ldr	r2, [r7, #20]
 8003de0:	4313      	orrs	r3, r2
 8003de2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	4a1c      	ldr	r2, [pc, #112]	@ (8003e58 <TIM_OC1_SetConfig+0xc8>)
 8003de8:	4293      	cmp	r3, r2
 8003dea:	d10c      	bne.n	8003e06 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003dec:	697b      	ldr	r3, [r7, #20]
 8003dee:	f023 0308 	bic.w	r3, r3, #8
 8003df2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003df4:	683b      	ldr	r3, [r7, #0]
 8003df6:	68db      	ldr	r3, [r3, #12]
 8003df8:	697a      	ldr	r2, [r7, #20]
 8003dfa:	4313      	orrs	r3, r2
 8003dfc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003dfe:	697b      	ldr	r3, [r7, #20]
 8003e00:	f023 0304 	bic.w	r3, r3, #4
 8003e04:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	4a13      	ldr	r2, [pc, #76]	@ (8003e58 <TIM_OC1_SetConfig+0xc8>)
 8003e0a:	4293      	cmp	r3, r2
 8003e0c:	d111      	bne.n	8003e32 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003e0e:	693b      	ldr	r3, [r7, #16]
 8003e10:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003e14:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003e16:	693b      	ldr	r3, [r7, #16]
 8003e18:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003e1c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003e1e:	683b      	ldr	r3, [r7, #0]
 8003e20:	695b      	ldr	r3, [r3, #20]
 8003e22:	693a      	ldr	r2, [r7, #16]
 8003e24:	4313      	orrs	r3, r2
 8003e26:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003e28:	683b      	ldr	r3, [r7, #0]
 8003e2a:	699b      	ldr	r3, [r3, #24]
 8003e2c:	693a      	ldr	r2, [r7, #16]
 8003e2e:	4313      	orrs	r3, r2
 8003e30:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	693a      	ldr	r2, [r7, #16]
 8003e36:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	68fa      	ldr	r2, [r7, #12]
 8003e3c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003e3e:	683b      	ldr	r3, [r7, #0]
 8003e40:	685a      	ldr	r2, [r3, #4]
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	697a      	ldr	r2, [r7, #20]
 8003e4a:	621a      	str	r2, [r3, #32]
}
 8003e4c:	bf00      	nop
 8003e4e:	371c      	adds	r7, #28
 8003e50:	46bd      	mov	sp, r7
 8003e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e56:	4770      	bx	lr
 8003e58:	40010000 	.word	0x40010000

08003e5c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003e5c:	b480      	push	{r7}
 8003e5e:	b087      	sub	sp, #28
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	6078      	str	r0, [r7, #4]
 8003e64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	6a1b      	ldr	r3, [r3, #32]
 8003e6a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	6a1b      	ldr	r3, [r3, #32]
 8003e70:	f023 0210 	bic.w	r2, r3, #16
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	685b      	ldr	r3, [r3, #4]
 8003e7c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	699b      	ldr	r3, [r3, #24]
 8003e82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003e8a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003e92:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003e94:	683b      	ldr	r3, [r7, #0]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	021b      	lsls	r3, r3, #8
 8003e9a:	68fa      	ldr	r2, [r7, #12]
 8003e9c:	4313      	orrs	r3, r2
 8003e9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003ea0:	697b      	ldr	r3, [r7, #20]
 8003ea2:	f023 0320 	bic.w	r3, r3, #32
 8003ea6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003ea8:	683b      	ldr	r3, [r7, #0]
 8003eaa:	689b      	ldr	r3, [r3, #8]
 8003eac:	011b      	lsls	r3, r3, #4
 8003eae:	697a      	ldr	r2, [r7, #20]
 8003eb0:	4313      	orrs	r3, r2
 8003eb2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	4a1e      	ldr	r2, [pc, #120]	@ (8003f30 <TIM_OC2_SetConfig+0xd4>)
 8003eb8:	4293      	cmp	r3, r2
 8003eba:	d10d      	bne.n	8003ed8 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003ebc:	697b      	ldr	r3, [r7, #20]
 8003ebe:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003ec2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003ec4:	683b      	ldr	r3, [r7, #0]
 8003ec6:	68db      	ldr	r3, [r3, #12]
 8003ec8:	011b      	lsls	r3, r3, #4
 8003eca:	697a      	ldr	r2, [r7, #20]
 8003ecc:	4313      	orrs	r3, r2
 8003ece:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003ed0:	697b      	ldr	r3, [r7, #20]
 8003ed2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003ed6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	4a15      	ldr	r2, [pc, #84]	@ (8003f30 <TIM_OC2_SetConfig+0xd4>)
 8003edc:	4293      	cmp	r3, r2
 8003ede:	d113      	bne.n	8003f08 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003ee0:	693b      	ldr	r3, [r7, #16]
 8003ee2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003ee6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003ee8:	693b      	ldr	r3, [r7, #16]
 8003eea:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003eee:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003ef0:	683b      	ldr	r3, [r7, #0]
 8003ef2:	695b      	ldr	r3, [r3, #20]
 8003ef4:	009b      	lsls	r3, r3, #2
 8003ef6:	693a      	ldr	r2, [r7, #16]
 8003ef8:	4313      	orrs	r3, r2
 8003efa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003efc:	683b      	ldr	r3, [r7, #0]
 8003efe:	699b      	ldr	r3, [r3, #24]
 8003f00:	009b      	lsls	r3, r3, #2
 8003f02:	693a      	ldr	r2, [r7, #16]
 8003f04:	4313      	orrs	r3, r2
 8003f06:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	693a      	ldr	r2, [r7, #16]
 8003f0c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	68fa      	ldr	r2, [r7, #12]
 8003f12:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003f14:	683b      	ldr	r3, [r7, #0]
 8003f16:	685a      	ldr	r2, [r3, #4]
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	697a      	ldr	r2, [r7, #20]
 8003f20:	621a      	str	r2, [r3, #32]
}
 8003f22:	bf00      	nop
 8003f24:	371c      	adds	r7, #28
 8003f26:	46bd      	mov	sp, r7
 8003f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f2c:	4770      	bx	lr
 8003f2e:	bf00      	nop
 8003f30:	40010000 	.word	0x40010000

08003f34 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003f34:	b480      	push	{r7}
 8003f36:	b087      	sub	sp, #28
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	6078      	str	r0, [r7, #4]
 8003f3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	6a1b      	ldr	r3, [r3, #32]
 8003f42:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	6a1b      	ldr	r3, [r3, #32]
 8003f48:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	685b      	ldr	r3, [r3, #4]
 8003f54:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	69db      	ldr	r3, [r3, #28]
 8003f5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003f62:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	f023 0303 	bic.w	r3, r3, #3
 8003f6a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003f6c:	683b      	ldr	r3, [r7, #0]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	68fa      	ldr	r2, [r7, #12]
 8003f72:	4313      	orrs	r3, r2
 8003f74:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003f76:	697b      	ldr	r3, [r7, #20]
 8003f78:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003f7c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003f7e:	683b      	ldr	r3, [r7, #0]
 8003f80:	689b      	ldr	r3, [r3, #8]
 8003f82:	021b      	lsls	r3, r3, #8
 8003f84:	697a      	ldr	r2, [r7, #20]
 8003f86:	4313      	orrs	r3, r2
 8003f88:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	4a1d      	ldr	r2, [pc, #116]	@ (8004004 <TIM_OC3_SetConfig+0xd0>)
 8003f8e:	4293      	cmp	r3, r2
 8003f90:	d10d      	bne.n	8003fae <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003f92:	697b      	ldr	r3, [r7, #20]
 8003f94:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003f98:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003f9a:	683b      	ldr	r3, [r7, #0]
 8003f9c:	68db      	ldr	r3, [r3, #12]
 8003f9e:	021b      	lsls	r3, r3, #8
 8003fa0:	697a      	ldr	r2, [r7, #20]
 8003fa2:	4313      	orrs	r3, r2
 8003fa4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003fa6:	697b      	ldr	r3, [r7, #20]
 8003fa8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003fac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	4a14      	ldr	r2, [pc, #80]	@ (8004004 <TIM_OC3_SetConfig+0xd0>)
 8003fb2:	4293      	cmp	r3, r2
 8003fb4:	d113      	bne.n	8003fde <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003fb6:	693b      	ldr	r3, [r7, #16]
 8003fb8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003fbc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003fbe:	693b      	ldr	r3, [r7, #16]
 8003fc0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003fc4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003fc6:	683b      	ldr	r3, [r7, #0]
 8003fc8:	695b      	ldr	r3, [r3, #20]
 8003fca:	011b      	lsls	r3, r3, #4
 8003fcc:	693a      	ldr	r2, [r7, #16]
 8003fce:	4313      	orrs	r3, r2
 8003fd0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003fd2:	683b      	ldr	r3, [r7, #0]
 8003fd4:	699b      	ldr	r3, [r3, #24]
 8003fd6:	011b      	lsls	r3, r3, #4
 8003fd8:	693a      	ldr	r2, [r7, #16]
 8003fda:	4313      	orrs	r3, r2
 8003fdc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	693a      	ldr	r2, [r7, #16]
 8003fe2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	68fa      	ldr	r2, [r7, #12]
 8003fe8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003fea:	683b      	ldr	r3, [r7, #0]
 8003fec:	685a      	ldr	r2, [r3, #4]
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	697a      	ldr	r2, [r7, #20]
 8003ff6:	621a      	str	r2, [r3, #32]
}
 8003ff8:	bf00      	nop
 8003ffa:	371c      	adds	r7, #28
 8003ffc:	46bd      	mov	sp, r7
 8003ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004002:	4770      	bx	lr
 8004004:	40010000 	.word	0x40010000

08004008 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004008:	b480      	push	{r7}
 800400a:	b087      	sub	sp, #28
 800400c:	af00      	add	r7, sp, #0
 800400e:	6078      	str	r0, [r7, #4]
 8004010:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	6a1b      	ldr	r3, [r3, #32]
 8004016:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	6a1b      	ldr	r3, [r3, #32]
 800401c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	685b      	ldr	r3, [r3, #4]
 8004028:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	69db      	ldr	r3, [r3, #28]
 800402e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004036:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800403e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004040:	683b      	ldr	r3, [r7, #0]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	021b      	lsls	r3, r3, #8
 8004046:	68fa      	ldr	r2, [r7, #12]
 8004048:	4313      	orrs	r3, r2
 800404a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800404c:	693b      	ldr	r3, [r7, #16]
 800404e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004052:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004054:	683b      	ldr	r3, [r7, #0]
 8004056:	689b      	ldr	r3, [r3, #8]
 8004058:	031b      	lsls	r3, r3, #12
 800405a:	693a      	ldr	r2, [r7, #16]
 800405c:	4313      	orrs	r3, r2
 800405e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	4a10      	ldr	r2, [pc, #64]	@ (80040a4 <TIM_OC4_SetConfig+0x9c>)
 8004064:	4293      	cmp	r3, r2
 8004066:	d109      	bne.n	800407c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004068:	697b      	ldr	r3, [r7, #20]
 800406a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800406e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004070:	683b      	ldr	r3, [r7, #0]
 8004072:	695b      	ldr	r3, [r3, #20]
 8004074:	019b      	lsls	r3, r3, #6
 8004076:	697a      	ldr	r2, [r7, #20]
 8004078:	4313      	orrs	r3, r2
 800407a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	697a      	ldr	r2, [r7, #20]
 8004080:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	68fa      	ldr	r2, [r7, #12]
 8004086:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004088:	683b      	ldr	r3, [r7, #0]
 800408a:	685a      	ldr	r2, [r3, #4]
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	693a      	ldr	r2, [r7, #16]
 8004094:	621a      	str	r2, [r3, #32]
}
 8004096:	bf00      	nop
 8004098:	371c      	adds	r7, #28
 800409a:	46bd      	mov	sp, r7
 800409c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a0:	4770      	bx	lr
 80040a2:	bf00      	nop
 80040a4:	40010000 	.word	0x40010000

080040a8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80040a8:	b480      	push	{r7}
 80040aa:	b087      	sub	sp, #28
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	60f8      	str	r0, [r7, #12]
 80040b0:	60b9      	str	r1, [r7, #8]
 80040b2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	6a1b      	ldr	r3, [r3, #32]
 80040b8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	6a1b      	ldr	r3, [r3, #32]
 80040be:	f023 0201 	bic.w	r2, r3, #1
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	699b      	ldr	r3, [r3, #24]
 80040ca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80040cc:	693b      	ldr	r3, [r7, #16]
 80040ce:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80040d2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	011b      	lsls	r3, r3, #4
 80040d8:	693a      	ldr	r2, [r7, #16]
 80040da:	4313      	orrs	r3, r2
 80040dc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80040de:	697b      	ldr	r3, [r7, #20]
 80040e0:	f023 030a 	bic.w	r3, r3, #10
 80040e4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80040e6:	697a      	ldr	r2, [r7, #20]
 80040e8:	68bb      	ldr	r3, [r7, #8]
 80040ea:	4313      	orrs	r3, r2
 80040ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	693a      	ldr	r2, [r7, #16]
 80040f2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	697a      	ldr	r2, [r7, #20]
 80040f8:	621a      	str	r2, [r3, #32]
}
 80040fa:	bf00      	nop
 80040fc:	371c      	adds	r7, #28
 80040fe:	46bd      	mov	sp, r7
 8004100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004104:	4770      	bx	lr

08004106 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004106:	b480      	push	{r7}
 8004108:	b087      	sub	sp, #28
 800410a:	af00      	add	r7, sp, #0
 800410c:	60f8      	str	r0, [r7, #12]
 800410e:	60b9      	str	r1, [r7, #8]
 8004110:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	6a1b      	ldr	r3, [r3, #32]
 8004116:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	6a1b      	ldr	r3, [r3, #32]
 800411c:	f023 0210 	bic.w	r2, r3, #16
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	699b      	ldr	r3, [r3, #24]
 8004128:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800412a:	693b      	ldr	r3, [r7, #16]
 800412c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004130:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	031b      	lsls	r3, r3, #12
 8004136:	693a      	ldr	r2, [r7, #16]
 8004138:	4313      	orrs	r3, r2
 800413a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800413c:	697b      	ldr	r3, [r7, #20]
 800413e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004142:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004144:	68bb      	ldr	r3, [r7, #8]
 8004146:	011b      	lsls	r3, r3, #4
 8004148:	697a      	ldr	r2, [r7, #20]
 800414a:	4313      	orrs	r3, r2
 800414c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	693a      	ldr	r2, [r7, #16]
 8004152:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	697a      	ldr	r2, [r7, #20]
 8004158:	621a      	str	r2, [r3, #32]
}
 800415a:	bf00      	nop
 800415c:	371c      	adds	r7, #28
 800415e:	46bd      	mov	sp, r7
 8004160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004164:	4770      	bx	lr

08004166 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004166:	b480      	push	{r7}
 8004168:	b085      	sub	sp, #20
 800416a:	af00      	add	r7, sp, #0
 800416c:	6078      	str	r0, [r7, #4]
 800416e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	689b      	ldr	r3, [r3, #8]
 8004174:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800417c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800417e:	683a      	ldr	r2, [r7, #0]
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	4313      	orrs	r3, r2
 8004184:	f043 0307 	orr.w	r3, r3, #7
 8004188:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	68fa      	ldr	r2, [r7, #12]
 800418e:	609a      	str	r2, [r3, #8]
}
 8004190:	bf00      	nop
 8004192:	3714      	adds	r7, #20
 8004194:	46bd      	mov	sp, r7
 8004196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800419a:	4770      	bx	lr

0800419c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800419c:	b480      	push	{r7}
 800419e:	b087      	sub	sp, #28
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	60f8      	str	r0, [r7, #12]
 80041a4:	60b9      	str	r1, [r7, #8]
 80041a6:	607a      	str	r2, [r7, #4]
 80041a8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	689b      	ldr	r3, [r3, #8]
 80041ae:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80041b0:	697b      	ldr	r3, [r7, #20]
 80041b2:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80041b6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80041b8:	683b      	ldr	r3, [r7, #0]
 80041ba:	021a      	lsls	r2, r3, #8
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	431a      	orrs	r2, r3
 80041c0:	68bb      	ldr	r3, [r7, #8]
 80041c2:	4313      	orrs	r3, r2
 80041c4:	697a      	ldr	r2, [r7, #20]
 80041c6:	4313      	orrs	r3, r2
 80041c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	697a      	ldr	r2, [r7, #20]
 80041ce:	609a      	str	r2, [r3, #8]
}
 80041d0:	bf00      	nop
 80041d2:	371c      	adds	r7, #28
 80041d4:	46bd      	mov	sp, r7
 80041d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041da:	4770      	bx	lr

080041dc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80041dc:	b480      	push	{r7}
 80041de:	b087      	sub	sp, #28
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	60f8      	str	r0, [r7, #12]
 80041e4:	60b9      	str	r1, [r7, #8]
 80041e6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80041e8:	68bb      	ldr	r3, [r7, #8]
 80041ea:	f003 031f 	and.w	r3, r3, #31
 80041ee:	2201      	movs	r2, #1
 80041f0:	fa02 f303 	lsl.w	r3, r2, r3
 80041f4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	6a1a      	ldr	r2, [r3, #32]
 80041fa:	697b      	ldr	r3, [r7, #20]
 80041fc:	43db      	mvns	r3, r3
 80041fe:	401a      	ands	r2, r3
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	6a1a      	ldr	r2, [r3, #32]
 8004208:	68bb      	ldr	r3, [r7, #8]
 800420a:	f003 031f 	and.w	r3, r3, #31
 800420e:	6879      	ldr	r1, [r7, #4]
 8004210:	fa01 f303 	lsl.w	r3, r1, r3
 8004214:	431a      	orrs	r2, r3
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	621a      	str	r2, [r3, #32]
}
 800421a:	bf00      	nop
 800421c:	371c      	adds	r7, #28
 800421e:	46bd      	mov	sp, r7
 8004220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004224:	4770      	bx	lr
	...

08004228 <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004228:	b580      	push	{r7, lr}
 800422a:	b084      	sub	sp, #16
 800422c:	af00      	add	r7, sp, #0
 800422e:	6078      	str	r0, [r7, #4]
 8004230:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004232:	683b      	ldr	r3, [r7, #0]
 8004234:	2b00      	cmp	r3, #0
 8004236:	d109      	bne.n	800424c <HAL_TIMEx_PWMN_Start+0x24>
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800423e:	b2db      	uxtb	r3, r3
 8004240:	2b01      	cmp	r3, #1
 8004242:	bf14      	ite	ne
 8004244:	2301      	movne	r3, #1
 8004246:	2300      	moveq	r3, #0
 8004248:	b2db      	uxtb	r3, r3
 800424a:	e022      	b.n	8004292 <HAL_TIMEx_PWMN_Start+0x6a>
 800424c:	683b      	ldr	r3, [r7, #0]
 800424e:	2b04      	cmp	r3, #4
 8004250:	d109      	bne.n	8004266 <HAL_TIMEx_PWMN_Start+0x3e>
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8004258:	b2db      	uxtb	r3, r3
 800425a:	2b01      	cmp	r3, #1
 800425c:	bf14      	ite	ne
 800425e:	2301      	movne	r3, #1
 8004260:	2300      	moveq	r3, #0
 8004262:	b2db      	uxtb	r3, r3
 8004264:	e015      	b.n	8004292 <HAL_TIMEx_PWMN_Start+0x6a>
 8004266:	683b      	ldr	r3, [r7, #0]
 8004268:	2b08      	cmp	r3, #8
 800426a:	d109      	bne.n	8004280 <HAL_TIMEx_PWMN_Start+0x58>
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004272:	b2db      	uxtb	r3, r3
 8004274:	2b01      	cmp	r3, #1
 8004276:	bf14      	ite	ne
 8004278:	2301      	movne	r3, #1
 800427a:	2300      	moveq	r3, #0
 800427c:	b2db      	uxtb	r3, r3
 800427e:	e008      	b.n	8004292 <HAL_TIMEx_PWMN_Start+0x6a>
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004286:	b2db      	uxtb	r3, r3
 8004288:	2b01      	cmp	r3, #1
 800428a:	bf14      	ite	ne
 800428c:	2301      	movne	r3, #1
 800428e:	2300      	moveq	r3, #0
 8004290:	b2db      	uxtb	r3, r3
 8004292:	2b00      	cmp	r3, #0
 8004294:	d001      	beq.n	800429a <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 8004296:	2301      	movs	r3, #1
 8004298:	e063      	b.n	8004362 <HAL_TIMEx_PWMN_Start+0x13a>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800429a:	683b      	ldr	r3, [r7, #0]
 800429c:	2b00      	cmp	r3, #0
 800429e:	d104      	bne.n	80042aa <HAL_TIMEx_PWMN_Start+0x82>
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	2202      	movs	r2, #2
 80042a4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80042a8:	e013      	b.n	80042d2 <HAL_TIMEx_PWMN_Start+0xaa>
 80042aa:	683b      	ldr	r3, [r7, #0]
 80042ac:	2b04      	cmp	r3, #4
 80042ae:	d104      	bne.n	80042ba <HAL_TIMEx_PWMN_Start+0x92>
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	2202      	movs	r2, #2
 80042b4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80042b8:	e00b      	b.n	80042d2 <HAL_TIMEx_PWMN_Start+0xaa>
 80042ba:	683b      	ldr	r3, [r7, #0]
 80042bc:	2b08      	cmp	r3, #8
 80042be:	d104      	bne.n	80042ca <HAL_TIMEx_PWMN_Start+0xa2>
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	2202      	movs	r2, #2
 80042c4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80042c8:	e003      	b.n	80042d2 <HAL_TIMEx_PWMN_Start+0xaa>
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	2202      	movs	r2, #2
 80042ce:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	2204      	movs	r2, #4
 80042d8:	6839      	ldr	r1, [r7, #0]
 80042da:	4618      	mov	r0, r3
 80042dc:	f000 f982 	bl	80045e4 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80042ee:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	4a1d      	ldr	r2, [pc, #116]	@ (800436c <HAL_TIMEx_PWMN_Start+0x144>)
 80042f6:	4293      	cmp	r3, r2
 80042f8:	d018      	beq.n	800432c <HAL_TIMEx_PWMN_Start+0x104>
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004302:	d013      	beq.n	800432c <HAL_TIMEx_PWMN_Start+0x104>
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	4a19      	ldr	r2, [pc, #100]	@ (8004370 <HAL_TIMEx_PWMN_Start+0x148>)
 800430a:	4293      	cmp	r3, r2
 800430c:	d00e      	beq.n	800432c <HAL_TIMEx_PWMN_Start+0x104>
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	4a18      	ldr	r2, [pc, #96]	@ (8004374 <HAL_TIMEx_PWMN_Start+0x14c>)
 8004314:	4293      	cmp	r3, r2
 8004316:	d009      	beq.n	800432c <HAL_TIMEx_PWMN_Start+0x104>
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	4a16      	ldr	r2, [pc, #88]	@ (8004378 <HAL_TIMEx_PWMN_Start+0x150>)
 800431e:	4293      	cmp	r3, r2
 8004320:	d004      	beq.n	800432c <HAL_TIMEx_PWMN_Start+0x104>
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	4a15      	ldr	r2, [pc, #84]	@ (800437c <HAL_TIMEx_PWMN_Start+0x154>)
 8004328:	4293      	cmp	r3, r2
 800432a:	d111      	bne.n	8004350 <HAL_TIMEx_PWMN_Start+0x128>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	689b      	ldr	r3, [r3, #8]
 8004332:	f003 0307 	and.w	r3, r3, #7
 8004336:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	2b06      	cmp	r3, #6
 800433c:	d010      	beq.n	8004360 <HAL_TIMEx_PWMN_Start+0x138>
    {
      __HAL_TIM_ENABLE(htim);
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	681a      	ldr	r2, [r3, #0]
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f042 0201 	orr.w	r2, r2, #1
 800434c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800434e:	e007      	b.n	8004360 <HAL_TIMEx_PWMN_Start+0x138>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	681a      	ldr	r2, [r3, #0]
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f042 0201 	orr.w	r2, r2, #1
 800435e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004360:	2300      	movs	r3, #0
}
 8004362:	4618      	mov	r0, r3
 8004364:	3710      	adds	r7, #16
 8004366:	46bd      	mov	sp, r7
 8004368:	bd80      	pop	{r7, pc}
 800436a:	bf00      	nop
 800436c:	40010000 	.word	0x40010000
 8004370:	40000400 	.word	0x40000400
 8004374:	40000800 	.word	0x40000800
 8004378:	40000c00 	.word	0x40000c00
 800437c:	40014000 	.word	0x40014000

08004380 <HAL_TIMEx_PWMN_Stop>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004380:	b580      	push	{r7, lr}
 8004382:	b082      	sub	sp, #8
 8004384:	af00      	add	r7, sp, #0
 8004386:	6078      	str	r0, [r7, #4]
 8004388:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Disable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	2200      	movs	r2, #0
 8004390:	6839      	ldr	r1, [r7, #0]
 8004392:	4618      	mov	r0, r3
 8004394:	f000 f926 	bl	80045e4 <TIM_CCxNChannelCmd>

  /* Disable the Main Output */
  __HAL_TIM_MOE_DISABLE(htim);
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	6a1a      	ldr	r2, [r3, #32]
 800439e:	f241 1311 	movw	r3, #4369	@ 0x1111
 80043a2:	4013      	ands	r3, r2
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d10f      	bne.n	80043c8 <HAL_TIMEx_PWMN_Stop+0x48>
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	6a1a      	ldr	r2, [r3, #32]
 80043ae:	f240 4344 	movw	r3, #1092	@ 0x444
 80043b2:	4013      	ands	r3, r2
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d107      	bne.n	80043c8 <HAL_TIMEx_PWMN_Stop+0x48>
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80043c6:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	6a1a      	ldr	r2, [r3, #32]
 80043ce:	f241 1311 	movw	r3, #4369	@ 0x1111
 80043d2:	4013      	ands	r3, r2
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d10f      	bne.n	80043f8 <HAL_TIMEx_PWMN_Stop+0x78>
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	6a1a      	ldr	r2, [r3, #32]
 80043de:	f240 4344 	movw	r3, #1092	@ 0x444
 80043e2:	4013      	ands	r3, r2
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d107      	bne.n	80043f8 <HAL_TIMEx_PWMN_Stop+0x78>
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	681a      	ldr	r2, [r3, #0]
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	f022 0201 	bic.w	r2, r2, #1
 80043f6:	601a      	str	r2, [r3, #0]

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80043f8:	683b      	ldr	r3, [r7, #0]
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d104      	bne.n	8004408 <HAL_TIMEx_PWMN_Stop+0x88>
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	2201      	movs	r2, #1
 8004402:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004406:	e013      	b.n	8004430 <HAL_TIMEx_PWMN_Stop+0xb0>
 8004408:	683b      	ldr	r3, [r7, #0]
 800440a:	2b04      	cmp	r3, #4
 800440c:	d104      	bne.n	8004418 <HAL_TIMEx_PWMN_Stop+0x98>
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	2201      	movs	r2, #1
 8004412:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004416:	e00b      	b.n	8004430 <HAL_TIMEx_PWMN_Stop+0xb0>
 8004418:	683b      	ldr	r3, [r7, #0]
 800441a:	2b08      	cmp	r3, #8
 800441c:	d104      	bne.n	8004428 <HAL_TIMEx_PWMN_Stop+0xa8>
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	2201      	movs	r2, #1
 8004422:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004426:	e003      	b.n	8004430 <HAL_TIMEx_PWMN_Stop+0xb0>
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	2201      	movs	r2, #1
 800442c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Return function status */
  return HAL_OK;
 8004430:	2300      	movs	r3, #0
}
 8004432:	4618      	mov	r0, r3
 8004434:	3708      	adds	r7, #8
 8004436:	46bd      	mov	sp, r7
 8004438:	bd80      	pop	{r7, pc}
	...

0800443c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800443c:	b480      	push	{r7}
 800443e:	b085      	sub	sp, #20
 8004440:	af00      	add	r7, sp, #0
 8004442:	6078      	str	r0, [r7, #4]
 8004444:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800444c:	2b01      	cmp	r3, #1
 800444e:	d101      	bne.n	8004454 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004450:	2302      	movs	r3, #2
 8004452:	e050      	b.n	80044f6 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	2201      	movs	r2, #1
 8004458:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	2202      	movs	r2, #2
 8004460:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	685b      	ldr	r3, [r3, #4]
 800446a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	689b      	ldr	r3, [r3, #8]
 8004472:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800447a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800447c:	683b      	ldr	r3, [r7, #0]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	68fa      	ldr	r2, [r7, #12]
 8004482:	4313      	orrs	r3, r2
 8004484:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	68fa      	ldr	r2, [r7, #12]
 800448c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	4a1c      	ldr	r2, [pc, #112]	@ (8004504 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004494:	4293      	cmp	r3, r2
 8004496:	d018      	beq.n	80044ca <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80044a0:	d013      	beq.n	80044ca <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	4a18      	ldr	r2, [pc, #96]	@ (8004508 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80044a8:	4293      	cmp	r3, r2
 80044aa:	d00e      	beq.n	80044ca <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	4a16      	ldr	r2, [pc, #88]	@ (800450c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80044b2:	4293      	cmp	r3, r2
 80044b4:	d009      	beq.n	80044ca <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	4a15      	ldr	r2, [pc, #84]	@ (8004510 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80044bc:	4293      	cmp	r3, r2
 80044be:	d004      	beq.n	80044ca <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	4a13      	ldr	r2, [pc, #76]	@ (8004514 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80044c6:	4293      	cmp	r3, r2
 80044c8:	d10c      	bne.n	80044e4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80044ca:	68bb      	ldr	r3, [r7, #8]
 80044cc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80044d0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80044d2:	683b      	ldr	r3, [r7, #0]
 80044d4:	685b      	ldr	r3, [r3, #4]
 80044d6:	68ba      	ldr	r2, [r7, #8]
 80044d8:	4313      	orrs	r3, r2
 80044da:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	68ba      	ldr	r2, [r7, #8]
 80044e2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	2201      	movs	r2, #1
 80044e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	2200      	movs	r2, #0
 80044f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80044f4:	2300      	movs	r3, #0
}
 80044f6:	4618      	mov	r0, r3
 80044f8:	3714      	adds	r7, #20
 80044fa:	46bd      	mov	sp, r7
 80044fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004500:	4770      	bx	lr
 8004502:	bf00      	nop
 8004504:	40010000 	.word	0x40010000
 8004508:	40000400 	.word	0x40000400
 800450c:	40000800 	.word	0x40000800
 8004510:	40000c00 	.word	0x40000c00
 8004514:	40014000 	.word	0x40014000

08004518 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004518:	b480      	push	{r7}
 800451a:	b085      	sub	sp, #20
 800451c:	af00      	add	r7, sp, #0
 800451e:	6078      	str	r0, [r7, #4]
 8004520:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004522:	2300      	movs	r3, #0
 8004524:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800452c:	2b01      	cmp	r3, #1
 800452e:	d101      	bne.n	8004534 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004530:	2302      	movs	r3, #2
 8004532:	e03d      	b.n	80045b0 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	2201      	movs	r2, #1
 8004538:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8004542:	683b      	ldr	r3, [r7, #0]
 8004544:	68db      	ldr	r3, [r3, #12]
 8004546:	4313      	orrs	r3, r2
 8004548:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004550:	683b      	ldr	r3, [r7, #0]
 8004552:	689b      	ldr	r3, [r3, #8]
 8004554:	4313      	orrs	r3, r2
 8004556:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800455e:	683b      	ldr	r3, [r7, #0]
 8004560:	685b      	ldr	r3, [r3, #4]
 8004562:	4313      	orrs	r3, r2
 8004564:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800456c:	683b      	ldr	r3, [r7, #0]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	4313      	orrs	r3, r2
 8004572:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800457a:	683b      	ldr	r3, [r7, #0]
 800457c:	691b      	ldr	r3, [r3, #16]
 800457e:	4313      	orrs	r3, r2
 8004580:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8004588:	683b      	ldr	r3, [r7, #0]
 800458a:	695b      	ldr	r3, [r3, #20]
 800458c:	4313      	orrs	r3, r2
 800458e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8004596:	683b      	ldr	r3, [r7, #0]
 8004598:	69db      	ldr	r3, [r3, #28]
 800459a:	4313      	orrs	r3, r2
 800459c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	68fa      	ldr	r2, [r7, #12]
 80045a4:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	2200      	movs	r2, #0
 80045aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80045ae:	2300      	movs	r3, #0
}
 80045b0:	4618      	mov	r0, r3
 80045b2:	3714      	adds	r7, #20
 80045b4:	46bd      	mov	sp, r7
 80045b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ba:	4770      	bx	lr

080045bc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80045bc:	b480      	push	{r7}
 80045be:	b083      	sub	sp, #12
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80045c4:	bf00      	nop
 80045c6:	370c      	adds	r7, #12
 80045c8:	46bd      	mov	sp, r7
 80045ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ce:	4770      	bx	lr

080045d0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80045d0:	b480      	push	{r7}
 80045d2:	b083      	sub	sp, #12
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80045d8:	bf00      	nop
 80045da:	370c      	adds	r7, #12
 80045dc:	46bd      	mov	sp, r7
 80045de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e2:	4770      	bx	lr

080045e4 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 80045e4:	b480      	push	{r7}
 80045e6:	b087      	sub	sp, #28
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	60f8      	str	r0, [r7, #12]
 80045ec:	60b9      	str	r1, [r7, #8]
 80045ee:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0xFU); /* 0xFU = 15 bits max shift */
 80045f0:	68bb      	ldr	r3, [r7, #8]
 80045f2:	f003 030f 	and.w	r3, r3, #15
 80045f6:	2204      	movs	r2, #4
 80045f8:	fa02 f303 	lsl.w	r3, r2, r3
 80045fc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	6a1a      	ldr	r2, [r3, #32]
 8004602:	697b      	ldr	r3, [r7, #20]
 8004604:	43db      	mvns	r3, r3
 8004606:	401a      	ands	r2, r3
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0xFU)); /* 0xFU = 15 bits max shift */
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	6a1a      	ldr	r2, [r3, #32]
 8004610:	68bb      	ldr	r3, [r7, #8]
 8004612:	f003 030f 	and.w	r3, r3, #15
 8004616:	6879      	ldr	r1, [r7, #4]
 8004618:	fa01 f303 	lsl.w	r3, r1, r3
 800461c:	431a      	orrs	r2, r3
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	621a      	str	r2, [r3, #32]
}
 8004622:	bf00      	nop
 8004624:	371c      	adds	r7, #28
 8004626:	46bd      	mov	sp, r7
 8004628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800462c:	4770      	bx	lr

0800462e <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800462e:	b580      	push	{r7, lr}
 8004630:	b082      	sub	sp, #8
 8004632:	af00      	add	r7, sp, #0
 8004634:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	2b00      	cmp	r3, #0
 800463a:	d101      	bne.n	8004640 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800463c:	2301      	movs	r3, #1
 800463e:	e042      	b.n	80046c6 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004646:	b2db      	uxtb	r3, r3
 8004648:	2b00      	cmp	r3, #0
 800464a:	d106      	bne.n	800465a <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	2200      	movs	r2, #0
 8004650:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004654:	6878      	ldr	r0, [r7, #4]
 8004656:	f7fd fcd3 	bl	8002000 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	2224      	movs	r2, #36	@ 0x24
 800465e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	68da      	ldr	r2, [r3, #12]
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004670:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004672:	6878      	ldr	r0, [r7, #4]
 8004674:	f000 f82c 	bl	80046d0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	691a      	ldr	r2, [r3, #16]
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004686:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	695a      	ldr	r2, [r3, #20]
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004696:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	68da      	ldr	r2, [r3, #12]
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80046a6:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	2200      	movs	r2, #0
 80046ac:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	2220      	movs	r2, #32
 80046b2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	2220      	movs	r2, #32
 80046ba:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	2200      	movs	r2, #0
 80046c2:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80046c4:	2300      	movs	r3, #0
}
 80046c6:	4618      	mov	r0, r3
 80046c8:	3708      	adds	r7, #8
 80046ca:	46bd      	mov	sp, r7
 80046cc:	bd80      	pop	{r7, pc}
	...

080046d0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80046d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80046d4:	b0c0      	sub	sp, #256	@ 0x100
 80046d6:	af00      	add	r7, sp, #0
 80046d8:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80046dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	691b      	ldr	r3, [r3, #16]
 80046e4:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80046e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80046ec:	68d9      	ldr	r1, [r3, #12]
 80046ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80046f2:	681a      	ldr	r2, [r3, #0]
 80046f4:	ea40 0301 	orr.w	r3, r0, r1
 80046f8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80046fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80046fe:	689a      	ldr	r2, [r3, #8]
 8004700:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004704:	691b      	ldr	r3, [r3, #16]
 8004706:	431a      	orrs	r2, r3
 8004708:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800470c:	695b      	ldr	r3, [r3, #20]
 800470e:	431a      	orrs	r2, r3
 8004710:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004714:	69db      	ldr	r3, [r3, #28]
 8004716:	4313      	orrs	r3, r2
 8004718:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800471c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	68db      	ldr	r3, [r3, #12]
 8004724:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004728:	f021 010c 	bic.w	r1, r1, #12
 800472c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004730:	681a      	ldr	r2, [r3, #0]
 8004732:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004736:	430b      	orrs	r3, r1
 8004738:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800473a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	695b      	ldr	r3, [r3, #20]
 8004742:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8004746:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800474a:	6999      	ldr	r1, [r3, #24]
 800474c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004750:	681a      	ldr	r2, [r3, #0]
 8004752:	ea40 0301 	orr.w	r3, r0, r1
 8004756:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004758:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800475c:	681a      	ldr	r2, [r3, #0]
 800475e:	4b8f      	ldr	r3, [pc, #572]	@ (800499c <UART_SetConfig+0x2cc>)
 8004760:	429a      	cmp	r2, r3
 8004762:	d005      	beq.n	8004770 <UART_SetConfig+0xa0>
 8004764:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004768:	681a      	ldr	r2, [r3, #0]
 800476a:	4b8d      	ldr	r3, [pc, #564]	@ (80049a0 <UART_SetConfig+0x2d0>)
 800476c:	429a      	cmp	r2, r3
 800476e:	d104      	bne.n	800477a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004770:	f7fe fc82 	bl	8003078 <HAL_RCC_GetPCLK2Freq>
 8004774:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004778:	e003      	b.n	8004782 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800477a:	f7fe fc69 	bl	8003050 <HAL_RCC_GetPCLK1Freq>
 800477e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004782:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004786:	69db      	ldr	r3, [r3, #28]
 8004788:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800478c:	f040 810c 	bne.w	80049a8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004790:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004794:	2200      	movs	r2, #0
 8004796:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800479a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800479e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80047a2:	4622      	mov	r2, r4
 80047a4:	462b      	mov	r3, r5
 80047a6:	1891      	adds	r1, r2, r2
 80047a8:	65b9      	str	r1, [r7, #88]	@ 0x58
 80047aa:	415b      	adcs	r3, r3
 80047ac:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80047ae:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80047b2:	4621      	mov	r1, r4
 80047b4:	eb12 0801 	adds.w	r8, r2, r1
 80047b8:	4629      	mov	r1, r5
 80047ba:	eb43 0901 	adc.w	r9, r3, r1
 80047be:	f04f 0200 	mov.w	r2, #0
 80047c2:	f04f 0300 	mov.w	r3, #0
 80047c6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80047ca:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80047ce:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80047d2:	4690      	mov	r8, r2
 80047d4:	4699      	mov	r9, r3
 80047d6:	4623      	mov	r3, r4
 80047d8:	eb18 0303 	adds.w	r3, r8, r3
 80047dc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80047e0:	462b      	mov	r3, r5
 80047e2:	eb49 0303 	adc.w	r3, r9, r3
 80047e6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80047ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80047ee:	685b      	ldr	r3, [r3, #4]
 80047f0:	2200      	movs	r2, #0
 80047f2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80047f6:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80047fa:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80047fe:	460b      	mov	r3, r1
 8004800:	18db      	adds	r3, r3, r3
 8004802:	653b      	str	r3, [r7, #80]	@ 0x50
 8004804:	4613      	mov	r3, r2
 8004806:	eb42 0303 	adc.w	r3, r2, r3
 800480a:	657b      	str	r3, [r7, #84]	@ 0x54
 800480c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004810:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004814:	f7fc fa40 	bl	8000c98 <__aeabi_uldivmod>
 8004818:	4602      	mov	r2, r0
 800481a:	460b      	mov	r3, r1
 800481c:	4b61      	ldr	r3, [pc, #388]	@ (80049a4 <UART_SetConfig+0x2d4>)
 800481e:	fba3 2302 	umull	r2, r3, r3, r2
 8004822:	095b      	lsrs	r3, r3, #5
 8004824:	011c      	lsls	r4, r3, #4
 8004826:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800482a:	2200      	movs	r2, #0
 800482c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004830:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004834:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004838:	4642      	mov	r2, r8
 800483a:	464b      	mov	r3, r9
 800483c:	1891      	adds	r1, r2, r2
 800483e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004840:	415b      	adcs	r3, r3
 8004842:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004844:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004848:	4641      	mov	r1, r8
 800484a:	eb12 0a01 	adds.w	sl, r2, r1
 800484e:	4649      	mov	r1, r9
 8004850:	eb43 0b01 	adc.w	fp, r3, r1
 8004854:	f04f 0200 	mov.w	r2, #0
 8004858:	f04f 0300 	mov.w	r3, #0
 800485c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004860:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004864:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004868:	4692      	mov	sl, r2
 800486a:	469b      	mov	fp, r3
 800486c:	4643      	mov	r3, r8
 800486e:	eb1a 0303 	adds.w	r3, sl, r3
 8004872:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004876:	464b      	mov	r3, r9
 8004878:	eb4b 0303 	adc.w	r3, fp, r3
 800487c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004880:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004884:	685b      	ldr	r3, [r3, #4]
 8004886:	2200      	movs	r2, #0
 8004888:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800488c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004890:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004894:	460b      	mov	r3, r1
 8004896:	18db      	adds	r3, r3, r3
 8004898:	643b      	str	r3, [r7, #64]	@ 0x40
 800489a:	4613      	mov	r3, r2
 800489c:	eb42 0303 	adc.w	r3, r2, r3
 80048a0:	647b      	str	r3, [r7, #68]	@ 0x44
 80048a2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80048a6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80048aa:	f7fc f9f5 	bl	8000c98 <__aeabi_uldivmod>
 80048ae:	4602      	mov	r2, r0
 80048b0:	460b      	mov	r3, r1
 80048b2:	4611      	mov	r1, r2
 80048b4:	4b3b      	ldr	r3, [pc, #236]	@ (80049a4 <UART_SetConfig+0x2d4>)
 80048b6:	fba3 2301 	umull	r2, r3, r3, r1
 80048ba:	095b      	lsrs	r3, r3, #5
 80048bc:	2264      	movs	r2, #100	@ 0x64
 80048be:	fb02 f303 	mul.w	r3, r2, r3
 80048c2:	1acb      	subs	r3, r1, r3
 80048c4:	00db      	lsls	r3, r3, #3
 80048c6:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80048ca:	4b36      	ldr	r3, [pc, #216]	@ (80049a4 <UART_SetConfig+0x2d4>)
 80048cc:	fba3 2302 	umull	r2, r3, r3, r2
 80048d0:	095b      	lsrs	r3, r3, #5
 80048d2:	005b      	lsls	r3, r3, #1
 80048d4:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80048d8:	441c      	add	r4, r3
 80048da:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80048de:	2200      	movs	r2, #0
 80048e0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80048e4:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80048e8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80048ec:	4642      	mov	r2, r8
 80048ee:	464b      	mov	r3, r9
 80048f0:	1891      	adds	r1, r2, r2
 80048f2:	63b9      	str	r1, [r7, #56]	@ 0x38
 80048f4:	415b      	adcs	r3, r3
 80048f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80048f8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80048fc:	4641      	mov	r1, r8
 80048fe:	1851      	adds	r1, r2, r1
 8004900:	6339      	str	r1, [r7, #48]	@ 0x30
 8004902:	4649      	mov	r1, r9
 8004904:	414b      	adcs	r3, r1
 8004906:	637b      	str	r3, [r7, #52]	@ 0x34
 8004908:	f04f 0200 	mov.w	r2, #0
 800490c:	f04f 0300 	mov.w	r3, #0
 8004910:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004914:	4659      	mov	r1, fp
 8004916:	00cb      	lsls	r3, r1, #3
 8004918:	4651      	mov	r1, sl
 800491a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800491e:	4651      	mov	r1, sl
 8004920:	00ca      	lsls	r2, r1, #3
 8004922:	4610      	mov	r0, r2
 8004924:	4619      	mov	r1, r3
 8004926:	4603      	mov	r3, r0
 8004928:	4642      	mov	r2, r8
 800492a:	189b      	adds	r3, r3, r2
 800492c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004930:	464b      	mov	r3, r9
 8004932:	460a      	mov	r2, r1
 8004934:	eb42 0303 	adc.w	r3, r2, r3
 8004938:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800493c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004940:	685b      	ldr	r3, [r3, #4]
 8004942:	2200      	movs	r2, #0
 8004944:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004948:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800494c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004950:	460b      	mov	r3, r1
 8004952:	18db      	adds	r3, r3, r3
 8004954:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004956:	4613      	mov	r3, r2
 8004958:	eb42 0303 	adc.w	r3, r2, r3
 800495c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800495e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004962:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8004966:	f7fc f997 	bl	8000c98 <__aeabi_uldivmod>
 800496a:	4602      	mov	r2, r0
 800496c:	460b      	mov	r3, r1
 800496e:	4b0d      	ldr	r3, [pc, #52]	@ (80049a4 <UART_SetConfig+0x2d4>)
 8004970:	fba3 1302 	umull	r1, r3, r3, r2
 8004974:	095b      	lsrs	r3, r3, #5
 8004976:	2164      	movs	r1, #100	@ 0x64
 8004978:	fb01 f303 	mul.w	r3, r1, r3
 800497c:	1ad3      	subs	r3, r2, r3
 800497e:	00db      	lsls	r3, r3, #3
 8004980:	3332      	adds	r3, #50	@ 0x32
 8004982:	4a08      	ldr	r2, [pc, #32]	@ (80049a4 <UART_SetConfig+0x2d4>)
 8004984:	fba2 2303 	umull	r2, r3, r2, r3
 8004988:	095b      	lsrs	r3, r3, #5
 800498a:	f003 0207 	and.w	r2, r3, #7
 800498e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	4422      	add	r2, r4
 8004996:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004998:	e106      	b.n	8004ba8 <UART_SetConfig+0x4d8>
 800499a:	bf00      	nop
 800499c:	40011000 	.word	0x40011000
 80049a0:	40011400 	.word	0x40011400
 80049a4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80049a8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80049ac:	2200      	movs	r2, #0
 80049ae:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80049b2:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80049b6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80049ba:	4642      	mov	r2, r8
 80049bc:	464b      	mov	r3, r9
 80049be:	1891      	adds	r1, r2, r2
 80049c0:	6239      	str	r1, [r7, #32]
 80049c2:	415b      	adcs	r3, r3
 80049c4:	627b      	str	r3, [r7, #36]	@ 0x24
 80049c6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80049ca:	4641      	mov	r1, r8
 80049cc:	1854      	adds	r4, r2, r1
 80049ce:	4649      	mov	r1, r9
 80049d0:	eb43 0501 	adc.w	r5, r3, r1
 80049d4:	f04f 0200 	mov.w	r2, #0
 80049d8:	f04f 0300 	mov.w	r3, #0
 80049dc:	00eb      	lsls	r3, r5, #3
 80049de:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80049e2:	00e2      	lsls	r2, r4, #3
 80049e4:	4614      	mov	r4, r2
 80049e6:	461d      	mov	r5, r3
 80049e8:	4643      	mov	r3, r8
 80049ea:	18e3      	adds	r3, r4, r3
 80049ec:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80049f0:	464b      	mov	r3, r9
 80049f2:	eb45 0303 	adc.w	r3, r5, r3
 80049f6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80049fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80049fe:	685b      	ldr	r3, [r3, #4]
 8004a00:	2200      	movs	r2, #0
 8004a02:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004a06:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004a0a:	f04f 0200 	mov.w	r2, #0
 8004a0e:	f04f 0300 	mov.w	r3, #0
 8004a12:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004a16:	4629      	mov	r1, r5
 8004a18:	008b      	lsls	r3, r1, #2
 8004a1a:	4621      	mov	r1, r4
 8004a1c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004a20:	4621      	mov	r1, r4
 8004a22:	008a      	lsls	r2, r1, #2
 8004a24:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004a28:	f7fc f936 	bl	8000c98 <__aeabi_uldivmod>
 8004a2c:	4602      	mov	r2, r0
 8004a2e:	460b      	mov	r3, r1
 8004a30:	4b60      	ldr	r3, [pc, #384]	@ (8004bb4 <UART_SetConfig+0x4e4>)
 8004a32:	fba3 2302 	umull	r2, r3, r3, r2
 8004a36:	095b      	lsrs	r3, r3, #5
 8004a38:	011c      	lsls	r4, r3, #4
 8004a3a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004a3e:	2200      	movs	r2, #0
 8004a40:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004a44:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004a48:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004a4c:	4642      	mov	r2, r8
 8004a4e:	464b      	mov	r3, r9
 8004a50:	1891      	adds	r1, r2, r2
 8004a52:	61b9      	str	r1, [r7, #24]
 8004a54:	415b      	adcs	r3, r3
 8004a56:	61fb      	str	r3, [r7, #28]
 8004a58:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004a5c:	4641      	mov	r1, r8
 8004a5e:	1851      	adds	r1, r2, r1
 8004a60:	6139      	str	r1, [r7, #16]
 8004a62:	4649      	mov	r1, r9
 8004a64:	414b      	adcs	r3, r1
 8004a66:	617b      	str	r3, [r7, #20]
 8004a68:	f04f 0200 	mov.w	r2, #0
 8004a6c:	f04f 0300 	mov.w	r3, #0
 8004a70:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004a74:	4659      	mov	r1, fp
 8004a76:	00cb      	lsls	r3, r1, #3
 8004a78:	4651      	mov	r1, sl
 8004a7a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004a7e:	4651      	mov	r1, sl
 8004a80:	00ca      	lsls	r2, r1, #3
 8004a82:	4610      	mov	r0, r2
 8004a84:	4619      	mov	r1, r3
 8004a86:	4603      	mov	r3, r0
 8004a88:	4642      	mov	r2, r8
 8004a8a:	189b      	adds	r3, r3, r2
 8004a8c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004a90:	464b      	mov	r3, r9
 8004a92:	460a      	mov	r2, r1
 8004a94:	eb42 0303 	adc.w	r3, r2, r3
 8004a98:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004a9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004aa0:	685b      	ldr	r3, [r3, #4]
 8004aa2:	2200      	movs	r2, #0
 8004aa4:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004aa6:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004aa8:	f04f 0200 	mov.w	r2, #0
 8004aac:	f04f 0300 	mov.w	r3, #0
 8004ab0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004ab4:	4649      	mov	r1, r9
 8004ab6:	008b      	lsls	r3, r1, #2
 8004ab8:	4641      	mov	r1, r8
 8004aba:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004abe:	4641      	mov	r1, r8
 8004ac0:	008a      	lsls	r2, r1, #2
 8004ac2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8004ac6:	f7fc f8e7 	bl	8000c98 <__aeabi_uldivmod>
 8004aca:	4602      	mov	r2, r0
 8004acc:	460b      	mov	r3, r1
 8004ace:	4611      	mov	r1, r2
 8004ad0:	4b38      	ldr	r3, [pc, #224]	@ (8004bb4 <UART_SetConfig+0x4e4>)
 8004ad2:	fba3 2301 	umull	r2, r3, r3, r1
 8004ad6:	095b      	lsrs	r3, r3, #5
 8004ad8:	2264      	movs	r2, #100	@ 0x64
 8004ada:	fb02 f303 	mul.w	r3, r2, r3
 8004ade:	1acb      	subs	r3, r1, r3
 8004ae0:	011b      	lsls	r3, r3, #4
 8004ae2:	3332      	adds	r3, #50	@ 0x32
 8004ae4:	4a33      	ldr	r2, [pc, #204]	@ (8004bb4 <UART_SetConfig+0x4e4>)
 8004ae6:	fba2 2303 	umull	r2, r3, r2, r3
 8004aea:	095b      	lsrs	r3, r3, #5
 8004aec:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004af0:	441c      	add	r4, r3
 8004af2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004af6:	2200      	movs	r2, #0
 8004af8:	673b      	str	r3, [r7, #112]	@ 0x70
 8004afa:	677a      	str	r2, [r7, #116]	@ 0x74
 8004afc:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004b00:	4642      	mov	r2, r8
 8004b02:	464b      	mov	r3, r9
 8004b04:	1891      	adds	r1, r2, r2
 8004b06:	60b9      	str	r1, [r7, #8]
 8004b08:	415b      	adcs	r3, r3
 8004b0a:	60fb      	str	r3, [r7, #12]
 8004b0c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004b10:	4641      	mov	r1, r8
 8004b12:	1851      	adds	r1, r2, r1
 8004b14:	6039      	str	r1, [r7, #0]
 8004b16:	4649      	mov	r1, r9
 8004b18:	414b      	adcs	r3, r1
 8004b1a:	607b      	str	r3, [r7, #4]
 8004b1c:	f04f 0200 	mov.w	r2, #0
 8004b20:	f04f 0300 	mov.w	r3, #0
 8004b24:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004b28:	4659      	mov	r1, fp
 8004b2a:	00cb      	lsls	r3, r1, #3
 8004b2c:	4651      	mov	r1, sl
 8004b2e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004b32:	4651      	mov	r1, sl
 8004b34:	00ca      	lsls	r2, r1, #3
 8004b36:	4610      	mov	r0, r2
 8004b38:	4619      	mov	r1, r3
 8004b3a:	4603      	mov	r3, r0
 8004b3c:	4642      	mov	r2, r8
 8004b3e:	189b      	adds	r3, r3, r2
 8004b40:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004b42:	464b      	mov	r3, r9
 8004b44:	460a      	mov	r2, r1
 8004b46:	eb42 0303 	adc.w	r3, r2, r3
 8004b4a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004b4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b50:	685b      	ldr	r3, [r3, #4]
 8004b52:	2200      	movs	r2, #0
 8004b54:	663b      	str	r3, [r7, #96]	@ 0x60
 8004b56:	667a      	str	r2, [r7, #100]	@ 0x64
 8004b58:	f04f 0200 	mov.w	r2, #0
 8004b5c:	f04f 0300 	mov.w	r3, #0
 8004b60:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004b64:	4649      	mov	r1, r9
 8004b66:	008b      	lsls	r3, r1, #2
 8004b68:	4641      	mov	r1, r8
 8004b6a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004b6e:	4641      	mov	r1, r8
 8004b70:	008a      	lsls	r2, r1, #2
 8004b72:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8004b76:	f7fc f88f 	bl	8000c98 <__aeabi_uldivmod>
 8004b7a:	4602      	mov	r2, r0
 8004b7c:	460b      	mov	r3, r1
 8004b7e:	4b0d      	ldr	r3, [pc, #52]	@ (8004bb4 <UART_SetConfig+0x4e4>)
 8004b80:	fba3 1302 	umull	r1, r3, r3, r2
 8004b84:	095b      	lsrs	r3, r3, #5
 8004b86:	2164      	movs	r1, #100	@ 0x64
 8004b88:	fb01 f303 	mul.w	r3, r1, r3
 8004b8c:	1ad3      	subs	r3, r2, r3
 8004b8e:	011b      	lsls	r3, r3, #4
 8004b90:	3332      	adds	r3, #50	@ 0x32
 8004b92:	4a08      	ldr	r2, [pc, #32]	@ (8004bb4 <UART_SetConfig+0x4e4>)
 8004b94:	fba2 2303 	umull	r2, r3, r2, r3
 8004b98:	095b      	lsrs	r3, r3, #5
 8004b9a:	f003 020f 	and.w	r2, r3, #15
 8004b9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	4422      	add	r2, r4
 8004ba6:	609a      	str	r2, [r3, #8]
}
 8004ba8:	bf00      	nop
 8004baa:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8004bae:	46bd      	mov	sp, r7
 8004bb0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004bb4:	51eb851f 	.word	0x51eb851f

08004bb8 <__cvt>:
 8004bb8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004bbc:	ec57 6b10 	vmov	r6, r7, d0
 8004bc0:	2f00      	cmp	r7, #0
 8004bc2:	460c      	mov	r4, r1
 8004bc4:	4619      	mov	r1, r3
 8004bc6:	463b      	mov	r3, r7
 8004bc8:	bfbb      	ittet	lt
 8004bca:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8004bce:	461f      	movlt	r7, r3
 8004bd0:	2300      	movge	r3, #0
 8004bd2:	232d      	movlt	r3, #45	@ 0x2d
 8004bd4:	700b      	strb	r3, [r1, #0]
 8004bd6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004bd8:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8004bdc:	4691      	mov	r9, r2
 8004bde:	f023 0820 	bic.w	r8, r3, #32
 8004be2:	bfbc      	itt	lt
 8004be4:	4632      	movlt	r2, r6
 8004be6:	4616      	movlt	r6, r2
 8004be8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8004bec:	d005      	beq.n	8004bfa <__cvt+0x42>
 8004bee:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8004bf2:	d100      	bne.n	8004bf6 <__cvt+0x3e>
 8004bf4:	3401      	adds	r4, #1
 8004bf6:	2102      	movs	r1, #2
 8004bf8:	e000      	b.n	8004bfc <__cvt+0x44>
 8004bfa:	2103      	movs	r1, #3
 8004bfc:	ab03      	add	r3, sp, #12
 8004bfe:	9301      	str	r3, [sp, #4]
 8004c00:	ab02      	add	r3, sp, #8
 8004c02:	9300      	str	r3, [sp, #0]
 8004c04:	ec47 6b10 	vmov	d0, r6, r7
 8004c08:	4653      	mov	r3, sl
 8004c0a:	4622      	mov	r2, r4
 8004c0c:	f001 f870 	bl	8005cf0 <_dtoa_r>
 8004c10:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8004c14:	4605      	mov	r5, r0
 8004c16:	d119      	bne.n	8004c4c <__cvt+0x94>
 8004c18:	f019 0f01 	tst.w	r9, #1
 8004c1c:	d00e      	beq.n	8004c3c <__cvt+0x84>
 8004c1e:	eb00 0904 	add.w	r9, r0, r4
 8004c22:	2200      	movs	r2, #0
 8004c24:	2300      	movs	r3, #0
 8004c26:	4630      	mov	r0, r6
 8004c28:	4639      	mov	r1, r7
 8004c2a:	f7fb ff55 	bl	8000ad8 <__aeabi_dcmpeq>
 8004c2e:	b108      	cbz	r0, 8004c34 <__cvt+0x7c>
 8004c30:	f8cd 900c 	str.w	r9, [sp, #12]
 8004c34:	2230      	movs	r2, #48	@ 0x30
 8004c36:	9b03      	ldr	r3, [sp, #12]
 8004c38:	454b      	cmp	r3, r9
 8004c3a:	d31e      	bcc.n	8004c7a <__cvt+0xc2>
 8004c3c:	9b03      	ldr	r3, [sp, #12]
 8004c3e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8004c40:	1b5b      	subs	r3, r3, r5
 8004c42:	4628      	mov	r0, r5
 8004c44:	6013      	str	r3, [r2, #0]
 8004c46:	b004      	add	sp, #16
 8004c48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004c4c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8004c50:	eb00 0904 	add.w	r9, r0, r4
 8004c54:	d1e5      	bne.n	8004c22 <__cvt+0x6a>
 8004c56:	7803      	ldrb	r3, [r0, #0]
 8004c58:	2b30      	cmp	r3, #48	@ 0x30
 8004c5a:	d10a      	bne.n	8004c72 <__cvt+0xba>
 8004c5c:	2200      	movs	r2, #0
 8004c5e:	2300      	movs	r3, #0
 8004c60:	4630      	mov	r0, r6
 8004c62:	4639      	mov	r1, r7
 8004c64:	f7fb ff38 	bl	8000ad8 <__aeabi_dcmpeq>
 8004c68:	b918      	cbnz	r0, 8004c72 <__cvt+0xba>
 8004c6a:	f1c4 0401 	rsb	r4, r4, #1
 8004c6e:	f8ca 4000 	str.w	r4, [sl]
 8004c72:	f8da 3000 	ldr.w	r3, [sl]
 8004c76:	4499      	add	r9, r3
 8004c78:	e7d3      	b.n	8004c22 <__cvt+0x6a>
 8004c7a:	1c59      	adds	r1, r3, #1
 8004c7c:	9103      	str	r1, [sp, #12]
 8004c7e:	701a      	strb	r2, [r3, #0]
 8004c80:	e7d9      	b.n	8004c36 <__cvt+0x7e>

08004c82 <__exponent>:
 8004c82:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004c84:	2900      	cmp	r1, #0
 8004c86:	bfba      	itte	lt
 8004c88:	4249      	neglt	r1, r1
 8004c8a:	232d      	movlt	r3, #45	@ 0x2d
 8004c8c:	232b      	movge	r3, #43	@ 0x2b
 8004c8e:	2909      	cmp	r1, #9
 8004c90:	7002      	strb	r2, [r0, #0]
 8004c92:	7043      	strb	r3, [r0, #1]
 8004c94:	dd29      	ble.n	8004cea <__exponent+0x68>
 8004c96:	f10d 0307 	add.w	r3, sp, #7
 8004c9a:	461d      	mov	r5, r3
 8004c9c:	270a      	movs	r7, #10
 8004c9e:	461a      	mov	r2, r3
 8004ca0:	fbb1 f6f7 	udiv	r6, r1, r7
 8004ca4:	fb07 1416 	mls	r4, r7, r6, r1
 8004ca8:	3430      	adds	r4, #48	@ 0x30
 8004caa:	f802 4c01 	strb.w	r4, [r2, #-1]
 8004cae:	460c      	mov	r4, r1
 8004cb0:	2c63      	cmp	r4, #99	@ 0x63
 8004cb2:	f103 33ff 	add.w	r3, r3, #4294967295
 8004cb6:	4631      	mov	r1, r6
 8004cb8:	dcf1      	bgt.n	8004c9e <__exponent+0x1c>
 8004cba:	3130      	adds	r1, #48	@ 0x30
 8004cbc:	1e94      	subs	r4, r2, #2
 8004cbe:	f803 1c01 	strb.w	r1, [r3, #-1]
 8004cc2:	1c41      	adds	r1, r0, #1
 8004cc4:	4623      	mov	r3, r4
 8004cc6:	42ab      	cmp	r3, r5
 8004cc8:	d30a      	bcc.n	8004ce0 <__exponent+0x5e>
 8004cca:	f10d 0309 	add.w	r3, sp, #9
 8004cce:	1a9b      	subs	r3, r3, r2
 8004cd0:	42ac      	cmp	r4, r5
 8004cd2:	bf88      	it	hi
 8004cd4:	2300      	movhi	r3, #0
 8004cd6:	3302      	adds	r3, #2
 8004cd8:	4403      	add	r3, r0
 8004cda:	1a18      	subs	r0, r3, r0
 8004cdc:	b003      	add	sp, #12
 8004cde:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004ce0:	f813 6b01 	ldrb.w	r6, [r3], #1
 8004ce4:	f801 6f01 	strb.w	r6, [r1, #1]!
 8004ce8:	e7ed      	b.n	8004cc6 <__exponent+0x44>
 8004cea:	2330      	movs	r3, #48	@ 0x30
 8004cec:	3130      	adds	r1, #48	@ 0x30
 8004cee:	7083      	strb	r3, [r0, #2]
 8004cf0:	70c1      	strb	r1, [r0, #3]
 8004cf2:	1d03      	adds	r3, r0, #4
 8004cf4:	e7f1      	b.n	8004cda <__exponent+0x58>
	...

08004cf8 <_printf_float>:
 8004cf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004cfc:	b08d      	sub	sp, #52	@ 0x34
 8004cfe:	460c      	mov	r4, r1
 8004d00:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8004d04:	4616      	mov	r6, r2
 8004d06:	461f      	mov	r7, r3
 8004d08:	4605      	mov	r5, r0
 8004d0a:	f000 fee9 	bl	8005ae0 <_localeconv_r>
 8004d0e:	6803      	ldr	r3, [r0, #0]
 8004d10:	9304      	str	r3, [sp, #16]
 8004d12:	4618      	mov	r0, r3
 8004d14:	f7fb fab4 	bl	8000280 <strlen>
 8004d18:	2300      	movs	r3, #0
 8004d1a:	930a      	str	r3, [sp, #40]	@ 0x28
 8004d1c:	f8d8 3000 	ldr.w	r3, [r8]
 8004d20:	9005      	str	r0, [sp, #20]
 8004d22:	3307      	adds	r3, #7
 8004d24:	f023 0307 	bic.w	r3, r3, #7
 8004d28:	f103 0208 	add.w	r2, r3, #8
 8004d2c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8004d30:	f8d4 b000 	ldr.w	fp, [r4]
 8004d34:	f8c8 2000 	str.w	r2, [r8]
 8004d38:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004d3c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8004d40:	9307      	str	r3, [sp, #28]
 8004d42:	f8cd 8018 	str.w	r8, [sp, #24]
 8004d46:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8004d4a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004d4e:	4b9c      	ldr	r3, [pc, #624]	@ (8004fc0 <_printf_float+0x2c8>)
 8004d50:	f04f 32ff 	mov.w	r2, #4294967295
 8004d54:	f7fb fef2 	bl	8000b3c <__aeabi_dcmpun>
 8004d58:	bb70      	cbnz	r0, 8004db8 <_printf_float+0xc0>
 8004d5a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004d5e:	4b98      	ldr	r3, [pc, #608]	@ (8004fc0 <_printf_float+0x2c8>)
 8004d60:	f04f 32ff 	mov.w	r2, #4294967295
 8004d64:	f7fb fecc 	bl	8000b00 <__aeabi_dcmple>
 8004d68:	bb30      	cbnz	r0, 8004db8 <_printf_float+0xc0>
 8004d6a:	2200      	movs	r2, #0
 8004d6c:	2300      	movs	r3, #0
 8004d6e:	4640      	mov	r0, r8
 8004d70:	4649      	mov	r1, r9
 8004d72:	f7fb febb 	bl	8000aec <__aeabi_dcmplt>
 8004d76:	b110      	cbz	r0, 8004d7e <_printf_float+0x86>
 8004d78:	232d      	movs	r3, #45	@ 0x2d
 8004d7a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004d7e:	4a91      	ldr	r2, [pc, #580]	@ (8004fc4 <_printf_float+0x2cc>)
 8004d80:	4b91      	ldr	r3, [pc, #580]	@ (8004fc8 <_printf_float+0x2d0>)
 8004d82:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8004d86:	bf8c      	ite	hi
 8004d88:	4690      	movhi	r8, r2
 8004d8a:	4698      	movls	r8, r3
 8004d8c:	2303      	movs	r3, #3
 8004d8e:	6123      	str	r3, [r4, #16]
 8004d90:	f02b 0304 	bic.w	r3, fp, #4
 8004d94:	6023      	str	r3, [r4, #0]
 8004d96:	f04f 0900 	mov.w	r9, #0
 8004d9a:	9700      	str	r7, [sp, #0]
 8004d9c:	4633      	mov	r3, r6
 8004d9e:	aa0b      	add	r2, sp, #44	@ 0x2c
 8004da0:	4621      	mov	r1, r4
 8004da2:	4628      	mov	r0, r5
 8004da4:	f000 f9d2 	bl	800514c <_printf_common>
 8004da8:	3001      	adds	r0, #1
 8004daa:	f040 808d 	bne.w	8004ec8 <_printf_float+0x1d0>
 8004dae:	f04f 30ff 	mov.w	r0, #4294967295
 8004db2:	b00d      	add	sp, #52	@ 0x34
 8004db4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004db8:	4642      	mov	r2, r8
 8004dba:	464b      	mov	r3, r9
 8004dbc:	4640      	mov	r0, r8
 8004dbe:	4649      	mov	r1, r9
 8004dc0:	f7fb febc 	bl	8000b3c <__aeabi_dcmpun>
 8004dc4:	b140      	cbz	r0, 8004dd8 <_printf_float+0xe0>
 8004dc6:	464b      	mov	r3, r9
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	bfbc      	itt	lt
 8004dcc:	232d      	movlt	r3, #45	@ 0x2d
 8004dce:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8004dd2:	4a7e      	ldr	r2, [pc, #504]	@ (8004fcc <_printf_float+0x2d4>)
 8004dd4:	4b7e      	ldr	r3, [pc, #504]	@ (8004fd0 <_printf_float+0x2d8>)
 8004dd6:	e7d4      	b.n	8004d82 <_printf_float+0x8a>
 8004dd8:	6863      	ldr	r3, [r4, #4]
 8004dda:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8004dde:	9206      	str	r2, [sp, #24]
 8004de0:	1c5a      	adds	r2, r3, #1
 8004de2:	d13b      	bne.n	8004e5c <_printf_float+0x164>
 8004de4:	2306      	movs	r3, #6
 8004de6:	6063      	str	r3, [r4, #4]
 8004de8:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8004dec:	2300      	movs	r3, #0
 8004dee:	6022      	str	r2, [r4, #0]
 8004df0:	9303      	str	r3, [sp, #12]
 8004df2:	ab0a      	add	r3, sp, #40	@ 0x28
 8004df4:	e9cd a301 	strd	sl, r3, [sp, #4]
 8004df8:	ab09      	add	r3, sp, #36	@ 0x24
 8004dfa:	9300      	str	r3, [sp, #0]
 8004dfc:	6861      	ldr	r1, [r4, #4]
 8004dfe:	ec49 8b10 	vmov	d0, r8, r9
 8004e02:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8004e06:	4628      	mov	r0, r5
 8004e08:	f7ff fed6 	bl	8004bb8 <__cvt>
 8004e0c:	9b06      	ldr	r3, [sp, #24]
 8004e0e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8004e10:	2b47      	cmp	r3, #71	@ 0x47
 8004e12:	4680      	mov	r8, r0
 8004e14:	d129      	bne.n	8004e6a <_printf_float+0x172>
 8004e16:	1cc8      	adds	r0, r1, #3
 8004e18:	db02      	blt.n	8004e20 <_printf_float+0x128>
 8004e1a:	6863      	ldr	r3, [r4, #4]
 8004e1c:	4299      	cmp	r1, r3
 8004e1e:	dd41      	ble.n	8004ea4 <_printf_float+0x1ac>
 8004e20:	f1aa 0a02 	sub.w	sl, sl, #2
 8004e24:	fa5f fa8a 	uxtb.w	sl, sl
 8004e28:	3901      	subs	r1, #1
 8004e2a:	4652      	mov	r2, sl
 8004e2c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8004e30:	9109      	str	r1, [sp, #36]	@ 0x24
 8004e32:	f7ff ff26 	bl	8004c82 <__exponent>
 8004e36:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8004e38:	1813      	adds	r3, r2, r0
 8004e3a:	2a01      	cmp	r2, #1
 8004e3c:	4681      	mov	r9, r0
 8004e3e:	6123      	str	r3, [r4, #16]
 8004e40:	dc02      	bgt.n	8004e48 <_printf_float+0x150>
 8004e42:	6822      	ldr	r2, [r4, #0]
 8004e44:	07d2      	lsls	r2, r2, #31
 8004e46:	d501      	bpl.n	8004e4c <_printf_float+0x154>
 8004e48:	3301      	adds	r3, #1
 8004e4a:	6123      	str	r3, [r4, #16]
 8004e4c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d0a2      	beq.n	8004d9a <_printf_float+0xa2>
 8004e54:	232d      	movs	r3, #45	@ 0x2d
 8004e56:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004e5a:	e79e      	b.n	8004d9a <_printf_float+0xa2>
 8004e5c:	9a06      	ldr	r2, [sp, #24]
 8004e5e:	2a47      	cmp	r2, #71	@ 0x47
 8004e60:	d1c2      	bne.n	8004de8 <_printf_float+0xf0>
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d1c0      	bne.n	8004de8 <_printf_float+0xf0>
 8004e66:	2301      	movs	r3, #1
 8004e68:	e7bd      	b.n	8004de6 <_printf_float+0xee>
 8004e6a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8004e6e:	d9db      	bls.n	8004e28 <_printf_float+0x130>
 8004e70:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8004e74:	d118      	bne.n	8004ea8 <_printf_float+0x1b0>
 8004e76:	2900      	cmp	r1, #0
 8004e78:	6863      	ldr	r3, [r4, #4]
 8004e7a:	dd0b      	ble.n	8004e94 <_printf_float+0x19c>
 8004e7c:	6121      	str	r1, [r4, #16]
 8004e7e:	b913      	cbnz	r3, 8004e86 <_printf_float+0x18e>
 8004e80:	6822      	ldr	r2, [r4, #0]
 8004e82:	07d0      	lsls	r0, r2, #31
 8004e84:	d502      	bpl.n	8004e8c <_printf_float+0x194>
 8004e86:	3301      	adds	r3, #1
 8004e88:	440b      	add	r3, r1
 8004e8a:	6123      	str	r3, [r4, #16]
 8004e8c:	65a1      	str	r1, [r4, #88]	@ 0x58
 8004e8e:	f04f 0900 	mov.w	r9, #0
 8004e92:	e7db      	b.n	8004e4c <_printf_float+0x154>
 8004e94:	b913      	cbnz	r3, 8004e9c <_printf_float+0x1a4>
 8004e96:	6822      	ldr	r2, [r4, #0]
 8004e98:	07d2      	lsls	r2, r2, #31
 8004e9a:	d501      	bpl.n	8004ea0 <_printf_float+0x1a8>
 8004e9c:	3302      	adds	r3, #2
 8004e9e:	e7f4      	b.n	8004e8a <_printf_float+0x192>
 8004ea0:	2301      	movs	r3, #1
 8004ea2:	e7f2      	b.n	8004e8a <_printf_float+0x192>
 8004ea4:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8004ea8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004eaa:	4299      	cmp	r1, r3
 8004eac:	db05      	blt.n	8004eba <_printf_float+0x1c2>
 8004eae:	6823      	ldr	r3, [r4, #0]
 8004eb0:	6121      	str	r1, [r4, #16]
 8004eb2:	07d8      	lsls	r0, r3, #31
 8004eb4:	d5ea      	bpl.n	8004e8c <_printf_float+0x194>
 8004eb6:	1c4b      	adds	r3, r1, #1
 8004eb8:	e7e7      	b.n	8004e8a <_printf_float+0x192>
 8004eba:	2900      	cmp	r1, #0
 8004ebc:	bfd4      	ite	le
 8004ebe:	f1c1 0202 	rsble	r2, r1, #2
 8004ec2:	2201      	movgt	r2, #1
 8004ec4:	4413      	add	r3, r2
 8004ec6:	e7e0      	b.n	8004e8a <_printf_float+0x192>
 8004ec8:	6823      	ldr	r3, [r4, #0]
 8004eca:	055a      	lsls	r2, r3, #21
 8004ecc:	d407      	bmi.n	8004ede <_printf_float+0x1e6>
 8004ece:	6923      	ldr	r3, [r4, #16]
 8004ed0:	4642      	mov	r2, r8
 8004ed2:	4631      	mov	r1, r6
 8004ed4:	4628      	mov	r0, r5
 8004ed6:	47b8      	blx	r7
 8004ed8:	3001      	adds	r0, #1
 8004eda:	d12b      	bne.n	8004f34 <_printf_float+0x23c>
 8004edc:	e767      	b.n	8004dae <_printf_float+0xb6>
 8004ede:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8004ee2:	f240 80dd 	bls.w	80050a0 <_printf_float+0x3a8>
 8004ee6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8004eea:	2200      	movs	r2, #0
 8004eec:	2300      	movs	r3, #0
 8004eee:	f7fb fdf3 	bl	8000ad8 <__aeabi_dcmpeq>
 8004ef2:	2800      	cmp	r0, #0
 8004ef4:	d033      	beq.n	8004f5e <_printf_float+0x266>
 8004ef6:	4a37      	ldr	r2, [pc, #220]	@ (8004fd4 <_printf_float+0x2dc>)
 8004ef8:	2301      	movs	r3, #1
 8004efa:	4631      	mov	r1, r6
 8004efc:	4628      	mov	r0, r5
 8004efe:	47b8      	blx	r7
 8004f00:	3001      	adds	r0, #1
 8004f02:	f43f af54 	beq.w	8004dae <_printf_float+0xb6>
 8004f06:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8004f0a:	4543      	cmp	r3, r8
 8004f0c:	db02      	blt.n	8004f14 <_printf_float+0x21c>
 8004f0e:	6823      	ldr	r3, [r4, #0]
 8004f10:	07d8      	lsls	r0, r3, #31
 8004f12:	d50f      	bpl.n	8004f34 <_printf_float+0x23c>
 8004f14:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004f18:	4631      	mov	r1, r6
 8004f1a:	4628      	mov	r0, r5
 8004f1c:	47b8      	blx	r7
 8004f1e:	3001      	adds	r0, #1
 8004f20:	f43f af45 	beq.w	8004dae <_printf_float+0xb6>
 8004f24:	f04f 0900 	mov.w	r9, #0
 8004f28:	f108 38ff 	add.w	r8, r8, #4294967295
 8004f2c:	f104 0a1a 	add.w	sl, r4, #26
 8004f30:	45c8      	cmp	r8, r9
 8004f32:	dc09      	bgt.n	8004f48 <_printf_float+0x250>
 8004f34:	6823      	ldr	r3, [r4, #0]
 8004f36:	079b      	lsls	r3, r3, #30
 8004f38:	f100 8103 	bmi.w	8005142 <_printf_float+0x44a>
 8004f3c:	68e0      	ldr	r0, [r4, #12]
 8004f3e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004f40:	4298      	cmp	r0, r3
 8004f42:	bfb8      	it	lt
 8004f44:	4618      	movlt	r0, r3
 8004f46:	e734      	b.n	8004db2 <_printf_float+0xba>
 8004f48:	2301      	movs	r3, #1
 8004f4a:	4652      	mov	r2, sl
 8004f4c:	4631      	mov	r1, r6
 8004f4e:	4628      	mov	r0, r5
 8004f50:	47b8      	blx	r7
 8004f52:	3001      	adds	r0, #1
 8004f54:	f43f af2b 	beq.w	8004dae <_printf_float+0xb6>
 8004f58:	f109 0901 	add.w	r9, r9, #1
 8004f5c:	e7e8      	b.n	8004f30 <_printf_float+0x238>
 8004f5e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	dc39      	bgt.n	8004fd8 <_printf_float+0x2e0>
 8004f64:	4a1b      	ldr	r2, [pc, #108]	@ (8004fd4 <_printf_float+0x2dc>)
 8004f66:	2301      	movs	r3, #1
 8004f68:	4631      	mov	r1, r6
 8004f6a:	4628      	mov	r0, r5
 8004f6c:	47b8      	blx	r7
 8004f6e:	3001      	adds	r0, #1
 8004f70:	f43f af1d 	beq.w	8004dae <_printf_float+0xb6>
 8004f74:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8004f78:	ea59 0303 	orrs.w	r3, r9, r3
 8004f7c:	d102      	bne.n	8004f84 <_printf_float+0x28c>
 8004f7e:	6823      	ldr	r3, [r4, #0]
 8004f80:	07d9      	lsls	r1, r3, #31
 8004f82:	d5d7      	bpl.n	8004f34 <_printf_float+0x23c>
 8004f84:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004f88:	4631      	mov	r1, r6
 8004f8a:	4628      	mov	r0, r5
 8004f8c:	47b8      	blx	r7
 8004f8e:	3001      	adds	r0, #1
 8004f90:	f43f af0d 	beq.w	8004dae <_printf_float+0xb6>
 8004f94:	f04f 0a00 	mov.w	sl, #0
 8004f98:	f104 0b1a 	add.w	fp, r4, #26
 8004f9c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004f9e:	425b      	negs	r3, r3
 8004fa0:	4553      	cmp	r3, sl
 8004fa2:	dc01      	bgt.n	8004fa8 <_printf_float+0x2b0>
 8004fa4:	464b      	mov	r3, r9
 8004fa6:	e793      	b.n	8004ed0 <_printf_float+0x1d8>
 8004fa8:	2301      	movs	r3, #1
 8004faa:	465a      	mov	r2, fp
 8004fac:	4631      	mov	r1, r6
 8004fae:	4628      	mov	r0, r5
 8004fb0:	47b8      	blx	r7
 8004fb2:	3001      	adds	r0, #1
 8004fb4:	f43f aefb 	beq.w	8004dae <_printf_float+0xb6>
 8004fb8:	f10a 0a01 	add.w	sl, sl, #1
 8004fbc:	e7ee      	b.n	8004f9c <_printf_float+0x2a4>
 8004fbe:	bf00      	nop
 8004fc0:	7fefffff 	.word	0x7fefffff
 8004fc4:	080098c4 	.word	0x080098c4
 8004fc8:	080098c0 	.word	0x080098c0
 8004fcc:	080098cc 	.word	0x080098cc
 8004fd0:	080098c8 	.word	0x080098c8
 8004fd4:	080098d0 	.word	0x080098d0
 8004fd8:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8004fda:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8004fde:	4553      	cmp	r3, sl
 8004fe0:	bfa8      	it	ge
 8004fe2:	4653      	movge	r3, sl
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	4699      	mov	r9, r3
 8004fe8:	dc36      	bgt.n	8005058 <_printf_float+0x360>
 8004fea:	f04f 0b00 	mov.w	fp, #0
 8004fee:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004ff2:	f104 021a 	add.w	r2, r4, #26
 8004ff6:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8004ff8:	9306      	str	r3, [sp, #24]
 8004ffa:	eba3 0309 	sub.w	r3, r3, r9
 8004ffe:	455b      	cmp	r3, fp
 8005000:	dc31      	bgt.n	8005066 <_printf_float+0x36e>
 8005002:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005004:	459a      	cmp	sl, r3
 8005006:	dc3a      	bgt.n	800507e <_printf_float+0x386>
 8005008:	6823      	ldr	r3, [r4, #0]
 800500a:	07da      	lsls	r2, r3, #31
 800500c:	d437      	bmi.n	800507e <_printf_float+0x386>
 800500e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005010:	ebaa 0903 	sub.w	r9, sl, r3
 8005014:	9b06      	ldr	r3, [sp, #24]
 8005016:	ebaa 0303 	sub.w	r3, sl, r3
 800501a:	4599      	cmp	r9, r3
 800501c:	bfa8      	it	ge
 800501e:	4699      	movge	r9, r3
 8005020:	f1b9 0f00 	cmp.w	r9, #0
 8005024:	dc33      	bgt.n	800508e <_printf_float+0x396>
 8005026:	f04f 0800 	mov.w	r8, #0
 800502a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800502e:	f104 0b1a 	add.w	fp, r4, #26
 8005032:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005034:	ebaa 0303 	sub.w	r3, sl, r3
 8005038:	eba3 0309 	sub.w	r3, r3, r9
 800503c:	4543      	cmp	r3, r8
 800503e:	f77f af79 	ble.w	8004f34 <_printf_float+0x23c>
 8005042:	2301      	movs	r3, #1
 8005044:	465a      	mov	r2, fp
 8005046:	4631      	mov	r1, r6
 8005048:	4628      	mov	r0, r5
 800504a:	47b8      	blx	r7
 800504c:	3001      	adds	r0, #1
 800504e:	f43f aeae 	beq.w	8004dae <_printf_float+0xb6>
 8005052:	f108 0801 	add.w	r8, r8, #1
 8005056:	e7ec      	b.n	8005032 <_printf_float+0x33a>
 8005058:	4642      	mov	r2, r8
 800505a:	4631      	mov	r1, r6
 800505c:	4628      	mov	r0, r5
 800505e:	47b8      	blx	r7
 8005060:	3001      	adds	r0, #1
 8005062:	d1c2      	bne.n	8004fea <_printf_float+0x2f2>
 8005064:	e6a3      	b.n	8004dae <_printf_float+0xb6>
 8005066:	2301      	movs	r3, #1
 8005068:	4631      	mov	r1, r6
 800506a:	4628      	mov	r0, r5
 800506c:	9206      	str	r2, [sp, #24]
 800506e:	47b8      	blx	r7
 8005070:	3001      	adds	r0, #1
 8005072:	f43f ae9c 	beq.w	8004dae <_printf_float+0xb6>
 8005076:	9a06      	ldr	r2, [sp, #24]
 8005078:	f10b 0b01 	add.w	fp, fp, #1
 800507c:	e7bb      	b.n	8004ff6 <_printf_float+0x2fe>
 800507e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005082:	4631      	mov	r1, r6
 8005084:	4628      	mov	r0, r5
 8005086:	47b8      	blx	r7
 8005088:	3001      	adds	r0, #1
 800508a:	d1c0      	bne.n	800500e <_printf_float+0x316>
 800508c:	e68f      	b.n	8004dae <_printf_float+0xb6>
 800508e:	9a06      	ldr	r2, [sp, #24]
 8005090:	464b      	mov	r3, r9
 8005092:	4442      	add	r2, r8
 8005094:	4631      	mov	r1, r6
 8005096:	4628      	mov	r0, r5
 8005098:	47b8      	blx	r7
 800509a:	3001      	adds	r0, #1
 800509c:	d1c3      	bne.n	8005026 <_printf_float+0x32e>
 800509e:	e686      	b.n	8004dae <_printf_float+0xb6>
 80050a0:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80050a4:	f1ba 0f01 	cmp.w	sl, #1
 80050a8:	dc01      	bgt.n	80050ae <_printf_float+0x3b6>
 80050aa:	07db      	lsls	r3, r3, #31
 80050ac:	d536      	bpl.n	800511c <_printf_float+0x424>
 80050ae:	2301      	movs	r3, #1
 80050b0:	4642      	mov	r2, r8
 80050b2:	4631      	mov	r1, r6
 80050b4:	4628      	mov	r0, r5
 80050b6:	47b8      	blx	r7
 80050b8:	3001      	adds	r0, #1
 80050ba:	f43f ae78 	beq.w	8004dae <_printf_float+0xb6>
 80050be:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80050c2:	4631      	mov	r1, r6
 80050c4:	4628      	mov	r0, r5
 80050c6:	47b8      	blx	r7
 80050c8:	3001      	adds	r0, #1
 80050ca:	f43f ae70 	beq.w	8004dae <_printf_float+0xb6>
 80050ce:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80050d2:	2200      	movs	r2, #0
 80050d4:	2300      	movs	r3, #0
 80050d6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80050da:	f7fb fcfd 	bl	8000ad8 <__aeabi_dcmpeq>
 80050de:	b9c0      	cbnz	r0, 8005112 <_printf_float+0x41a>
 80050e0:	4653      	mov	r3, sl
 80050e2:	f108 0201 	add.w	r2, r8, #1
 80050e6:	4631      	mov	r1, r6
 80050e8:	4628      	mov	r0, r5
 80050ea:	47b8      	blx	r7
 80050ec:	3001      	adds	r0, #1
 80050ee:	d10c      	bne.n	800510a <_printf_float+0x412>
 80050f0:	e65d      	b.n	8004dae <_printf_float+0xb6>
 80050f2:	2301      	movs	r3, #1
 80050f4:	465a      	mov	r2, fp
 80050f6:	4631      	mov	r1, r6
 80050f8:	4628      	mov	r0, r5
 80050fa:	47b8      	blx	r7
 80050fc:	3001      	adds	r0, #1
 80050fe:	f43f ae56 	beq.w	8004dae <_printf_float+0xb6>
 8005102:	f108 0801 	add.w	r8, r8, #1
 8005106:	45d0      	cmp	r8, sl
 8005108:	dbf3      	blt.n	80050f2 <_printf_float+0x3fa>
 800510a:	464b      	mov	r3, r9
 800510c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8005110:	e6df      	b.n	8004ed2 <_printf_float+0x1da>
 8005112:	f04f 0800 	mov.w	r8, #0
 8005116:	f104 0b1a 	add.w	fp, r4, #26
 800511a:	e7f4      	b.n	8005106 <_printf_float+0x40e>
 800511c:	2301      	movs	r3, #1
 800511e:	4642      	mov	r2, r8
 8005120:	e7e1      	b.n	80050e6 <_printf_float+0x3ee>
 8005122:	2301      	movs	r3, #1
 8005124:	464a      	mov	r2, r9
 8005126:	4631      	mov	r1, r6
 8005128:	4628      	mov	r0, r5
 800512a:	47b8      	blx	r7
 800512c:	3001      	adds	r0, #1
 800512e:	f43f ae3e 	beq.w	8004dae <_printf_float+0xb6>
 8005132:	f108 0801 	add.w	r8, r8, #1
 8005136:	68e3      	ldr	r3, [r4, #12]
 8005138:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800513a:	1a5b      	subs	r3, r3, r1
 800513c:	4543      	cmp	r3, r8
 800513e:	dcf0      	bgt.n	8005122 <_printf_float+0x42a>
 8005140:	e6fc      	b.n	8004f3c <_printf_float+0x244>
 8005142:	f04f 0800 	mov.w	r8, #0
 8005146:	f104 0919 	add.w	r9, r4, #25
 800514a:	e7f4      	b.n	8005136 <_printf_float+0x43e>

0800514c <_printf_common>:
 800514c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005150:	4616      	mov	r6, r2
 8005152:	4698      	mov	r8, r3
 8005154:	688a      	ldr	r2, [r1, #8]
 8005156:	690b      	ldr	r3, [r1, #16]
 8005158:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800515c:	4293      	cmp	r3, r2
 800515e:	bfb8      	it	lt
 8005160:	4613      	movlt	r3, r2
 8005162:	6033      	str	r3, [r6, #0]
 8005164:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005168:	4607      	mov	r7, r0
 800516a:	460c      	mov	r4, r1
 800516c:	b10a      	cbz	r2, 8005172 <_printf_common+0x26>
 800516e:	3301      	adds	r3, #1
 8005170:	6033      	str	r3, [r6, #0]
 8005172:	6823      	ldr	r3, [r4, #0]
 8005174:	0699      	lsls	r1, r3, #26
 8005176:	bf42      	ittt	mi
 8005178:	6833      	ldrmi	r3, [r6, #0]
 800517a:	3302      	addmi	r3, #2
 800517c:	6033      	strmi	r3, [r6, #0]
 800517e:	6825      	ldr	r5, [r4, #0]
 8005180:	f015 0506 	ands.w	r5, r5, #6
 8005184:	d106      	bne.n	8005194 <_printf_common+0x48>
 8005186:	f104 0a19 	add.w	sl, r4, #25
 800518a:	68e3      	ldr	r3, [r4, #12]
 800518c:	6832      	ldr	r2, [r6, #0]
 800518e:	1a9b      	subs	r3, r3, r2
 8005190:	42ab      	cmp	r3, r5
 8005192:	dc26      	bgt.n	80051e2 <_printf_common+0x96>
 8005194:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005198:	6822      	ldr	r2, [r4, #0]
 800519a:	3b00      	subs	r3, #0
 800519c:	bf18      	it	ne
 800519e:	2301      	movne	r3, #1
 80051a0:	0692      	lsls	r2, r2, #26
 80051a2:	d42b      	bmi.n	80051fc <_printf_common+0xb0>
 80051a4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80051a8:	4641      	mov	r1, r8
 80051aa:	4638      	mov	r0, r7
 80051ac:	47c8      	blx	r9
 80051ae:	3001      	adds	r0, #1
 80051b0:	d01e      	beq.n	80051f0 <_printf_common+0xa4>
 80051b2:	6823      	ldr	r3, [r4, #0]
 80051b4:	6922      	ldr	r2, [r4, #16]
 80051b6:	f003 0306 	and.w	r3, r3, #6
 80051ba:	2b04      	cmp	r3, #4
 80051bc:	bf02      	ittt	eq
 80051be:	68e5      	ldreq	r5, [r4, #12]
 80051c0:	6833      	ldreq	r3, [r6, #0]
 80051c2:	1aed      	subeq	r5, r5, r3
 80051c4:	68a3      	ldr	r3, [r4, #8]
 80051c6:	bf0c      	ite	eq
 80051c8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80051cc:	2500      	movne	r5, #0
 80051ce:	4293      	cmp	r3, r2
 80051d0:	bfc4      	itt	gt
 80051d2:	1a9b      	subgt	r3, r3, r2
 80051d4:	18ed      	addgt	r5, r5, r3
 80051d6:	2600      	movs	r6, #0
 80051d8:	341a      	adds	r4, #26
 80051da:	42b5      	cmp	r5, r6
 80051dc:	d11a      	bne.n	8005214 <_printf_common+0xc8>
 80051de:	2000      	movs	r0, #0
 80051e0:	e008      	b.n	80051f4 <_printf_common+0xa8>
 80051e2:	2301      	movs	r3, #1
 80051e4:	4652      	mov	r2, sl
 80051e6:	4641      	mov	r1, r8
 80051e8:	4638      	mov	r0, r7
 80051ea:	47c8      	blx	r9
 80051ec:	3001      	adds	r0, #1
 80051ee:	d103      	bne.n	80051f8 <_printf_common+0xac>
 80051f0:	f04f 30ff 	mov.w	r0, #4294967295
 80051f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80051f8:	3501      	adds	r5, #1
 80051fa:	e7c6      	b.n	800518a <_printf_common+0x3e>
 80051fc:	18e1      	adds	r1, r4, r3
 80051fe:	1c5a      	adds	r2, r3, #1
 8005200:	2030      	movs	r0, #48	@ 0x30
 8005202:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005206:	4422      	add	r2, r4
 8005208:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800520c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005210:	3302      	adds	r3, #2
 8005212:	e7c7      	b.n	80051a4 <_printf_common+0x58>
 8005214:	2301      	movs	r3, #1
 8005216:	4622      	mov	r2, r4
 8005218:	4641      	mov	r1, r8
 800521a:	4638      	mov	r0, r7
 800521c:	47c8      	blx	r9
 800521e:	3001      	adds	r0, #1
 8005220:	d0e6      	beq.n	80051f0 <_printf_common+0xa4>
 8005222:	3601      	adds	r6, #1
 8005224:	e7d9      	b.n	80051da <_printf_common+0x8e>
	...

08005228 <_printf_i>:
 8005228:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800522c:	7e0f      	ldrb	r7, [r1, #24]
 800522e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005230:	2f78      	cmp	r7, #120	@ 0x78
 8005232:	4691      	mov	r9, r2
 8005234:	4680      	mov	r8, r0
 8005236:	460c      	mov	r4, r1
 8005238:	469a      	mov	sl, r3
 800523a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800523e:	d807      	bhi.n	8005250 <_printf_i+0x28>
 8005240:	2f62      	cmp	r7, #98	@ 0x62
 8005242:	d80a      	bhi.n	800525a <_printf_i+0x32>
 8005244:	2f00      	cmp	r7, #0
 8005246:	f000 80d1 	beq.w	80053ec <_printf_i+0x1c4>
 800524a:	2f58      	cmp	r7, #88	@ 0x58
 800524c:	f000 80b8 	beq.w	80053c0 <_printf_i+0x198>
 8005250:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005254:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005258:	e03a      	b.n	80052d0 <_printf_i+0xa8>
 800525a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800525e:	2b15      	cmp	r3, #21
 8005260:	d8f6      	bhi.n	8005250 <_printf_i+0x28>
 8005262:	a101      	add	r1, pc, #4	@ (adr r1, 8005268 <_printf_i+0x40>)
 8005264:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005268:	080052c1 	.word	0x080052c1
 800526c:	080052d5 	.word	0x080052d5
 8005270:	08005251 	.word	0x08005251
 8005274:	08005251 	.word	0x08005251
 8005278:	08005251 	.word	0x08005251
 800527c:	08005251 	.word	0x08005251
 8005280:	080052d5 	.word	0x080052d5
 8005284:	08005251 	.word	0x08005251
 8005288:	08005251 	.word	0x08005251
 800528c:	08005251 	.word	0x08005251
 8005290:	08005251 	.word	0x08005251
 8005294:	080053d3 	.word	0x080053d3
 8005298:	080052ff 	.word	0x080052ff
 800529c:	0800538d 	.word	0x0800538d
 80052a0:	08005251 	.word	0x08005251
 80052a4:	08005251 	.word	0x08005251
 80052a8:	080053f5 	.word	0x080053f5
 80052ac:	08005251 	.word	0x08005251
 80052b0:	080052ff 	.word	0x080052ff
 80052b4:	08005251 	.word	0x08005251
 80052b8:	08005251 	.word	0x08005251
 80052bc:	08005395 	.word	0x08005395
 80052c0:	6833      	ldr	r3, [r6, #0]
 80052c2:	1d1a      	adds	r2, r3, #4
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	6032      	str	r2, [r6, #0]
 80052c8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80052cc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80052d0:	2301      	movs	r3, #1
 80052d2:	e09c      	b.n	800540e <_printf_i+0x1e6>
 80052d4:	6833      	ldr	r3, [r6, #0]
 80052d6:	6820      	ldr	r0, [r4, #0]
 80052d8:	1d19      	adds	r1, r3, #4
 80052da:	6031      	str	r1, [r6, #0]
 80052dc:	0606      	lsls	r6, r0, #24
 80052de:	d501      	bpl.n	80052e4 <_printf_i+0xbc>
 80052e0:	681d      	ldr	r5, [r3, #0]
 80052e2:	e003      	b.n	80052ec <_printf_i+0xc4>
 80052e4:	0645      	lsls	r5, r0, #25
 80052e6:	d5fb      	bpl.n	80052e0 <_printf_i+0xb8>
 80052e8:	f9b3 5000 	ldrsh.w	r5, [r3]
 80052ec:	2d00      	cmp	r5, #0
 80052ee:	da03      	bge.n	80052f8 <_printf_i+0xd0>
 80052f0:	232d      	movs	r3, #45	@ 0x2d
 80052f2:	426d      	negs	r5, r5
 80052f4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80052f8:	4858      	ldr	r0, [pc, #352]	@ (800545c <_printf_i+0x234>)
 80052fa:	230a      	movs	r3, #10
 80052fc:	e011      	b.n	8005322 <_printf_i+0xfa>
 80052fe:	6821      	ldr	r1, [r4, #0]
 8005300:	6833      	ldr	r3, [r6, #0]
 8005302:	0608      	lsls	r0, r1, #24
 8005304:	f853 5b04 	ldr.w	r5, [r3], #4
 8005308:	d402      	bmi.n	8005310 <_printf_i+0xe8>
 800530a:	0649      	lsls	r1, r1, #25
 800530c:	bf48      	it	mi
 800530e:	b2ad      	uxthmi	r5, r5
 8005310:	2f6f      	cmp	r7, #111	@ 0x6f
 8005312:	4852      	ldr	r0, [pc, #328]	@ (800545c <_printf_i+0x234>)
 8005314:	6033      	str	r3, [r6, #0]
 8005316:	bf14      	ite	ne
 8005318:	230a      	movne	r3, #10
 800531a:	2308      	moveq	r3, #8
 800531c:	2100      	movs	r1, #0
 800531e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005322:	6866      	ldr	r6, [r4, #4]
 8005324:	60a6      	str	r6, [r4, #8]
 8005326:	2e00      	cmp	r6, #0
 8005328:	db05      	blt.n	8005336 <_printf_i+0x10e>
 800532a:	6821      	ldr	r1, [r4, #0]
 800532c:	432e      	orrs	r6, r5
 800532e:	f021 0104 	bic.w	r1, r1, #4
 8005332:	6021      	str	r1, [r4, #0]
 8005334:	d04b      	beq.n	80053ce <_printf_i+0x1a6>
 8005336:	4616      	mov	r6, r2
 8005338:	fbb5 f1f3 	udiv	r1, r5, r3
 800533c:	fb03 5711 	mls	r7, r3, r1, r5
 8005340:	5dc7      	ldrb	r7, [r0, r7]
 8005342:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005346:	462f      	mov	r7, r5
 8005348:	42bb      	cmp	r3, r7
 800534a:	460d      	mov	r5, r1
 800534c:	d9f4      	bls.n	8005338 <_printf_i+0x110>
 800534e:	2b08      	cmp	r3, #8
 8005350:	d10b      	bne.n	800536a <_printf_i+0x142>
 8005352:	6823      	ldr	r3, [r4, #0]
 8005354:	07df      	lsls	r7, r3, #31
 8005356:	d508      	bpl.n	800536a <_printf_i+0x142>
 8005358:	6923      	ldr	r3, [r4, #16]
 800535a:	6861      	ldr	r1, [r4, #4]
 800535c:	4299      	cmp	r1, r3
 800535e:	bfde      	ittt	le
 8005360:	2330      	movle	r3, #48	@ 0x30
 8005362:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005366:	f106 36ff 	addle.w	r6, r6, #4294967295
 800536a:	1b92      	subs	r2, r2, r6
 800536c:	6122      	str	r2, [r4, #16]
 800536e:	f8cd a000 	str.w	sl, [sp]
 8005372:	464b      	mov	r3, r9
 8005374:	aa03      	add	r2, sp, #12
 8005376:	4621      	mov	r1, r4
 8005378:	4640      	mov	r0, r8
 800537a:	f7ff fee7 	bl	800514c <_printf_common>
 800537e:	3001      	adds	r0, #1
 8005380:	d14a      	bne.n	8005418 <_printf_i+0x1f0>
 8005382:	f04f 30ff 	mov.w	r0, #4294967295
 8005386:	b004      	add	sp, #16
 8005388:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800538c:	6823      	ldr	r3, [r4, #0]
 800538e:	f043 0320 	orr.w	r3, r3, #32
 8005392:	6023      	str	r3, [r4, #0]
 8005394:	4832      	ldr	r0, [pc, #200]	@ (8005460 <_printf_i+0x238>)
 8005396:	2778      	movs	r7, #120	@ 0x78
 8005398:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800539c:	6823      	ldr	r3, [r4, #0]
 800539e:	6831      	ldr	r1, [r6, #0]
 80053a0:	061f      	lsls	r7, r3, #24
 80053a2:	f851 5b04 	ldr.w	r5, [r1], #4
 80053a6:	d402      	bmi.n	80053ae <_printf_i+0x186>
 80053a8:	065f      	lsls	r7, r3, #25
 80053aa:	bf48      	it	mi
 80053ac:	b2ad      	uxthmi	r5, r5
 80053ae:	6031      	str	r1, [r6, #0]
 80053b0:	07d9      	lsls	r1, r3, #31
 80053b2:	bf44      	itt	mi
 80053b4:	f043 0320 	orrmi.w	r3, r3, #32
 80053b8:	6023      	strmi	r3, [r4, #0]
 80053ba:	b11d      	cbz	r5, 80053c4 <_printf_i+0x19c>
 80053bc:	2310      	movs	r3, #16
 80053be:	e7ad      	b.n	800531c <_printf_i+0xf4>
 80053c0:	4826      	ldr	r0, [pc, #152]	@ (800545c <_printf_i+0x234>)
 80053c2:	e7e9      	b.n	8005398 <_printf_i+0x170>
 80053c4:	6823      	ldr	r3, [r4, #0]
 80053c6:	f023 0320 	bic.w	r3, r3, #32
 80053ca:	6023      	str	r3, [r4, #0]
 80053cc:	e7f6      	b.n	80053bc <_printf_i+0x194>
 80053ce:	4616      	mov	r6, r2
 80053d0:	e7bd      	b.n	800534e <_printf_i+0x126>
 80053d2:	6833      	ldr	r3, [r6, #0]
 80053d4:	6825      	ldr	r5, [r4, #0]
 80053d6:	6961      	ldr	r1, [r4, #20]
 80053d8:	1d18      	adds	r0, r3, #4
 80053da:	6030      	str	r0, [r6, #0]
 80053dc:	062e      	lsls	r6, r5, #24
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	d501      	bpl.n	80053e6 <_printf_i+0x1be>
 80053e2:	6019      	str	r1, [r3, #0]
 80053e4:	e002      	b.n	80053ec <_printf_i+0x1c4>
 80053e6:	0668      	lsls	r0, r5, #25
 80053e8:	d5fb      	bpl.n	80053e2 <_printf_i+0x1ba>
 80053ea:	8019      	strh	r1, [r3, #0]
 80053ec:	2300      	movs	r3, #0
 80053ee:	6123      	str	r3, [r4, #16]
 80053f0:	4616      	mov	r6, r2
 80053f2:	e7bc      	b.n	800536e <_printf_i+0x146>
 80053f4:	6833      	ldr	r3, [r6, #0]
 80053f6:	1d1a      	adds	r2, r3, #4
 80053f8:	6032      	str	r2, [r6, #0]
 80053fa:	681e      	ldr	r6, [r3, #0]
 80053fc:	6862      	ldr	r2, [r4, #4]
 80053fe:	2100      	movs	r1, #0
 8005400:	4630      	mov	r0, r6
 8005402:	f7fa feed 	bl	80001e0 <memchr>
 8005406:	b108      	cbz	r0, 800540c <_printf_i+0x1e4>
 8005408:	1b80      	subs	r0, r0, r6
 800540a:	6060      	str	r0, [r4, #4]
 800540c:	6863      	ldr	r3, [r4, #4]
 800540e:	6123      	str	r3, [r4, #16]
 8005410:	2300      	movs	r3, #0
 8005412:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005416:	e7aa      	b.n	800536e <_printf_i+0x146>
 8005418:	6923      	ldr	r3, [r4, #16]
 800541a:	4632      	mov	r2, r6
 800541c:	4649      	mov	r1, r9
 800541e:	4640      	mov	r0, r8
 8005420:	47d0      	blx	sl
 8005422:	3001      	adds	r0, #1
 8005424:	d0ad      	beq.n	8005382 <_printf_i+0x15a>
 8005426:	6823      	ldr	r3, [r4, #0]
 8005428:	079b      	lsls	r3, r3, #30
 800542a:	d413      	bmi.n	8005454 <_printf_i+0x22c>
 800542c:	68e0      	ldr	r0, [r4, #12]
 800542e:	9b03      	ldr	r3, [sp, #12]
 8005430:	4298      	cmp	r0, r3
 8005432:	bfb8      	it	lt
 8005434:	4618      	movlt	r0, r3
 8005436:	e7a6      	b.n	8005386 <_printf_i+0x15e>
 8005438:	2301      	movs	r3, #1
 800543a:	4632      	mov	r2, r6
 800543c:	4649      	mov	r1, r9
 800543e:	4640      	mov	r0, r8
 8005440:	47d0      	blx	sl
 8005442:	3001      	adds	r0, #1
 8005444:	d09d      	beq.n	8005382 <_printf_i+0x15a>
 8005446:	3501      	adds	r5, #1
 8005448:	68e3      	ldr	r3, [r4, #12]
 800544a:	9903      	ldr	r1, [sp, #12]
 800544c:	1a5b      	subs	r3, r3, r1
 800544e:	42ab      	cmp	r3, r5
 8005450:	dcf2      	bgt.n	8005438 <_printf_i+0x210>
 8005452:	e7eb      	b.n	800542c <_printf_i+0x204>
 8005454:	2500      	movs	r5, #0
 8005456:	f104 0619 	add.w	r6, r4, #25
 800545a:	e7f5      	b.n	8005448 <_printf_i+0x220>
 800545c:	080098d2 	.word	0x080098d2
 8005460:	080098e3 	.word	0x080098e3

08005464 <_scanf_float>:
 8005464:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005468:	b087      	sub	sp, #28
 800546a:	4691      	mov	r9, r2
 800546c:	9303      	str	r3, [sp, #12]
 800546e:	688b      	ldr	r3, [r1, #8]
 8005470:	1e5a      	subs	r2, r3, #1
 8005472:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8005476:	bf81      	itttt	hi
 8005478:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800547c:	eb03 0b05 	addhi.w	fp, r3, r5
 8005480:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8005484:	608b      	strhi	r3, [r1, #8]
 8005486:	680b      	ldr	r3, [r1, #0]
 8005488:	460a      	mov	r2, r1
 800548a:	f04f 0500 	mov.w	r5, #0
 800548e:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8005492:	f842 3b1c 	str.w	r3, [r2], #28
 8005496:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800549a:	4680      	mov	r8, r0
 800549c:	460c      	mov	r4, r1
 800549e:	bf98      	it	ls
 80054a0:	f04f 0b00 	movls.w	fp, #0
 80054a4:	9201      	str	r2, [sp, #4]
 80054a6:	4616      	mov	r6, r2
 80054a8:	46aa      	mov	sl, r5
 80054aa:	462f      	mov	r7, r5
 80054ac:	9502      	str	r5, [sp, #8]
 80054ae:	68a2      	ldr	r2, [r4, #8]
 80054b0:	b15a      	cbz	r2, 80054ca <_scanf_float+0x66>
 80054b2:	f8d9 3000 	ldr.w	r3, [r9]
 80054b6:	781b      	ldrb	r3, [r3, #0]
 80054b8:	2b4e      	cmp	r3, #78	@ 0x4e
 80054ba:	d863      	bhi.n	8005584 <_scanf_float+0x120>
 80054bc:	2b40      	cmp	r3, #64	@ 0x40
 80054be:	d83b      	bhi.n	8005538 <_scanf_float+0xd4>
 80054c0:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 80054c4:	b2c8      	uxtb	r0, r1
 80054c6:	280e      	cmp	r0, #14
 80054c8:	d939      	bls.n	800553e <_scanf_float+0xda>
 80054ca:	b11f      	cbz	r7, 80054d4 <_scanf_float+0x70>
 80054cc:	6823      	ldr	r3, [r4, #0]
 80054ce:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80054d2:	6023      	str	r3, [r4, #0]
 80054d4:	f10a 3aff 	add.w	sl, sl, #4294967295
 80054d8:	f1ba 0f01 	cmp.w	sl, #1
 80054dc:	f200 8114 	bhi.w	8005708 <_scanf_float+0x2a4>
 80054e0:	9b01      	ldr	r3, [sp, #4]
 80054e2:	429e      	cmp	r6, r3
 80054e4:	f200 8105 	bhi.w	80056f2 <_scanf_float+0x28e>
 80054e8:	2001      	movs	r0, #1
 80054ea:	b007      	add	sp, #28
 80054ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80054f0:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 80054f4:	2a0d      	cmp	r2, #13
 80054f6:	d8e8      	bhi.n	80054ca <_scanf_float+0x66>
 80054f8:	a101      	add	r1, pc, #4	@ (adr r1, 8005500 <_scanf_float+0x9c>)
 80054fa:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80054fe:	bf00      	nop
 8005500:	08005649 	.word	0x08005649
 8005504:	080054cb 	.word	0x080054cb
 8005508:	080054cb 	.word	0x080054cb
 800550c:	080054cb 	.word	0x080054cb
 8005510:	080056a5 	.word	0x080056a5
 8005514:	0800567f 	.word	0x0800567f
 8005518:	080054cb 	.word	0x080054cb
 800551c:	080054cb 	.word	0x080054cb
 8005520:	08005657 	.word	0x08005657
 8005524:	080054cb 	.word	0x080054cb
 8005528:	080054cb 	.word	0x080054cb
 800552c:	080054cb 	.word	0x080054cb
 8005530:	080054cb 	.word	0x080054cb
 8005534:	08005613 	.word	0x08005613
 8005538:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 800553c:	e7da      	b.n	80054f4 <_scanf_float+0x90>
 800553e:	290e      	cmp	r1, #14
 8005540:	d8c3      	bhi.n	80054ca <_scanf_float+0x66>
 8005542:	a001      	add	r0, pc, #4	@ (adr r0, 8005548 <_scanf_float+0xe4>)
 8005544:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8005548:	08005603 	.word	0x08005603
 800554c:	080054cb 	.word	0x080054cb
 8005550:	08005603 	.word	0x08005603
 8005554:	08005693 	.word	0x08005693
 8005558:	080054cb 	.word	0x080054cb
 800555c:	080055a5 	.word	0x080055a5
 8005560:	080055e9 	.word	0x080055e9
 8005564:	080055e9 	.word	0x080055e9
 8005568:	080055e9 	.word	0x080055e9
 800556c:	080055e9 	.word	0x080055e9
 8005570:	080055e9 	.word	0x080055e9
 8005574:	080055e9 	.word	0x080055e9
 8005578:	080055e9 	.word	0x080055e9
 800557c:	080055e9 	.word	0x080055e9
 8005580:	080055e9 	.word	0x080055e9
 8005584:	2b6e      	cmp	r3, #110	@ 0x6e
 8005586:	d809      	bhi.n	800559c <_scanf_float+0x138>
 8005588:	2b60      	cmp	r3, #96	@ 0x60
 800558a:	d8b1      	bhi.n	80054f0 <_scanf_float+0x8c>
 800558c:	2b54      	cmp	r3, #84	@ 0x54
 800558e:	d07b      	beq.n	8005688 <_scanf_float+0x224>
 8005590:	2b59      	cmp	r3, #89	@ 0x59
 8005592:	d19a      	bne.n	80054ca <_scanf_float+0x66>
 8005594:	2d07      	cmp	r5, #7
 8005596:	d198      	bne.n	80054ca <_scanf_float+0x66>
 8005598:	2508      	movs	r5, #8
 800559a:	e02f      	b.n	80055fc <_scanf_float+0x198>
 800559c:	2b74      	cmp	r3, #116	@ 0x74
 800559e:	d073      	beq.n	8005688 <_scanf_float+0x224>
 80055a0:	2b79      	cmp	r3, #121	@ 0x79
 80055a2:	e7f6      	b.n	8005592 <_scanf_float+0x12e>
 80055a4:	6821      	ldr	r1, [r4, #0]
 80055a6:	05c8      	lsls	r0, r1, #23
 80055a8:	d51e      	bpl.n	80055e8 <_scanf_float+0x184>
 80055aa:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 80055ae:	6021      	str	r1, [r4, #0]
 80055b0:	3701      	adds	r7, #1
 80055b2:	f1bb 0f00 	cmp.w	fp, #0
 80055b6:	d003      	beq.n	80055c0 <_scanf_float+0x15c>
 80055b8:	3201      	adds	r2, #1
 80055ba:	f10b 3bff 	add.w	fp, fp, #4294967295
 80055be:	60a2      	str	r2, [r4, #8]
 80055c0:	68a3      	ldr	r3, [r4, #8]
 80055c2:	3b01      	subs	r3, #1
 80055c4:	60a3      	str	r3, [r4, #8]
 80055c6:	6923      	ldr	r3, [r4, #16]
 80055c8:	3301      	adds	r3, #1
 80055ca:	6123      	str	r3, [r4, #16]
 80055cc:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80055d0:	3b01      	subs	r3, #1
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	f8c9 3004 	str.w	r3, [r9, #4]
 80055d8:	f340 8082 	ble.w	80056e0 <_scanf_float+0x27c>
 80055dc:	f8d9 3000 	ldr.w	r3, [r9]
 80055e0:	3301      	adds	r3, #1
 80055e2:	f8c9 3000 	str.w	r3, [r9]
 80055e6:	e762      	b.n	80054ae <_scanf_float+0x4a>
 80055e8:	eb1a 0105 	adds.w	r1, sl, r5
 80055ec:	f47f af6d 	bne.w	80054ca <_scanf_float+0x66>
 80055f0:	6822      	ldr	r2, [r4, #0]
 80055f2:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 80055f6:	6022      	str	r2, [r4, #0]
 80055f8:	460d      	mov	r5, r1
 80055fa:	468a      	mov	sl, r1
 80055fc:	f806 3b01 	strb.w	r3, [r6], #1
 8005600:	e7de      	b.n	80055c0 <_scanf_float+0x15c>
 8005602:	6822      	ldr	r2, [r4, #0]
 8005604:	0610      	lsls	r0, r2, #24
 8005606:	f57f af60 	bpl.w	80054ca <_scanf_float+0x66>
 800560a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800560e:	6022      	str	r2, [r4, #0]
 8005610:	e7f4      	b.n	80055fc <_scanf_float+0x198>
 8005612:	f1ba 0f00 	cmp.w	sl, #0
 8005616:	d10c      	bne.n	8005632 <_scanf_float+0x1ce>
 8005618:	b977      	cbnz	r7, 8005638 <_scanf_float+0x1d4>
 800561a:	6822      	ldr	r2, [r4, #0]
 800561c:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8005620:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8005624:	d108      	bne.n	8005638 <_scanf_float+0x1d4>
 8005626:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 800562a:	6022      	str	r2, [r4, #0]
 800562c:	f04f 0a01 	mov.w	sl, #1
 8005630:	e7e4      	b.n	80055fc <_scanf_float+0x198>
 8005632:	f1ba 0f02 	cmp.w	sl, #2
 8005636:	d050      	beq.n	80056da <_scanf_float+0x276>
 8005638:	2d01      	cmp	r5, #1
 800563a:	d002      	beq.n	8005642 <_scanf_float+0x1de>
 800563c:	2d04      	cmp	r5, #4
 800563e:	f47f af44 	bne.w	80054ca <_scanf_float+0x66>
 8005642:	3501      	adds	r5, #1
 8005644:	b2ed      	uxtb	r5, r5
 8005646:	e7d9      	b.n	80055fc <_scanf_float+0x198>
 8005648:	f1ba 0f01 	cmp.w	sl, #1
 800564c:	f47f af3d 	bne.w	80054ca <_scanf_float+0x66>
 8005650:	f04f 0a02 	mov.w	sl, #2
 8005654:	e7d2      	b.n	80055fc <_scanf_float+0x198>
 8005656:	b975      	cbnz	r5, 8005676 <_scanf_float+0x212>
 8005658:	2f00      	cmp	r7, #0
 800565a:	f47f af37 	bne.w	80054cc <_scanf_float+0x68>
 800565e:	6822      	ldr	r2, [r4, #0]
 8005660:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8005664:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8005668:	f040 8103 	bne.w	8005872 <_scanf_float+0x40e>
 800566c:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8005670:	6022      	str	r2, [r4, #0]
 8005672:	2501      	movs	r5, #1
 8005674:	e7c2      	b.n	80055fc <_scanf_float+0x198>
 8005676:	2d03      	cmp	r5, #3
 8005678:	d0e3      	beq.n	8005642 <_scanf_float+0x1de>
 800567a:	2d05      	cmp	r5, #5
 800567c:	e7df      	b.n	800563e <_scanf_float+0x1da>
 800567e:	2d02      	cmp	r5, #2
 8005680:	f47f af23 	bne.w	80054ca <_scanf_float+0x66>
 8005684:	2503      	movs	r5, #3
 8005686:	e7b9      	b.n	80055fc <_scanf_float+0x198>
 8005688:	2d06      	cmp	r5, #6
 800568a:	f47f af1e 	bne.w	80054ca <_scanf_float+0x66>
 800568e:	2507      	movs	r5, #7
 8005690:	e7b4      	b.n	80055fc <_scanf_float+0x198>
 8005692:	6822      	ldr	r2, [r4, #0]
 8005694:	0591      	lsls	r1, r2, #22
 8005696:	f57f af18 	bpl.w	80054ca <_scanf_float+0x66>
 800569a:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800569e:	6022      	str	r2, [r4, #0]
 80056a0:	9702      	str	r7, [sp, #8]
 80056a2:	e7ab      	b.n	80055fc <_scanf_float+0x198>
 80056a4:	6822      	ldr	r2, [r4, #0]
 80056a6:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 80056aa:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 80056ae:	d005      	beq.n	80056bc <_scanf_float+0x258>
 80056b0:	0550      	lsls	r0, r2, #21
 80056b2:	f57f af0a 	bpl.w	80054ca <_scanf_float+0x66>
 80056b6:	2f00      	cmp	r7, #0
 80056b8:	f000 80db 	beq.w	8005872 <_scanf_float+0x40e>
 80056bc:	0591      	lsls	r1, r2, #22
 80056be:	bf58      	it	pl
 80056c0:	9902      	ldrpl	r1, [sp, #8]
 80056c2:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80056c6:	bf58      	it	pl
 80056c8:	1a79      	subpl	r1, r7, r1
 80056ca:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 80056ce:	bf58      	it	pl
 80056d0:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80056d4:	6022      	str	r2, [r4, #0]
 80056d6:	2700      	movs	r7, #0
 80056d8:	e790      	b.n	80055fc <_scanf_float+0x198>
 80056da:	f04f 0a03 	mov.w	sl, #3
 80056de:	e78d      	b.n	80055fc <_scanf_float+0x198>
 80056e0:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 80056e4:	4649      	mov	r1, r9
 80056e6:	4640      	mov	r0, r8
 80056e8:	4798      	blx	r3
 80056ea:	2800      	cmp	r0, #0
 80056ec:	f43f aedf 	beq.w	80054ae <_scanf_float+0x4a>
 80056f0:	e6eb      	b.n	80054ca <_scanf_float+0x66>
 80056f2:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80056f6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80056fa:	464a      	mov	r2, r9
 80056fc:	4640      	mov	r0, r8
 80056fe:	4798      	blx	r3
 8005700:	6923      	ldr	r3, [r4, #16]
 8005702:	3b01      	subs	r3, #1
 8005704:	6123      	str	r3, [r4, #16]
 8005706:	e6eb      	b.n	80054e0 <_scanf_float+0x7c>
 8005708:	1e6b      	subs	r3, r5, #1
 800570a:	2b06      	cmp	r3, #6
 800570c:	d824      	bhi.n	8005758 <_scanf_float+0x2f4>
 800570e:	2d02      	cmp	r5, #2
 8005710:	d836      	bhi.n	8005780 <_scanf_float+0x31c>
 8005712:	9b01      	ldr	r3, [sp, #4]
 8005714:	429e      	cmp	r6, r3
 8005716:	f67f aee7 	bls.w	80054e8 <_scanf_float+0x84>
 800571a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800571e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005722:	464a      	mov	r2, r9
 8005724:	4640      	mov	r0, r8
 8005726:	4798      	blx	r3
 8005728:	6923      	ldr	r3, [r4, #16]
 800572a:	3b01      	subs	r3, #1
 800572c:	6123      	str	r3, [r4, #16]
 800572e:	e7f0      	b.n	8005712 <_scanf_float+0x2ae>
 8005730:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8005734:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8005738:	464a      	mov	r2, r9
 800573a:	4640      	mov	r0, r8
 800573c:	4798      	blx	r3
 800573e:	6923      	ldr	r3, [r4, #16]
 8005740:	3b01      	subs	r3, #1
 8005742:	6123      	str	r3, [r4, #16]
 8005744:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005748:	fa5f fa8a 	uxtb.w	sl, sl
 800574c:	f1ba 0f02 	cmp.w	sl, #2
 8005750:	d1ee      	bne.n	8005730 <_scanf_float+0x2cc>
 8005752:	3d03      	subs	r5, #3
 8005754:	b2ed      	uxtb	r5, r5
 8005756:	1b76      	subs	r6, r6, r5
 8005758:	6823      	ldr	r3, [r4, #0]
 800575a:	05da      	lsls	r2, r3, #23
 800575c:	d530      	bpl.n	80057c0 <_scanf_float+0x35c>
 800575e:	055b      	lsls	r3, r3, #21
 8005760:	d511      	bpl.n	8005786 <_scanf_float+0x322>
 8005762:	9b01      	ldr	r3, [sp, #4]
 8005764:	429e      	cmp	r6, r3
 8005766:	f67f aebf 	bls.w	80054e8 <_scanf_float+0x84>
 800576a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800576e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005772:	464a      	mov	r2, r9
 8005774:	4640      	mov	r0, r8
 8005776:	4798      	blx	r3
 8005778:	6923      	ldr	r3, [r4, #16]
 800577a:	3b01      	subs	r3, #1
 800577c:	6123      	str	r3, [r4, #16]
 800577e:	e7f0      	b.n	8005762 <_scanf_float+0x2fe>
 8005780:	46aa      	mov	sl, r5
 8005782:	46b3      	mov	fp, r6
 8005784:	e7de      	b.n	8005744 <_scanf_float+0x2e0>
 8005786:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800578a:	6923      	ldr	r3, [r4, #16]
 800578c:	2965      	cmp	r1, #101	@ 0x65
 800578e:	f103 33ff 	add.w	r3, r3, #4294967295
 8005792:	f106 35ff 	add.w	r5, r6, #4294967295
 8005796:	6123      	str	r3, [r4, #16]
 8005798:	d00c      	beq.n	80057b4 <_scanf_float+0x350>
 800579a:	2945      	cmp	r1, #69	@ 0x45
 800579c:	d00a      	beq.n	80057b4 <_scanf_float+0x350>
 800579e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80057a2:	464a      	mov	r2, r9
 80057a4:	4640      	mov	r0, r8
 80057a6:	4798      	blx	r3
 80057a8:	6923      	ldr	r3, [r4, #16]
 80057aa:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80057ae:	3b01      	subs	r3, #1
 80057b0:	1eb5      	subs	r5, r6, #2
 80057b2:	6123      	str	r3, [r4, #16]
 80057b4:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80057b8:	464a      	mov	r2, r9
 80057ba:	4640      	mov	r0, r8
 80057bc:	4798      	blx	r3
 80057be:	462e      	mov	r6, r5
 80057c0:	6822      	ldr	r2, [r4, #0]
 80057c2:	f012 0210 	ands.w	r2, r2, #16
 80057c6:	d001      	beq.n	80057cc <_scanf_float+0x368>
 80057c8:	2000      	movs	r0, #0
 80057ca:	e68e      	b.n	80054ea <_scanf_float+0x86>
 80057cc:	7032      	strb	r2, [r6, #0]
 80057ce:	6823      	ldr	r3, [r4, #0]
 80057d0:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80057d4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80057d8:	d125      	bne.n	8005826 <_scanf_float+0x3c2>
 80057da:	9b02      	ldr	r3, [sp, #8]
 80057dc:	429f      	cmp	r7, r3
 80057de:	d00a      	beq.n	80057f6 <_scanf_float+0x392>
 80057e0:	1bda      	subs	r2, r3, r7
 80057e2:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 80057e6:	429e      	cmp	r6, r3
 80057e8:	bf28      	it	cs
 80057ea:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 80057ee:	4922      	ldr	r1, [pc, #136]	@ (8005878 <_scanf_float+0x414>)
 80057f0:	4630      	mov	r0, r6
 80057f2:	f000 f907 	bl	8005a04 <siprintf>
 80057f6:	9901      	ldr	r1, [sp, #4]
 80057f8:	2200      	movs	r2, #0
 80057fa:	4640      	mov	r0, r8
 80057fc:	f002 fbf4 	bl	8007fe8 <_strtod_r>
 8005800:	9b03      	ldr	r3, [sp, #12]
 8005802:	6821      	ldr	r1, [r4, #0]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	f011 0f02 	tst.w	r1, #2
 800580a:	ec57 6b10 	vmov	r6, r7, d0
 800580e:	f103 0204 	add.w	r2, r3, #4
 8005812:	d015      	beq.n	8005840 <_scanf_float+0x3dc>
 8005814:	9903      	ldr	r1, [sp, #12]
 8005816:	600a      	str	r2, [r1, #0]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	e9c3 6700 	strd	r6, r7, [r3]
 800581e:	68e3      	ldr	r3, [r4, #12]
 8005820:	3301      	adds	r3, #1
 8005822:	60e3      	str	r3, [r4, #12]
 8005824:	e7d0      	b.n	80057c8 <_scanf_float+0x364>
 8005826:	9b04      	ldr	r3, [sp, #16]
 8005828:	2b00      	cmp	r3, #0
 800582a:	d0e4      	beq.n	80057f6 <_scanf_float+0x392>
 800582c:	9905      	ldr	r1, [sp, #20]
 800582e:	230a      	movs	r3, #10
 8005830:	3101      	adds	r1, #1
 8005832:	4640      	mov	r0, r8
 8005834:	f002 fc58 	bl	80080e8 <_strtol_r>
 8005838:	9b04      	ldr	r3, [sp, #16]
 800583a:	9e05      	ldr	r6, [sp, #20]
 800583c:	1ac2      	subs	r2, r0, r3
 800583e:	e7d0      	b.n	80057e2 <_scanf_float+0x37e>
 8005840:	f011 0f04 	tst.w	r1, #4
 8005844:	9903      	ldr	r1, [sp, #12]
 8005846:	600a      	str	r2, [r1, #0]
 8005848:	d1e6      	bne.n	8005818 <_scanf_float+0x3b4>
 800584a:	681d      	ldr	r5, [r3, #0]
 800584c:	4632      	mov	r2, r6
 800584e:	463b      	mov	r3, r7
 8005850:	4630      	mov	r0, r6
 8005852:	4639      	mov	r1, r7
 8005854:	f7fb f972 	bl	8000b3c <__aeabi_dcmpun>
 8005858:	b128      	cbz	r0, 8005866 <_scanf_float+0x402>
 800585a:	4808      	ldr	r0, [pc, #32]	@ (800587c <_scanf_float+0x418>)
 800585c:	f000 f9b8 	bl	8005bd0 <nanf>
 8005860:	ed85 0a00 	vstr	s0, [r5]
 8005864:	e7db      	b.n	800581e <_scanf_float+0x3ba>
 8005866:	4630      	mov	r0, r6
 8005868:	4639      	mov	r1, r7
 800586a:	f7fb f9c5 	bl	8000bf8 <__aeabi_d2f>
 800586e:	6028      	str	r0, [r5, #0]
 8005870:	e7d5      	b.n	800581e <_scanf_float+0x3ba>
 8005872:	2700      	movs	r7, #0
 8005874:	e62e      	b.n	80054d4 <_scanf_float+0x70>
 8005876:	bf00      	nop
 8005878:	080098f4 	.word	0x080098f4
 800587c:	08009a35 	.word	0x08009a35

08005880 <std>:
 8005880:	2300      	movs	r3, #0
 8005882:	b510      	push	{r4, lr}
 8005884:	4604      	mov	r4, r0
 8005886:	e9c0 3300 	strd	r3, r3, [r0]
 800588a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800588e:	6083      	str	r3, [r0, #8]
 8005890:	8181      	strh	r1, [r0, #12]
 8005892:	6643      	str	r3, [r0, #100]	@ 0x64
 8005894:	81c2      	strh	r2, [r0, #14]
 8005896:	6183      	str	r3, [r0, #24]
 8005898:	4619      	mov	r1, r3
 800589a:	2208      	movs	r2, #8
 800589c:	305c      	adds	r0, #92	@ 0x5c
 800589e:	f000 f916 	bl	8005ace <memset>
 80058a2:	4b0d      	ldr	r3, [pc, #52]	@ (80058d8 <std+0x58>)
 80058a4:	6263      	str	r3, [r4, #36]	@ 0x24
 80058a6:	4b0d      	ldr	r3, [pc, #52]	@ (80058dc <std+0x5c>)
 80058a8:	62a3      	str	r3, [r4, #40]	@ 0x28
 80058aa:	4b0d      	ldr	r3, [pc, #52]	@ (80058e0 <std+0x60>)
 80058ac:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80058ae:	4b0d      	ldr	r3, [pc, #52]	@ (80058e4 <std+0x64>)
 80058b0:	6323      	str	r3, [r4, #48]	@ 0x30
 80058b2:	4b0d      	ldr	r3, [pc, #52]	@ (80058e8 <std+0x68>)
 80058b4:	6224      	str	r4, [r4, #32]
 80058b6:	429c      	cmp	r4, r3
 80058b8:	d006      	beq.n	80058c8 <std+0x48>
 80058ba:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80058be:	4294      	cmp	r4, r2
 80058c0:	d002      	beq.n	80058c8 <std+0x48>
 80058c2:	33d0      	adds	r3, #208	@ 0xd0
 80058c4:	429c      	cmp	r4, r3
 80058c6:	d105      	bne.n	80058d4 <std+0x54>
 80058c8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80058cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80058d0:	f000 b97a 	b.w	8005bc8 <__retarget_lock_init_recursive>
 80058d4:	bd10      	pop	{r4, pc}
 80058d6:	bf00      	nop
 80058d8:	08005a49 	.word	0x08005a49
 80058dc:	08005a6b 	.word	0x08005a6b
 80058e0:	08005aa3 	.word	0x08005aa3
 80058e4:	08005ac7 	.word	0x08005ac7
 80058e8:	2000039c 	.word	0x2000039c

080058ec <stdio_exit_handler>:
 80058ec:	4a02      	ldr	r2, [pc, #8]	@ (80058f8 <stdio_exit_handler+0xc>)
 80058ee:	4903      	ldr	r1, [pc, #12]	@ (80058fc <stdio_exit_handler+0x10>)
 80058f0:	4803      	ldr	r0, [pc, #12]	@ (8005900 <stdio_exit_handler+0x14>)
 80058f2:	f000 b869 	b.w	80059c8 <_fwalk_sglue>
 80058f6:	bf00      	nop
 80058f8:	2000000c 	.word	0x2000000c
 80058fc:	080084a5 	.word	0x080084a5
 8005900:	2000001c 	.word	0x2000001c

08005904 <cleanup_stdio>:
 8005904:	6841      	ldr	r1, [r0, #4]
 8005906:	4b0c      	ldr	r3, [pc, #48]	@ (8005938 <cleanup_stdio+0x34>)
 8005908:	4299      	cmp	r1, r3
 800590a:	b510      	push	{r4, lr}
 800590c:	4604      	mov	r4, r0
 800590e:	d001      	beq.n	8005914 <cleanup_stdio+0x10>
 8005910:	f002 fdc8 	bl	80084a4 <_fflush_r>
 8005914:	68a1      	ldr	r1, [r4, #8]
 8005916:	4b09      	ldr	r3, [pc, #36]	@ (800593c <cleanup_stdio+0x38>)
 8005918:	4299      	cmp	r1, r3
 800591a:	d002      	beq.n	8005922 <cleanup_stdio+0x1e>
 800591c:	4620      	mov	r0, r4
 800591e:	f002 fdc1 	bl	80084a4 <_fflush_r>
 8005922:	68e1      	ldr	r1, [r4, #12]
 8005924:	4b06      	ldr	r3, [pc, #24]	@ (8005940 <cleanup_stdio+0x3c>)
 8005926:	4299      	cmp	r1, r3
 8005928:	d004      	beq.n	8005934 <cleanup_stdio+0x30>
 800592a:	4620      	mov	r0, r4
 800592c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005930:	f002 bdb8 	b.w	80084a4 <_fflush_r>
 8005934:	bd10      	pop	{r4, pc}
 8005936:	bf00      	nop
 8005938:	2000039c 	.word	0x2000039c
 800593c:	20000404 	.word	0x20000404
 8005940:	2000046c 	.word	0x2000046c

08005944 <global_stdio_init.part.0>:
 8005944:	b510      	push	{r4, lr}
 8005946:	4b0b      	ldr	r3, [pc, #44]	@ (8005974 <global_stdio_init.part.0+0x30>)
 8005948:	4c0b      	ldr	r4, [pc, #44]	@ (8005978 <global_stdio_init.part.0+0x34>)
 800594a:	4a0c      	ldr	r2, [pc, #48]	@ (800597c <global_stdio_init.part.0+0x38>)
 800594c:	601a      	str	r2, [r3, #0]
 800594e:	4620      	mov	r0, r4
 8005950:	2200      	movs	r2, #0
 8005952:	2104      	movs	r1, #4
 8005954:	f7ff ff94 	bl	8005880 <std>
 8005958:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800595c:	2201      	movs	r2, #1
 800595e:	2109      	movs	r1, #9
 8005960:	f7ff ff8e 	bl	8005880 <std>
 8005964:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005968:	2202      	movs	r2, #2
 800596a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800596e:	2112      	movs	r1, #18
 8005970:	f7ff bf86 	b.w	8005880 <std>
 8005974:	200004d4 	.word	0x200004d4
 8005978:	2000039c 	.word	0x2000039c
 800597c:	080058ed 	.word	0x080058ed

08005980 <__sfp_lock_acquire>:
 8005980:	4801      	ldr	r0, [pc, #4]	@ (8005988 <__sfp_lock_acquire+0x8>)
 8005982:	f000 b922 	b.w	8005bca <__retarget_lock_acquire_recursive>
 8005986:	bf00      	nop
 8005988:	200004dd 	.word	0x200004dd

0800598c <__sfp_lock_release>:
 800598c:	4801      	ldr	r0, [pc, #4]	@ (8005994 <__sfp_lock_release+0x8>)
 800598e:	f000 b91d 	b.w	8005bcc <__retarget_lock_release_recursive>
 8005992:	bf00      	nop
 8005994:	200004dd 	.word	0x200004dd

08005998 <__sinit>:
 8005998:	b510      	push	{r4, lr}
 800599a:	4604      	mov	r4, r0
 800599c:	f7ff fff0 	bl	8005980 <__sfp_lock_acquire>
 80059a0:	6a23      	ldr	r3, [r4, #32]
 80059a2:	b11b      	cbz	r3, 80059ac <__sinit+0x14>
 80059a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80059a8:	f7ff bff0 	b.w	800598c <__sfp_lock_release>
 80059ac:	4b04      	ldr	r3, [pc, #16]	@ (80059c0 <__sinit+0x28>)
 80059ae:	6223      	str	r3, [r4, #32]
 80059b0:	4b04      	ldr	r3, [pc, #16]	@ (80059c4 <__sinit+0x2c>)
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d1f5      	bne.n	80059a4 <__sinit+0xc>
 80059b8:	f7ff ffc4 	bl	8005944 <global_stdio_init.part.0>
 80059bc:	e7f2      	b.n	80059a4 <__sinit+0xc>
 80059be:	bf00      	nop
 80059c0:	08005905 	.word	0x08005905
 80059c4:	200004d4 	.word	0x200004d4

080059c8 <_fwalk_sglue>:
 80059c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80059cc:	4607      	mov	r7, r0
 80059ce:	4688      	mov	r8, r1
 80059d0:	4614      	mov	r4, r2
 80059d2:	2600      	movs	r6, #0
 80059d4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80059d8:	f1b9 0901 	subs.w	r9, r9, #1
 80059dc:	d505      	bpl.n	80059ea <_fwalk_sglue+0x22>
 80059de:	6824      	ldr	r4, [r4, #0]
 80059e0:	2c00      	cmp	r4, #0
 80059e2:	d1f7      	bne.n	80059d4 <_fwalk_sglue+0xc>
 80059e4:	4630      	mov	r0, r6
 80059e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80059ea:	89ab      	ldrh	r3, [r5, #12]
 80059ec:	2b01      	cmp	r3, #1
 80059ee:	d907      	bls.n	8005a00 <_fwalk_sglue+0x38>
 80059f0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80059f4:	3301      	adds	r3, #1
 80059f6:	d003      	beq.n	8005a00 <_fwalk_sglue+0x38>
 80059f8:	4629      	mov	r1, r5
 80059fa:	4638      	mov	r0, r7
 80059fc:	47c0      	blx	r8
 80059fe:	4306      	orrs	r6, r0
 8005a00:	3568      	adds	r5, #104	@ 0x68
 8005a02:	e7e9      	b.n	80059d8 <_fwalk_sglue+0x10>

08005a04 <siprintf>:
 8005a04:	b40e      	push	{r1, r2, r3}
 8005a06:	b510      	push	{r4, lr}
 8005a08:	b09d      	sub	sp, #116	@ 0x74
 8005a0a:	ab1f      	add	r3, sp, #124	@ 0x7c
 8005a0c:	9002      	str	r0, [sp, #8]
 8005a0e:	9006      	str	r0, [sp, #24]
 8005a10:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8005a14:	480a      	ldr	r0, [pc, #40]	@ (8005a40 <siprintf+0x3c>)
 8005a16:	9107      	str	r1, [sp, #28]
 8005a18:	9104      	str	r1, [sp, #16]
 8005a1a:	490a      	ldr	r1, [pc, #40]	@ (8005a44 <siprintf+0x40>)
 8005a1c:	f853 2b04 	ldr.w	r2, [r3], #4
 8005a20:	9105      	str	r1, [sp, #20]
 8005a22:	2400      	movs	r4, #0
 8005a24:	a902      	add	r1, sp, #8
 8005a26:	6800      	ldr	r0, [r0, #0]
 8005a28:	9301      	str	r3, [sp, #4]
 8005a2a:	941b      	str	r4, [sp, #108]	@ 0x6c
 8005a2c:	f002 fbba 	bl	80081a4 <_svfiprintf_r>
 8005a30:	9b02      	ldr	r3, [sp, #8]
 8005a32:	701c      	strb	r4, [r3, #0]
 8005a34:	b01d      	add	sp, #116	@ 0x74
 8005a36:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005a3a:	b003      	add	sp, #12
 8005a3c:	4770      	bx	lr
 8005a3e:	bf00      	nop
 8005a40:	20000018 	.word	0x20000018
 8005a44:	ffff0208 	.word	0xffff0208

08005a48 <__sread>:
 8005a48:	b510      	push	{r4, lr}
 8005a4a:	460c      	mov	r4, r1
 8005a4c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005a50:	f000 f86c 	bl	8005b2c <_read_r>
 8005a54:	2800      	cmp	r0, #0
 8005a56:	bfab      	itete	ge
 8005a58:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8005a5a:	89a3      	ldrhlt	r3, [r4, #12]
 8005a5c:	181b      	addge	r3, r3, r0
 8005a5e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8005a62:	bfac      	ite	ge
 8005a64:	6563      	strge	r3, [r4, #84]	@ 0x54
 8005a66:	81a3      	strhlt	r3, [r4, #12]
 8005a68:	bd10      	pop	{r4, pc}

08005a6a <__swrite>:
 8005a6a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005a6e:	461f      	mov	r7, r3
 8005a70:	898b      	ldrh	r3, [r1, #12]
 8005a72:	05db      	lsls	r3, r3, #23
 8005a74:	4605      	mov	r5, r0
 8005a76:	460c      	mov	r4, r1
 8005a78:	4616      	mov	r6, r2
 8005a7a:	d505      	bpl.n	8005a88 <__swrite+0x1e>
 8005a7c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005a80:	2302      	movs	r3, #2
 8005a82:	2200      	movs	r2, #0
 8005a84:	f000 f840 	bl	8005b08 <_lseek_r>
 8005a88:	89a3      	ldrh	r3, [r4, #12]
 8005a8a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005a8e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005a92:	81a3      	strh	r3, [r4, #12]
 8005a94:	4632      	mov	r2, r6
 8005a96:	463b      	mov	r3, r7
 8005a98:	4628      	mov	r0, r5
 8005a9a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005a9e:	f000 b857 	b.w	8005b50 <_write_r>

08005aa2 <__sseek>:
 8005aa2:	b510      	push	{r4, lr}
 8005aa4:	460c      	mov	r4, r1
 8005aa6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005aaa:	f000 f82d 	bl	8005b08 <_lseek_r>
 8005aae:	1c43      	adds	r3, r0, #1
 8005ab0:	89a3      	ldrh	r3, [r4, #12]
 8005ab2:	bf15      	itete	ne
 8005ab4:	6560      	strne	r0, [r4, #84]	@ 0x54
 8005ab6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8005aba:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8005abe:	81a3      	strheq	r3, [r4, #12]
 8005ac0:	bf18      	it	ne
 8005ac2:	81a3      	strhne	r3, [r4, #12]
 8005ac4:	bd10      	pop	{r4, pc}

08005ac6 <__sclose>:
 8005ac6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005aca:	f000 b80d 	b.w	8005ae8 <_close_r>

08005ace <memset>:
 8005ace:	4402      	add	r2, r0
 8005ad0:	4603      	mov	r3, r0
 8005ad2:	4293      	cmp	r3, r2
 8005ad4:	d100      	bne.n	8005ad8 <memset+0xa>
 8005ad6:	4770      	bx	lr
 8005ad8:	f803 1b01 	strb.w	r1, [r3], #1
 8005adc:	e7f9      	b.n	8005ad2 <memset+0x4>
	...

08005ae0 <_localeconv_r>:
 8005ae0:	4800      	ldr	r0, [pc, #0]	@ (8005ae4 <_localeconv_r+0x4>)
 8005ae2:	4770      	bx	lr
 8005ae4:	20000158 	.word	0x20000158

08005ae8 <_close_r>:
 8005ae8:	b538      	push	{r3, r4, r5, lr}
 8005aea:	4d06      	ldr	r5, [pc, #24]	@ (8005b04 <_close_r+0x1c>)
 8005aec:	2300      	movs	r3, #0
 8005aee:	4604      	mov	r4, r0
 8005af0:	4608      	mov	r0, r1
 8005af2:	602b      	str	r3, [r5, #0]
 8005af4:	f7fb ff08 	bl	8001908 <_close>
 8005af8:	1c43      	adds	r3, r0, #1
 8005afa:	d102      	bne.n	8005b02 <_close_r+0x1a>
 8005afc:	682b      	ldr	r3, [r5, #0]
 8005afe:	b103      	cbz	r3, 8005b02 <_close_r+0x1a>
 8005b00:	6023      	str	r3, [r4, #0]
 8005b02:	bd38      	pop	{r3, r4, r5, pc}
 8005b04:	200004d8 	.word	0x200004d8

08005b08 <_lseek_r>:
 8005b08:	b538      	push	{r3, r4, r5, lr}
 8005b0a:	4d07      	ldr	r5, [pc, #28]	@ (8005b28 <_lseek_r+0x20>)
 8005b0c:	4604      	mov	r4, r0
 8005b0e:	4608      	mov	r0, r1
 8005b10:	4611      	mov	r1, r2
 8005b12:	2200      	movs	r2, #0
 8005b14:	602a      	str	r2, [r5, #0]
 8005b16:	461a      	mov	r2, r3
 8005b18:	f7fb ff1d 	bl	8001956 <_lseek>
 8005b1c:	1c43      	adds	r3, r0, #1
 8005b1e:	d102      	bne.n	8005b26 <_lseek_r+0x1e>
 8005b20:	682b      	ldr	r3, [r5, #0]
 8005b22:	b103      	cbz	r3, 8005b26 <_lseek_r+0x1e>
 8005b24:	6023      	str	r3, [r4, #0]
 8005b26:	bd38      	pop	{r3, r4, r5, pc}
 8005b28:	200004d8 	.word	0x200004d8

08005b2c <_read_r>:
 8005b2c:	b538      	push	{r3, r4, r5, lr}
 8005b2e:	4d07      	ldr	r5, [pc, #28]	@ (8005b4c <_read_r+0x20>)
 8005b30:	4604      	mov	r4, r0
 8005b32:	4608      	mov	r0, r1
 8005b34:	4611      	mov	r1, r2
 8005b36:	2200      	movs	r2, #0
 8005b38:	602a      	str	r2, [r5, #0]
 8005b3a:	461a      	mov	r2, r3
 8005b3c:	f7fb feab 	bl	8001896 <_read>
 8005b40:	1c43      	adds	r3, r0, #1
 8005b42:	d102      	bne.n	8005b4a <_read_r+0x1e>
 8005b44:	682b      	ldr	r3, [r5, #0]
 8005b46:	b103      	cbz	r3, 8005b4a <_read_r+0x1e>
 8005b48:	6023      	str	r3, [r4, #0]
 8005b4a:	bd38      	pop	{r3, r4, r5, pc}
 8005b4c:	200004d8 	.word	0x200004d8

08005b50 <_write_r>:
 8005b50:	b538      	push	{r3, r4, r5, lr}
 8005b52:	4d07      	ldr	r5, [pc, #28]	@ (8005b70 <_write_r+0x20>)
 8005b54:	4604      	mov	r4, r0
 8005b56:	4608      	mov	r0, r1
 8005b58:	4611      	mov	r1, r2
 8005b5a:	2200      	movs	r2, #0
 8005b5c:	602a      	str	r2, [r5, #0]
 8005b5e:	461a      	mov	r2, r3
 8005b60:	f7fb feb6 	bl	80018d0 <_write>
 8005b64:	1c43      	adds	r3, r0, #1
 8005b66:	d102      	bne.n	8005b6e <_write_r+0x1e>
 8005b68:	682b      	ldr	r3, [r5, #0]
 8005b6a:	b103      	cbz	r3, 8005b6e <_write_r+0x1e>
 8005b6c:	6023      	str	r3, [r4, #0]
 8005b6e:	bd38      	pop	{r3, r4, r5, pc}
 8005b70:	200004d8 	.word	0x200004d8

08005b74 <__errno>:
 8005b74:	4b01      	ldr	r3, [pc, #4]	@ (8005b7c <__errno+0x8>)
 8005b76:	6818      	ldr	r0, [r3, #0]
 8005b78:	4770      	bx	lr
 8005b7a:	bf00      	nop
 8005b7c:	20000018 	.word	0x20000018

08005b80 <__libc_init_array>:
 8005b80:	b570      	push	{r4, r5, r6, lr}
 8005b82:	4d0d      	ldr	r5, [pc, #52]	@ (8005bb8 <__libc_init_array+0x38>)
 8005b84:	4c0d      	ldr	r4, [pc, #52]	@ (8005bbc <__libc_init_array+0x3c>)
 8005b86:	1b64      	subs	r4, r4, r5
 8005b88:	10a4      	asrs	r4, r4, #2
 8005b8a:	2600      	movs	r6, #0
 8005b8c:	42a6      	cmp	r6, r4
 8005b8e:	d109      	bne.n	8005ba4 <__libc_init_array+0x24>
 8005b90:	4d0b      	ldr	r5, [pc, #44]	@ (8005bc0 <__libc_init_array+0x40>)
 8005b92:	4c0c      	ldr	r4, [pc, #48]	@ (8005bc4 <__libc_init_array+0x44>)
 8005b94:	f003 fb76 	bl	8009284 <_init>
 8005b98:	1b64      	subs	r4, r4, r5
 8005b9a:	10a4      	asrs	r4, r4, #2
 8005b9c:	2600      	movs	r6, #0
 8005b9e:	42a6      	cmp	r6, r4
 8005ba0:	d105      	bne.n	8005bae <__libc_init_array+0x2e>
 8005ba2:	bd70      	pop	{r4, r5, r6, pc}
 8005ba4:	f855 3b04 	ldr.w	r3, [r5], #4
 8005ba8:	4798      	blx	r3
 8005baa:	3601      	adds	r6, #1
 8005bac:	e7ee      	b.n	8005b8c <__libc_init_array+0xc>
 8005bae:	f855 3b04 	ldr.w	r3, [r5], #4
 8005bb2:	4798      	blx	r3
 8005bb4:	3601      	adds	r6, #1
 8005bb6:	e7f2      	b.n	8005b9e <__libc_init_array+0x1e>
 8005bb8:	08009cf4 	.word	0x08009cf4
 8005bbc:	08009cf4 	.word	0x08009cf4
 8005bc0:	08009cf4 	.word	0x08009cf4
 8005bc4:	08009cf8 	.word	0x08009cf8

08005bc8 <__retarget_lock_init_recursive>:
 8005bc8:	4770      	bx	lr

08005bca <__retarget_lock_acquire_recursive>:
 8005bca:	4770      	bx	lr

08005bcc <__retarget_lock_release_recursive>:
 8005bcc:	4770      	bx	lr
	...

08005bd0 <nanf>:
 8005bd0:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8005bd8 <nanf+0x8>
 8005bd4:	4770      	bx	lr
 8005bd6:	bf00      	nop
 8005bd8:	7fc00000 	.word	0x7fc00000

08005bdc <quorem>:
 8005bdc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005be0:	6903      	ldr	r3, [r0, #16]
 8005be2:	690c      	ldr	r4, [r1, #16]
 8005be4:	42a3      	cmp	r3, r4
 8005be6:	4607      	mov	r7, r0
 8005be8:	db7e      	blt.n	8005ce8 <quorem+0x10c>
 8005bea:	3c01      	subs	r4, #1
 8005bec:	f101 0814 	add.w	r8, r1, #20
 8005bf0:	00a3      	lsls	r3, r4, #2
 8005bf2:	f100 0514 	add.w	r5, r0, #20
 8005bf6:	9300      	str	r3, [sp, #0]
 8005bf8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005bfc:	9301      	str	r3, [sp, #4]
 8005bfe:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005c02:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005c06:	3301      	adds	r3, #1
 8005c08:	429a      	cmp	r2, r3
 8005c0a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005c0e:	fbb2 f6f3 	udiv	r6, r2, r3
 8005c12:	d32e      	bcc.n	8005c72 <quorem+0x96>
 8005c14:	f04f 0a00 	mov.w	sl, #0
 8005c18:	46c4      	mov	ip, r8
 8005c1a:	46ae      	mov	lr, r5
 8005c1c:	46d3      	mov	fp, sl
 8005c1e:	f85c 3b04 	ldr.w	r3, [ip], #4
 8005c22:	b298      	uxth	r0, r3
 8005c24:	fb06 a000 	mla	r0, r6, r0, sl
 8005c28:	0c02      	lsrs	r2, r0, #16
 8005c2a:	0c1b      	lsrs	r3, r3, #16
 8005c2c:	fb06 2303 	mla	r3, r6, r3, r2
 8005c30:	f8de 2000 	ldr.w	r2, [lr]
 8005c34:	b280      	uxth	r0, r0
 8005c36:	b292      	uxth	r2, r2
 8005c38:	1a12      	subs	r2, r2, r0
 8005c3a:	445a      	add	r2, fp
 8005c3c:	f8de 0000 	ldr.w	r0, [lr]
 8005c40:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005c44:	b29b      	uxth	r3, r3
 8005c46:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8005c4a:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8005c4e:	b292      	uxth	r2, r2
 8005c50:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8005c54:	45e1      	cmp	r9, ip
 8005c56:	f84e 2b04 	str.w	r2, [lr], #4
 8005c5a:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8005c5e:	d2de      	bcs.n	8005c1e <quorem+0x42>
 8005c60:	9b00      	ldr	r3, [sp, #0]
 8005c62:	58eb      	ldr	r3, [r5, r3]
 8005c64:	b92b      	cbnz	r3, 8005c72 <quorem+0x96>
 8005c66:	9b01      	ldr	r3, [sp, #4]
 8005c68:	3b04      	subs	r3, #4
 8005c6a:	429d      	cmp	r5, r3
 8005c6c:	461a      	mov	r2, r3
 8005c6e:	d32f      	bcc.n	8005cd0 <quorem+0xf4>
 8005c70:	613c      	str	r4, [r7, #16]
 8005c72:	4638      	mov	r0, r7
 8005c74:	f001 f9c8 	bl	8007008 <__mcmp>
 8005c78:	2800      	cmp	r0, #0
 8005c7a:	db25      	blt.n	8005cc8 <quorem+0xec>
 8005c7c:	4629      	mov	r1, r5
 8005c7e:	2000      	movs	r0, #0
 8005c80:	f858 2b04 	ldr.w	r2, [r8], #4
 8005c84:	f8d1 c000 	ldr.w	ip, [r1]
 8005c88:	fa1f fe82 	uxth.w	lr, r2
 8005c8c:	fa1f f38c 	uxth.w	r3, ip
 8005c90:	eba3 030e 	sub.w	r3, r3, lr
 8005c94:	4403      	add	r3, r0
 8005c96:	0c12      	lsrs	r2, r2, #16
 8005c98:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8005c9c:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8005ca0:	b29b      	uxth	r3, r3
 8005ca2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005ca6:	45c1      	cmp	r9, r8
 8005ca8:	f841 3b04 	str.w	r3, [r1], #4
 8005cac:	ea4f 4022 	mov.w	r0, r2, asr #16
 8005cb0:	d2e6      	bcs.n	8005c80 <quorem+0xa4>
 8005cb2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005cb6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005cba:	b922      	cbnz	r2, 8005cc6 <quorem+0xea>
 8005cbc:	3b04      	subs	r3, #4
 8005cbe:	429d      	cmp	r5, r3
 8005cc0:	461a      	mov	r2, r3
 8005cc2:	d30b      	bcc.n	8005cdc <quorem+0x100>
 8005cc4:	613c      	str	r4, [r7, #16]
 8005cc6:	3601      	adds	r6, #1
 8005cc8:	4630      	mov	r0, r6
 8005cca:	b003      	add	sp, #12
 8005ccc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005cd0:	6812      	ldr	r2, [r2, #0]
 8005cd2:	3b04      	subs	r3, #4
 8005cd4:	2a00      	cmp	r2, #0
 8005cd6:	d1cb      	bne.n	8005c70 <quorem+0x94>
 8005cd8:	3c01      	subs	r4, #1
 8005cda:	e7c6      	b.n	8005c6a <quorem+0x8e>
 8005cdc:	6812      	ldr	r2, [r2, #0]
 8005cde:	3b04      	subs	r3, #4
 8005ce0:	2a00      	cmp	r2, #0
 8005ce2:	d1ef      	bne.n	8005cc4 <quorem+0xe8>
 8005ce4:	3c01      	subs	r4, #1
 8005ce6:	e7ea      	b.n	8005cbe <quorem+0xe2>
 8005ce8:	2000      	movs	r0, #0
 8005cea:	e7ee      	b.n	8005cca <quorem+0xee>
 8005cec:	0000      	movs	r0, r0
	...

08005cf0 <_dtoa_r>:
 8005cf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005cf4:	69c7      	ldr	r7, [r0, #28]
 8005cf6:	b097      	sub	sp, #92	@ 0x5c
 8005cf8:	ed8d 0b04 	vstr	d0, [sp, #16]
 8005cfc:	ec55 4b10 	vmov	r4, r5, d0
 8005d00:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 8005d02:	9107      	str	r1, [sp, #28]
 8005d04:	4681      	mov	r9, r0
 8005d06:	920c      	str	r2, [sp, #48]	@ 0x30
 8005d08:	9311      	str	r3, [sp, #68]	@ 0x44
 8005d0a:	b97f      	cbnz	r7, 8005d2c <_dtoa_r+0x3c>
 8005d0c:	2010      	movs	r0, #16
 8005d0e:	f000 fe09 	bl	8006924 <malloc>
 8005d12:	4602      	mov	r2, r0
 8005d14:	f8c9 001c 	str.w	r0, [r9, #28]
 8005d18:	b920      	cbnz	r0, 8005d24 <_dtoa_r+0x34>
 8005d1a:	4ba9      	ldr	r3, [pc, #676]	@ (8005fc0 <_dtoa_r+0x2d0>)
 8005d1c:	21ef      	movs	r1, #239	@ 0xef
 8005d1e:	48a9      	ldr	r0, [pc, #676]	@ (8005fc4 <_dtoa_r+0x2d4>)
 8005d20:	f002 fc3a 	bl	8008598 <__assert_func>
 8005d24:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8005d28:	6007      	str	r7, [r0, #0]
 8005d2a:	60c7      	str	r7, [r0, #12]
 8005d2c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8005d30:	6819      	ldr	r1, [r3, #0]
 8005d32:	b159      	cbz	r1, 8005d4c <_dtoa_r+0x5c>
 8005d34:	685a      	ldr	r2, [r3, #4]
 8005d36:	604a      	str	r2, [r1, #4]
 8005d38:	2301      	movs	r3, #1
 8005d3a:	4093      	lsls	r3, r2
 8005d3c:	608b      	str	r3, [r1, #8]
 8005d3e:	4648      	mov	r0, r9
 8005d40:	f000 fee6 	bl	8006b10 <_Bfree>
 8005d44:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8005d48:	2200      	movs	r2, #0
 8005d4a:	601a      	str	r2, [r3, #0]
 8005d4c:	1e2b      	subs	r3, r5, #0
 8005d4e:	bfb9      	ittee	lt
 8005d50:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8005d54:	9305      	strlt	r3, [sp, #20]
 8005d56:	2300      	movge	r3, #0
 8005d58:	6033      	strge	r3, [r6, #0]
 8005d5a:	9f05      	ldr	r7, [sp, #20]
 8005d5c:	4b9a      	ldr	r3, [pc, #616]	@ (8005fc8 <_dtoa_r+0x2d8>)
 8005d5e:	bfbc      	itt	lt
 8005d60:	2201      	movlt	r2, #1
 8005d62:	6032      	strlt	r2, [r6, #0]
 8005d64:	43bb      	bics	r3, r7
 8005d66:	d112      	bne.n	8005d8e <_dtoa_r+0x9e>
 8005d68:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8005d6a:	f242 730f 	movw	r3, #9999	@ 0x270f
 8005d6e:	6013      	str	r3, [r2, #0]
 8005d70:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8005d74:	4323      	orrs	r3, r4
 8005d76:	f000 855a 	beq.w	800682e <_dtoa_r+0xb3e>
 8005d7a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005d7c:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 8005fdc <_dtoa_r+0x2ec>
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	f000 855c 	beq.w	800683e <_dtoa_r+0xb4e>
 8005d86:	f10a 0303 	add.w	r3, sl, #3
 8005d8a:	f000 bd56 	b.w	800683a <_dtoa_r+0xb4a>
 8005d8e:	ed9d 7b04 	vldr	d7, [sp, #16]
 8005d92:	2200      	movs	r2, #0
 8005d94:	ec51 0b17 	vmov	r0, r1, d7
 8005d98:	2300      	movs	r3, #0
 8005d9a:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 8005d9e:	f7fa fe9b 	bl	8000ad8 <__aeabi_dcmpeq>
 8005da2:	4680      	mov	r8, r0
 8005da4:	b158      	cbz	r0, 8005dbe <_dtoa_r+0xce>
 8005da6:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8005da8:	2301      	movs	r3, #1
 8005daa:	6013      	str	r3, [r2, #0]
 8005dac:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005dae:	b113      	cbz	r3, 8005db6 <_dtoa_r+0xc6>
 8005db0:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8005db2:	4b86      	ldr	r3, [pc, #536]	@ (8005fcc <_dtoa_r+0x2dc>)
 8005db4:	6013      	str	r3, [r2, #0]
 8005db6:	f8df a228 	ldr.w	sl, [pc, #552]	@ 8005fe0 <_dtoa_r+0x2f0>
 8005dba:	f000 bd40 	b.w	800683e <_dtoa_r+0xb4e>
 8005dbe:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 8005dc2:	aa14      	add	r2, sp, #80	@ 0x50
 8005dc4:	a915      	add	r1, sp, #84	@ 0x54
 8005dc6:	4648      	mov	r0, r9
 8005dc8:	f001 fa3e 	bl	8007248 <__d2b>
 8005dcc:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8005dd0:	9002      	str	r0, [sp, #8]
 8005dd2:	2e00      	cmp	r6, #0
 8005dd4:	d078      	beq.n	8005ec8 <_dtoa_r+0x1d8>
 8005dd6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005dd8:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 8005ddc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005de0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8005de4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8005de8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8005dec:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8005df0:	4619      	mov	r1, r3
 8005df2:	2200      	movs	r2, #0
 8005df4:	4b76      	ldr	r3, [pc, #472]	@ (8005fd0 <_dtoa_r+0x2e0>)
 8005df6:	f7fa fa4f 	bl	8000298 <__aeabi_dsub>
 8005dfa:	a36b      	add	r3, pc, #428	@ (adr r3, 8005fa8 <_dtoa_r+0x2b8>)
 8005dfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e00:	f7fa fc02 	bl	8000608 <__aeabi_dmul>
 8005e04:	a36a      	add	r3, pc, #424	@ (adr r3, 8005fb0 <_dtoa_r+0x2c0>)
 8005e06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e0a:	f7fa fa47 	bl	800029c <__adddf3>
 8005e0e:	4604      	mov	r4, r0
 8005e10:	4630      	mov	r0, r6
 8005e12:	460d      	mov	r5, r1
 8005e14:	f7fa fb8e 	bl	8000534 <__aeabi_i2d>
 8005e18:	a367      	add	r3, pc, #412	@ (adr r3, 8005fb8 <_dtoa_r+0x2c8>)
 8005e1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e1e:	f7fa fbf3 	bl	8000608 <__aeabi_dmul>
 8005e22:	4602      	mov	r2, r0
 8005e24:	460b      	mov	r3, r1
 8005e26:	4620      	mov	r0, r4
 8005e28:	4629      	mov	r1, r5
 8005e2a:	f7fa fa37 	bl	800029c <__adddf3>
 8005e2e:	4604      	mov	r4, r0
 8005e30:	460d      	mov	r5, r1
 8005e32:	f7fa fe99 	bl	8000b68 <__aeabi_d2iz>
 8005e36:	2200      	movs	r2, #0
 8005e38:	4607      	mov	r7, r0
 8005e3a:	2300      	movs	r3, #0
 8005e3c:	4620      	mov	r0, r4
 8005e3e:	4629      	mov	r1, r5
 8005e40:	f7fa fe54 	bl	8000aec <__aeabi_dcmplt>
 8005e44:	b140      	cbz	r0, 8005e58 <_dtoa_r+0x168>
 8005e46:	4638      	mov	r0, r7
 8005e48:	f7fa fb74 	bl	8000534 <__aeabi_i2d>
 8005e4c:	4622      	mov	r2, r4
 8005e4e:	462b      	mov	r3, r5
 8005e50:	f7fa fe42 	bl	8000ad8 <__aeabi_dcmpeq>
 8005e54:	b900      	cbnz	r0, 8005e58 <_dtoa_r+0x168>
 8005e56:	3f01      	subs	r7, #1
 8005e58:	2f16      	cmp	r7, #22
 8005e5a:	d852      	bhi.n	8005f02 <_dtoa_r+0x212>
 8005e5c:	4b5d      	ldr	r3, [pc, #372]	@ (8005fd4 <_dtoa_r+0x2e4>)
 8005e5e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8005e62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e66:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8005e6a:	f7fa fe3f 	bl	8000aec <__aeabi_dcmplt>
 8005e6e:	2800      	cmp	r0, #0
 8005e70:	d049      	beq.n	8005f06 <_dtoa_r+0x216>
 8005e72:	3f01      	subs	r7, #1
 8005e74:	2300      	movs	r3, #0
 8005e76:	9310      	str	r3, [sp, #64]	@ 0x40
 8005e78:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8005e7a:	1b9b      	subs	r3, r3, r6
 8005e7c:	1e5a      	subs	r2, r3, #1
 8005e7e:	bf45      	ittet	mi
 8005e80:	f1c3 0301 	rsbmi	r3, r3, #1
 8005e84:	9300      	strmi	r3, [sp, #0]
 8005e86:	2300      	movpl	r3, #0
 8005e88:	2300      	movmi	r3, #0
 8005e8a:	9206      	str	r2, [sp, #24]
 8005e8c:	bf54      	ite	pl
 8005e8e:	9300      	strpl	r3, [sp, #0]
 8005e90:	9306      	strmi	r3, [sp, #24]
 8005e92:	2f00      	cmp	r7, #0
 8005e94:	db39      	blt.n	8005f0a <_dtoa_r+0x21a>
 8005e96:	9b06      	ldr	r3, [sp, #24]
 8005e98:	970d      	str	r7, [sp, #52]	@ 0x34
 8005e9a:	443b      	add	r3, r7
 8005e9c:	9306      	str	r3, [sp, #24]
 8005e9e:	2300      	movs	r3, #0
 8005ea0:	9308      	str	r3, [sp, #32]
 8005ea2:	9b07      	ldr	r3, [sp, #28]
 8005ea4:	2b09      	cmp	r3, #9
 8005ea6:	d863      	bhi.n	8005f70 <_dtoa_r+0x280>
 8005ea8:	2b05      	cmp	r3, #5
 8005eaa:	bfc4      	itt	gt
 8005eac:	3b04      	subgt	r3, #4
 8005eae:	9307      	strgt	r3, [sp, #28]
 8005eb0:	9b07      	ldr	r3, [sp, #28]
 8005eb2:	f1a3 0302 	sub.w	r3, r3, #2
 8005eb6:	bfcc      	ite	gt
 8005eb8:	2400      	movgt	r4, #0
 8005eba:	2401      	movle	r4, #1
 8005ebc:	2b03      	cmp	r3, #3
 8005ebe:	d863      	bhi.n	8005f88 <_dtoa_r+0x298>
 8005ec0:	e8df f003 	tbb	[pc, r3]
 8005ec4:	2b375452 	.word	0x2b375452
 8005ec8:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8005ecc:	441e      	add	r6, r3
 8005ece:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8005ed2:	2b20      	cmp	r3, #32
 8005ed4:	bfc1      	itttt	gt
 8005ed6:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8005eda:	409f      	lslgt	r7, r3
 8005edc:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8005ee0:	fa24 f303 	lsrgt.w	r3, r4, r3
 8005ee4:	bfd6      	itet	le
 8005ee6:	f1c3 0320 	rsble	r3, r3, #32
 8005eea:	ea47 0003 	orrgt.w	r0, r7, r3
 8005eee:	fa04 f003 	lslle.w	r0, r4, r3
 8005ef2:	f7fa fb0f 	bl	8000514 <__aeabi_ui2d>
 8005ef6:	2201      	movs	r2, #1
 8005ef8:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8005efc:	3e01      	subs	r6, #1
 8005efe:	9212      	str	r2, [sp, #72]	@ 0x48
 8005f00:	e776      	b.n	8005df0 <_dtoa_r+0x100>
 8005f02:	2301      	movs	r3, #1
 8005f04:	e7b7      	b.n	8005e76 <_dtoa_r+0x186>
 8005f06:	9010      	str	r0, [sp, #64]	@ 0x40
 8005f08:	e7b6      	b.n	8005e78 <_dtoa_r+0x188>
 8005f0a:	9b00      	ldr	r3, [sp, #0]
 8005f0c:	1bdb      	subs	r3, r3, r7
 8005f0e:	9300      	str	r3, [sp, #0]
 8005f10:	427b      	negs	r3, r7
 8005f12:	9308      	str	r3, [sp, #32]
 8005f14:	2300      	movs	r3, #0
 8005f16:	930d      	str	r3, [sp, #52]	@ 0x34
 8005f18:	e7c3      	b.n	8005ea2 <_dtoa_r+0x1b2>
 8005f1a:	2301      	movs	r3, #1
 8005f1c:	9309      	str	r3, [sp, #36]	@ 0x24
 8005f1e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8005f20:	eb07 0b03 	add.w	fp, r7, r3
 8005f24:	f10b 0301 	add.w	r3, fp, #1
 8005f28:	2b01      	cmp	r3, #1
 8005f2a:	9303      	str	r3, [sp, #12]
 8005f2c:	bfb8      	it	lt
 8005f2e:	2301      	movlt	r3, #1
 8005f30:	e006      	b.n	8005f40 <_dtoa_r+0x250>
 8005f32:	2301      	movs	r3, #1
 8005f34:	9309      	str	r3, [sp, #36]	@ 0x24
 8005f36:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	dd28      	ble.n	8005f8e <_dtoa_r+0x29e>
 8005f3c:	469b      	mov	fp, r3
 8005f3e:	9303      	str	r3, [sp, #12]
 8005f40:	f8d9 001c 	ldr.w	r0, [r9, #28]
 8005f44:	2100      	movs	r1, #0
 8005f46:	2204      	movs	r2, #4
 8005f48:	f102 0514 	add.w	r5, r2, #20
 8005f4c:	429d      	cmp	r5, r3
 8005f4e:	d926      	bls.n	8005f9e <_dtoa_r+0x2ae>
 8005f50:	6041      	str	r1, [r0, #4]
 8005f52:	4648      	mov	r0, r9
 8005f54:	f000 fd9c 	bl	8006a90 <_Balloc>
 8005f58:	4682      	mov	sl, r0
 8005f5a:	2800      	cmp	r0, #0
 8005f5c:	d142      	bne.n	8005fe4 <_dtoa_r+0x2f4>
 8005f5e:	4b1e      	ldr	r3, [pc, #120]	@ (8005fd8 <_dtoa_r+0x2e8>)
 8005f60:	4602      	mov	r2, r0
 8005f62:	f240 11af 	movw	r1, #431	@ 0x1af
 8005f66:	e6da      	b.n	8005d1e <_dtoa_r+0x2e>
 8005f68:	2300      	movs	r3, #0
 8005f6a:	e7e3      	b.n	8005f34 <_dtoa_r+0x244>
 8005f6c:	2300      	movs	r3, #0
 8005f6e:	e7d5      	b.n	8005f1c <_dtoa_r+0x22c>
 8005f70:	2401      	movs	r4, #1
 8005f72:	2300      	movs	r3, #0
 8005f74:	9307      	str	r3, [sp, #28]
 8005f76:	9409      	str	r4, [sp, #36]	@ 0x24
 8005f78:	f04f 3bff 	mov.w	fp, #4294967295
 8005f7c:	2200      	movs	r2, #0
 8005f7e:	f8cd b00c 	str.w	fp, [sp, #12]
 8005f82:	2312      	movs	r3, #18
 8005f84:	920c      	str	r2, [sp, #48]	@ 0x30
 8005f86:	e7db      	b.n	8005f40 <_dtoa_r+0x250>
 8005f88:	2301      	movs	r3, #1
 8005f8a:	9309      	str	r3, [sp, #36]	@ 0x24
 8005f8c:	e7f4      	b.n	8005f78 <_dtoa_r+0x288>
 8005f8e:	f04f 0b01 	mov.w	fp, #1
 8005f92:	f8cd b00c 	str.w	fp, [sp, #12]
 8005f96:	465b      	mov	r3, fp
 8005f98:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 8005f9c:	e7d0      	b.n	8005f40 <_dtoa_r+0x250>
 8005f9e:	3101      	adds	r1, #1
 8005fa0:	0052      	lsls	r2, r2, #1
 8005fa2:	e7d1      	b.n	8005f48 <_dtoa_r+0x258>
 8005fa4:	f3af 8000 	nop.w
 8005fa8:	636f4361 	.word	0x636f4361
 8005fac:	3fd287a7 	.word	0x3fd287a7
 8005fb0:	8b60c8b3 	.word	0x8b60c8b3
 8005fb4:	3fc68a28 	.word	0x3fc68a28
 8005fb8:	509f79fb 	.word	0x509f79fb
 8005fbc:	3fd34413 	.word	0x3fd34413
 8005fc0:	08009906 	.word	0x08009906
 8005fc4:	0800991d 	.word	0x0800991d
 8005fc8:	7ff00000 	.word	0x7ff00000
 8005fcc:	080098d1 	.word	0x080098d1
 8005fd0:	3ff80000 	.word	0x3ff80000
 8005fd4:	08009ad0 	.word	0x08009ad0
 8005fd8:	08009975 	.word	0x08009975
 8005fdc:	08009902 	.word	0x08009902
 8005fe0:	080098d0 	.word	0x080098d0
 8005fe4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8005fe8:	6018      	str	r0, [r3, #0]
 8005fea:	9b03      	ldr	r3, [sp, #12]
 8005fec:	2b0e      	cmp	r3, #14
 8005fee:	f200 80a1 	bhi.w	8006134 <_dtoa_r+0x444>
 8005ff2:	2c00      	cmp	r4, #0
 8005ff4:	f000 809e 	beq.w	8006134 <_dtoa_r+0x444>
 8005ff8:	2f00      	cmp	r7, #0
 8005ffa:	dd33      	ble.n	8006064 <_dtoa_r+0x374>
 8005ffc:	4b9c      	ldr	r3, [pc, #624]	@ (8006270 <_dtoa_r+0x580>)
 8005ffe:	f007 020f 	and.w	r2, r7, #15
 8006002:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006006:	ed93 7b00 	vldr	d7, [r3]
 800600a:	05f8      	lsls	r0, r7, #23
 800600c:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8006010:	ea4f 1427 	mov.w	r4, r7, asr #4
 8006014:	d516      	bpl.n	8006044 <_dtoa_r+0x354>
 8006016:	4b97      	ldr	r3, [pc, #604]	@ (8006274 <_dtoa_r+0x584>)
 8006018:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800601c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006020:	f7fa fc1c 	bl	800085c <__aeabi_ddiv>
 8006024:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006028:	f004 040f 	and.w	r4, r4, #15
 800602c:	2603      	movs	r6, #3
 800602e:	4d91      	ldr	r5, [pc, #580]	@ (8006274 <_dtoa_r+0x584>)
 8006030:	b954      	cbnz	r4, 8006048 <_dtoa_r+0x358>
 8006032:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8006036:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800603a:	f7fa fc0f 	bl	800085c <__aeabi_ddiv>
 800603e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006042:	e028      	b.n	8006096 <_dtoa_r+0x3a6>
 8006044:	2602      	movs	r6, #2
 8006046:	e7f2      	b.n	800602e <_dtoa_r+0x33e>
 8006048:	07e1      	lsls	r1, r4, #31
 800604a:	d508      	bpl.n	800605e <_dtoa_r+0x36e>
 800604c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8006050:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006054:	f7fa fad8 	bl	8000608 <__aeabi_dmul>
 8006058:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800605c:	3601      	adds	r6, #1
 800605e:	1064      	asrs	r4, r4, #1
 8006060:	3508      	adds	r5, #8
 8006062:	e7e5      	b.n	8006030 <_dtoa_r+0x340>
 8006064:	f000 80af 	beq.w	80061c6 <_dtoa_r+0x4d6>
 8006068:	427c      	negs	r4, r7
 800606a:	4b81      	ldr	r3, [pc, #516]	@ (8006270 <_dtoa_r+0x580>)
 800606c:	4d81      	ldr	r5, [pc, #516]	@ (8006274 <_dtoa_r+0x584>)
 800606e:	f004 020f 	and.w	r2, r4, #15
 8006072:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006076:	e9d3 2300 	ldrd	r2, r3, [r3]
 800607a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800607e:	f7fa fac3 	bl	8000608 <__aeabi_dmul>
 8006082:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006086:	1124      	asrs	r4, r4, #4
 8006088:	2300      	movs	r3, #0
 800608a:	2602      	movs	r6, #2
 800608c:	2c00      	cmp	r4, #0
 800608e:	f040 808f 	bne.w	80061b0 <_dtoa_r+0x4c0>
 8006092:	2b00      	cmp	r3, #0
 8006094:	d1d3      	bne.n	800603e <_dtoa_r+0x34e>
 8006096:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8006098:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800609c:	2b00      	cmp	r3, #0
 800609e:	f000 8094 	beq.w	80061ca <_dtoa_r+0x4da>
 80060a2:	4b75      	ldr	r3, [pc, #468]	@ (8006278 <_dtoa_r+0x588>)
 80060a4:	2200      	movs	r2, #0
 80060a6:	4620      	mov	r0, r4
 80060a8:	4629      	mov	r1, r5
 80060aa:	f7fa fd1f 	bl	8000aec <__aeabi_dcmplt>
 80060ae:	2800      	cmp	r0, #0
 80060b0:	f000 808b 	beq.w	80061ca <_dtoa_r+0x4da>
 80060b4:	9b03      	ldr	r3, [sp, #12]
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	f000 8087 	beq.w	80061ca <_dtoa_r+0x4da>
 80060bc:	f1bb 0f00 	cmp.w	fp, #0
 80060c0:	dd34      	ble.n	800612c <_dtoa_r+0x43c>
 80060c2:	4620      	mov	r0, r4
 80060c4:	4b6d      	ldr	r3, [pc, #436]	@ (800627c <_dtoa_r+0x58c>)
 80060c6:	2200      	movs	r2, #0
 80060c8:	4629      	mov	r1, r5
 80060ca:	f7fa fa9d 	bl	8000608 <__aeabi_dmul>
 80060ce:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80060d2:	f107 38ff 	add.w	r8, r7, #4294967295
 80060d6:	3601      	adds	r6, #1
 80060d8:	465c      	mov	r4, fp
 80060da:	4630      	mov	r0, r6
 80060dc:	f7fa fa2a 	bl	8000534 <__aeabi_i2d>
 80060e0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80060e4:	f7fa fa90 	bl	8000608 <__aeabi_dmul>
 80060e8:	4b65      	ldr	r3, [pc, #404]	@ (8006280 <_dtoa_r+0x590>)
 80060ea:	2200      	movs	r2, #0
 80060ec:	f7fa f8d6 	bl	800029c <__adddf3>
 80060f0:	4605      	mov	r5, r0
 80060f2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80060f6:	2c00      	cmp	r4, #0
 80060f8:	d16a      	bne.n	80061d0 <_dtoa_r+0x4e0>
 80060fa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80060fe:	4b61      	ldr	r3, [pc, #388]	@ (8006284 <_dtoa_r+0x594>)
 8006100:	2200      	movs	r2, #0
 8006102:	f7fa f8c9 	bl	8000298 <__aeabi_dsub>
 8006106:	4602      	mov	r2, r0
 8006108:	460b      	mov	r3, r1
 800610a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800610e:	462a      	mov	r2, r5
 8006110:	4633      	mov	r3, r6
 8006112:	f7fa fd09 	bl	8000b28 <__aeabi_dcmpgt>
 8006116:	2800      	cmp	r0, #0
 8006118:	f040 8298 	bne.w	800664c <_dtoa_r+0x95c>
 800611c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006120:	462a      	mov	r2, r5
 8006122:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8006126:	f7fa fce1 	bl	8000aec <__aeabi_dcmplt>
 800612a:	bb38      	cbnz	r0, 800617c <_dtoa_r+0x48c>
 800612c:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 8006130:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8006134:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8006136:	2b00      	cmp	r3, #0
 8006138:	f2c0 8157 	blt.w	80063ea <_dtoa_r+0x6fa>
 800613c:	2f0e      	cmp	r7, #14
 800613e:	f300 8154 	bgt.w	80063ea <_dtoa_r+0x6fa>
 8006142:	4b4b      	ldr	r3, [pc, #300]	@ (8006270 <_dtoa_r+0x580>)
 8006144:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006148:	ed93 7b00 	vldr	d7, [r3]
 800614c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800614e:	2b00      	cmp	r3, #0
 8006150:	ed8d 7b00 	vstr	d7, [sp]
 8006154:	f280 80e5 	bge.w	8006322 <_dtoa_r+0x632>
 8006158:	9b03      	ldr	r3, [sp, #12]
 800615a:	2b00      	cmp	r3, #0
 800615c:	f300 80e1 	bgt.w	8006322 <_dtoa_r+0x632>
 8006160:	d10c      	bne.n	800617c <_dtoa_r+0x48c>
 8006162:	4b48      	ldr	r3, [pc, #288]	@ (8006284 <_dtoa_r+0x594>)
 8006164:	2200      	movs	r2, #0
 8006166:	ec51 0b17 	vmov	r0, r1, d7
 800616a:	f7fa fa4d 	bl	8000608 <__aeabi_dmul>
 800616e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006172:	f7fa fccf 	bl	8000b14 <__aeabi_dcmpge>
 8006176:	2800      	cmp	r0, #0
 8006178:	f000 8266 	beq.w	8006648 <_dtoa_r+0x958>
 800617c:	2400      	movs	r4, #0
 800617e:	4625      	mov	r5, r4
 8006180:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006182:	4656      	mov	r6, sl
 8006184:	ea6f 0803 	mvn.w	r8, r3
 8006188:	2700      	movs	r7, #0
 800618a:	4621      	mov	r1, r4
 800618c:	4648      	mov	r0, r9
 800618e:	f000 fcbf 	bl	8006b10 <_Bfree>
 8006192:	2d00      	cmp	r5, #0
 8006194:	f000 80bd 	beq.w	8006312 <_dtoa_r+0x622>
 8006198:	b12f      	cbz	r7, 80061a6 <_dtoa_r+0x4b6>
 800619a:	42af      	cmp	r7, r5
 800619c:	d003      	beq.n	80061a6 <_dtoa_r+0x4b6>
 800619e:	4639      	mov	r1, r7
 80061a0:	4648      	mov	r0, r9
 80061a2:	f000 fcb5 	bl	8006b10 <_Bfree>
 80061a6:	4629      	mov	r1, r5
 80061a8:	4648      	mov	r0, r9
 80061aa:	f000 fcb1 	bl	8006b10 <_Bfree>
 80061ae:	e0b0      	b.n	8006312 <_dtoa_r+0x622>
 80061b0:	07e2      	lsls	r2, r4, #31
 80061b2:	d505      	bpl.n	80061c0 <_dtoa_r+0x4d0>
 80061b4:	e9d5 2300 	ldrd	r2, r3, [r5]
 80061b8:	f7fa fa26 	bl	8000608 <__aeabi_dmul>
 80061bc:	3601      	adds	r6, #1
 80061be:	2301      	movs	r3, #1
 80061c0:	1064      	asrs	r4, r4, #1
 80061c2:	3508      	adds	r5, #8
 80061c4:	e762      	b.n	800608c <_dtoa_r+0x39c>
 80061c6:	2602      	movs	r6, #2
 80061c8:	e765      	b.n	8006096 <_dtoa_r+0x3a6>
 80061ca:	9c03      	ldr	r4, [sp, #12]
 80061cc:	46b8      	mov	r8, r7
 80061ce:	e784      	b.n	80060da <_dtoa_r+0x3ea>
 80061d0:	4b27      	ldr	r3, [pc, #156]	@ (8006270 <_dtoa_r+0x580>)
 80061d2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80061d4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80061d8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80061dc:	4454      	add	r4, sl
 80061de:	2900      	cmp	r1, #0
 80061e0:	d054      	beq.n	800628c <_dtoa_r+0x59c>
 80061e2:	4929      	ldr	r1, [pc, #164]	@ (8006288 <_dtoa_r+0x598>)
 80061e4:	2000      	movs	r0, #0
 80061e6:	f7fa fb39 	bl	800085c <__aeabi_ddiv>
 80061ea:	4633      	mov	r3, r6
 80061ec:	462a      	mov	r2, r5
 80061ee:	f7fa f853 	bl	8000298 <__aeabi_dsub>
 80061f2:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80061f6:	4656      	mov	r6, sl
 80061f8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80061fc:	f7fa fcb4 	bl	8000b68 <__aeabi_d2iz>
 8006200:	4605      	mov	r5, r0
 8006202:	f7fa f997 	bl	8000534 <__aeabi_i2d>
 8006206:	4602      	mov	r2, r0
 8006208:	460b      	mov	r3, r1
 800620a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800620e:	f7fa f843 	bl	8000298 <__aeabi_dsub>
 8006212:	3530      	adds	r5, #48	@ 0x30
 8006214:	4602      	mov	r2, r0
 8006216:	460b      	mov	r3, r1
 8006218:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800621c:	f806 5b01 	strb.w	r5, [r6], #1
 8006220:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8006224:	f7fa fc62 	bl	8000aec <__aeabi_dcmplt>
 8006228:	2800      	cmp	r0, #0
 800622a:	d172      	bne.n	8006312 <_dtoa_r+0x622>
 800622c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006230:	4911      	ldr	r1, [pc, #68]	@ (8006278 <_dtoa_r+0x588>)
 8006232:	2000      	movs	r0, #0
 8006234:	f7fa f830 	bl	8000298 <__aeabi_dsub>
 8006238:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800623c:	f7fa fc56 	bl	8000aec <__aeabi_dcmplt>
 8006240:	2800      	cmp	r0, #0
 8006242:	f040 80b4 	bne.w	80063ae <_dtoa_r+0x6be>
 8006246:	42a6      	cmp	r6, r4
 8006248:	f43f af70 	beq.w	800612c <_dtoa_r+0x43c>
 800624c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8006250:	4b0a      	ldr	r3, [pc, #40]	@ (800627c <_dtoa_r+0x58c>)
 8006252:	2200      	movs	r2, #0
 8006254:	f7fa f9d8 	bl	8000608 <__aeabi_dmul>
 8006258:	4b08      	ldr	r3, [pc, #32]	@ (800627c <_dtoa_r+0x58c>)
 800625a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800625e:	2200      	movs	r2, #0
 8006260:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006264:	f7fa f9d0 	bl	8000608 <__aeabi_dmul>
 8006268:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800626c:	e7c4      	b.n	80061f8 <_dtoa_r+0x508>
 800626e:	bf00      	nop
 8006270:	08009ad0 	.word	0x08009ad0
 8006274:	08009aa8 	.word	0x08009aa8
 8006278:	3ff00000 	.word	0x3ff00000
 800627c:	40240000 	.word	0x40240000
 8006280:	401c0000 	.word	0x401c0000
 8006284:	40140000 	.word	0x40140000
 8006288:	3fe00000 	.word	0x3fe00000
 800628c:	4631      	mov	r1, r6
 800628e:	4628      	mov	r0, r5
 8006290:	f7fa f9ba 	bl	8000608 <__aeabi_dmul>
 8006294:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8006298:	9413      	str	r4, [sp, #76]	@ 0x4c
 800629a:	4656      	mov	r6, sl
 800629c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80062a0:	f7fa fc62 	bl	8000b68 <__aeabi_d2iz>
 80062a4:	4605      	mov	r5, r0
 80062a6:	f7fa f945 	bl	8000534 <__aeabi_i2d>
 80062aa:	4602      	mov	r2, r0
 80062ac:	460b      	mov	r3, r1
 80062ae:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80062b2:	f7f9 fff1 	bl	8000298 <__aeabi_dsub>
 80062b6:	3530      	adds	r5, #48	@ 0x30
 80062b8:	f806 5b01 	strb.w	r5, [r6], #1
 80062bc:	4602      	mov	r2, r0
 80062be:	460b      	mov	r3, r1
 80062c0:	42a6      	cmp	r6, r4
 80062c2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80062c6:	f04f 0200 	mov.w	r2, #0
 80062ca:	d124      	bne.n	8006316 <_dtoa_r+0x626>
 80062cc:	4baf      	ldr	r3, [pc, #700]	@ (800658c <_dtoa_r+0x89c>)
 80062ce:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 80062d2:	f7f9 ffe3 	bl	800029c <__adddf3>
 80062d6:	4602      	mov	r2, r0
 80062d8:	460b      	mov	r3, r1
 80062da:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80062de:	f7fa fc23 	bl	8000b28 <__aeabi_dcmpgt>
 80062e2:	2800      	cmp	r0, #0
 80062e4:	d163      	bne.n	80063ae <_dtoa_r+0x6be>
 80062e6:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80062ea:	49a8      	ldr	r1, [pc, #672]	@ (800658c <_dtoa_r+0x89c>)
 80062ec:	2000      	movs	r0, #0
 80062ee:	f7f9 ffd3 	bl	8000298 <__aeabi_dsub>
 80062f2:	4602      	mov	r2, r0
 80062f4:	460b      	mov	r3, r1
 80062f6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80062fa:	f7fa fbf7 	bl	8000aec <__aeabi_dcmplt>
 80062fe:	2800      	cmp	r0, #0
 8006300:	f43f af14 	beq.w	800612c <_dtoa_r+0x43c>
 8006304:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8006306:	1e73      	subs	r3, r6, #1
 8006308:	9313      	str	r3, [sp, #76]	@ 0x4c
 800630a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800630e:	2b30      	cmp	r3, #48	@ 0x30
 8006310:	d0f8      	beq.n	8006304 <_dtoa_r+0x614>
 8006312:	4647      	mov	r7, r8
 8006314:	e03b      	b.n	800638e <_dtoa_r+0x69e>
 8006316:	4b9e      	ldr	r3, [pc, #632]	@ (8006590 <_dtoa_r+0x8a0>)
 8006318:	f7fa f976 	bl	8000608 <__aeabi_dmul>
 800631c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006320:	e7bc      	b.n	800629c <_dtoa_r+0x5ac>
 8006322:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8006326:	4656      	mov	r6, sl
 8006328:	e9dd 2300 	ldrd	r2, r3, [sp]
 800632c:	4620      	mov	r0, r4
 800632e:	4629      	mov	r1, r5
 8006330:	f7fa fa94 	bl	800085c <__aeabi_ddiv>
 8006334:	f7fa fc18 	bl	8000b68 <__aeabi_d2iz>
 8006338:	4680      	mov	r8, r0
 800633a:	f7fa f8fb 	bl	8000534 <__aeabi_i2d>
 800633e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006342:	f7fa f961 	bl	8000608 <__aeabi_dmul>
 8006346:	4602      	mov	r2, r0
 8006348:	460b      	mov	r3, r1
 800634a:	4620      	mov	r0, r4
 800634c:	4629      	mov	r1, r5
 800634e:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8006352:	f7f9 ffa1 	bl	8000298 <__aeabi_dsub>
 8006356:	f806 4b01 	strb.w	r4, [r6], #1
 800635a:	9d03      	ldr	r5, [sp, #12]
 800635c:	eba6 040a 	sub.w	r4, r6, sl
 8006360:	42a5      	cmp	r5, r4
 8006362:	4602      	mov	r2, r0
 8006364:	460b      	mov	r3, r1
 8006366:	d133      	bne.n	80063d0 <_dtoa_r+0x6e0>
 8006368:	f7f9 ff98 	bl	800029c <__adddf3>
 800636c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006370:	4604      	mov	r4, r0
 8006372:	460d      	mov	r5, r1
 8006374:	f7fa fbd8 	bl	8000b28 <__aeabi_dcmpgt>
 8006378:	b9c0      	cbnz	r0, 80063ac <_dtoa_r+0x6bc>
 800637a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800637e:	4620      	mov	r0, r4
 8006380:	4629      	mov	r1, r5
 8006382:	f7fa fba9 	bl	8000ad8 <__aeabi_dcmpeq>
 8006386:	b110      	cbz	r0, 800638e <_dtoa_r+0x69e>
 8006388:	f018 0f01 	tst.w	r8, #1
 800638c:	d10e      	bne.n	80063ac <_dtoa_r+0x6bc>
 800638e:	9902      	ldr	r1, [sp, #8]
 8006390:	4648      	mov	r0, r9
 8006392:	f000 fbbd 	bl	8006b10 <_Bfree>
 8006396:	2300      	movs	r3, #0
 8006398:	7033      	strb	r3, [r6, #0]
 800639a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800639c:	3701      	adds	r7, #1
 800639e:	601f      	str	r7, [r3, #0]
 80063a0:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	f000 824b 	beq.w	800683e <_dtoa_r+0xb4e>
 80063a8:	601e      	str	r6, [r3, #0]
 80063aa:	e248      	b.n	800683e <_dtoa_r+0xb4e>
 80063ac:	46b8      	mov	r8, r7
 80063ae:	4633      	mov	r3, r6
 80063b0:	461e      	mov	r6, r3
 80063b2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80063b6:	2a39      	cmp	r2, #57	@ 0x39
 80063b8:	d106      	bne.n	80063c8 <_dtoa_r+0x6d8>
 80063ba:	459a      	cmp	sl, r3
 80063bc:	d1f8      	bne.n	80063b0 <_dtoa_r+0x6c0>
 80063be:	2230      	movs	r2, #48	@ 0x30
 80063c0:	f108 0801 	add.w	r8, r8, #1
 80063c4:	f88a 2000 	strb.w	r2, [sl]
 80063c8:	781a      	ldrb	r2, [r3, #0]
 80063ca:	3201      	adds	r2, #1
 80063cc:	701a      	strb	r2, [r3, #0]
 80063ce:	e7a0      	b.n	8006312 <_dtoa_r+0x622>
 80063d0:	4b6f      	ldr	r3, [pc, #444]	@ (8006590 <_dtoa_r+0x8a0>)
 80063d2:	2200      	movs	r2, #0
 80063d4:	f7fa f918 	bl	8000608 <__aeabi_dmul>
 80063d8:	2200      	movs	r2, #0
 80063da:	2300      	movs	r3, #0
 80063dc:	4604      	mov	r4, r0
 80063de:	460d      	mov	r5, r1
 80063e0:	f7fa fb7a 	bl	8000ad8 <__aeabi_dcmpeq>
 80063e4:	2800      	cmp	r0, #0
 80063e6:	d09f      	beq.n	8006328 <_dtoa_r+0x638>
 80063e8:	e7d1      	b.n	800638e <_dtoa_r+0x69e>
 80063ea:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80063ec:	2a00      	cmp	r2, #0
 80063ee:	f000 80ea 	beq.w	80065c6 <_dtoa_r+0x8d6>
 80063f2:	9a07      	ldr	r2, [sp, #28]
 80063f4:	2a01      	cmp	r2, #1
 80063f6:	f300 80cd 	bgt.w	8006594 <_dtoa_r+0x8a4>
 80063fa:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80063fc:	2a00      	cmp	r2, #0
 80063fe:	f000 80c1 	beq.w	8006584 <_dtoa_r+0x894>
 8006402:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8006406:	9c08      	ldr	r4, [sp, #32]
 8006408:	9e00      	ldr	r6, [sp, #0]
 800640a:	9a00      	ldr	r2, [sp, #0]
 800640c:	441a      	add	r2, r3
 800640e:	9200      	str	r2, [sp, #0]
 8006410:	9a06      	ldr	r2, [sp, #24]
 8006412:	2101      	movs	r1, #1
 8006414:	441a      	add	r2, r3
 8006416:	4648      	mov	r0, r9
 8006418:	9206      	str	r2, [sp, #24]
 800641a:	f000 fc77 	bl	8006d0c <__i2b>
 800641e:	4605      	mov	r5, r0
 8006420:	b166      	cbz	r6, 800643c <_dtoa_r+0x74c>
 8006422:	9b06      	ldr	r3, [sp, #24]
 8006424:	2b00      	cmp	r3, #0
 8006426:	dd09      	ble.n	800643c <_dtoa_r+0x74c>
 8006428:	42b3      	cmp	r3, r6
 800642a:	9a00      	ldr	r2, [sp, #0]
 800642c:	bfa8      	it	ge
 800642e:	4633      	movge	r3, r6
 8006430:	1ad2      	subs	r2, r2, r3
 8006432:	9200      	str	r2, [sp, #0]
 8006434:	9a06      	ldr	r2, [sp, #24]
 8006436:	1af6      	subs	r6, r6, r3
 8006438:	1ad3      	subs	r3, r2, r3
 800643a:	9306      	str	r3, [sp, #24]
 800643c:	9b08      	ldr	r3, [sp, #32]
 800643e:	b30b      	cbz	r3, 8006484 <_dtoa_r+0x794>
 8006440:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006442:	2b00      	cmp	r3, #0
 8006444:	f000 80c6 	beq.w	80065d4 <_dtoa_r+0x8e4>
 8006448:	2c00      	cmp	r4, #0
 800644a:	f000 80c0 	beq.w	80065ce <_dtoa_r+0x8de>
 800644e:	4629      	mov	r1, r5
 8006450:	4622      	mov	r2, r4
 8006452:	4648      	mov	r0, r9
 8006454:	f000 fd12 	bl	8006e7c <__pow5mult>
 8006458:	9a02      	ldr	r2, [sp, #8]
 800645a:	4601      	mov	r1, r0
 800645c:	4605      	mov	r5, r0
 800645e:	4648      	mov	r0, r9
 8006460:	f000 fc6a 	bl	8006d38 <__multiply>
 8006464:	9902      	ldr	r1, [sp, #8]
 8006466:	4680      	mov	r8, r0
 8006468:	4648      	mov	r0, r9
 800646a:	f000 fb51 	bl	8006b10 <_Bfree>
 800646e:	9b08      	ldr	r3, [sp, #32]
 8006470:	1b1b      	subs	r3, r3, r4
 8006472:	9308      	str	r3, [sp, #32]
 8006474:	f000 80b1 	beq.w	80065da <_dtoa_r+0x8ea>
 8006478:	9a08      	ldr	r2, [sp, #32]
 800647a:	4641      	mov	r1, r8
 800647c:	4648      	mov	r0, r9
 800647e:	f000 fcfd 	bl	8006e7c <__pow5mult>
 8006482:	9002      	str	r0, [sp, #8]
 8006484:	2101      	movs	r1, #1
 8006486:	4648      	mov	r0, r9
 8006488:	f000 fc40 	bl	8006d0c <__i2b>
 800648c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800648e:	4604      	mov	r4, r0
 8006490:	2b00      	cmp	r3, #0
 8006492:	f000 81d8 	beq.w	8006846 <_dtoa_r+0xb56>
 8006496:	461a      	mov	r2, r3
 8006498:	4601      	mov	r1, r0
 800649a:	4648      	mov	r0, r9
 800649c:	f000 fcee 	bl	8006e7c <__pow5mult>
 80064a0:	9b07      	ldr	r3, [sp, #28]
 80064a2:	2b01      	cmp	r3, #1
 80064a4:	4604      	mov	r4, r0
 80064a6:	f300 809f 	bgt.w	80065e8 <_dtoa_r+0x8f8>
 80064aa:	9b04      	ldr	r3, [sp, #16]
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	f040 8097 	bne.w	80065e0 <_dtoa_r+0x8f0>
 80064b2:	9b05      	ldr	r3, [sp, #20]
 80064b4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	f040 8093 	bne.w	80065e4 <_dtoa_r+0x8f4>
 80064be:	9b05      	ldr	r3, [sp, #20]
 80064c0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80064c4:	0d1b      	lsrs	r3, r3, #20
 80064c6:	051b      	lsls	r3, r3, #20
 80064c8:	b133      	cbz	r3, 80064d8 <_dtoa_r+0x7e8>
 80064ca:	9b00      	ldr	r3, [sp, #0]
 80064cc:	3301      	adds	r3, #1
 80064ce:	9300      	str	r3, [sp, #0]
 80064d0:	9b06      	ldr	r3, [sp, #24]
 80064d2:	3301      	adds	r3, #1
 80064d4:	9306      	str	r3, [sp, #24]
 80064d6:	2301      	movs	r3, #1
 80064d8:	9308      	str	r3, [sp, #32]
 80064da:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80064dc:	2b00      	cmp	r3, #0
 80064de:	f000 81b8 	beq.w	8006852 <_dtoa_r+0xb62>
 80064e2:	6923      	ldr	r3, [r4, #16]
 80064e4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80064e8:	6918      	ldr	r0, [r3, #16]
 80064ea:	f000 fbc3 	bl	8006c74 <__hi0bits>
 80064ee:	f1c0 0020 	rsb	r0, r0, #32
 80064f2:	9b06      	ldr	r3, [sp, #24]
 80064f4:	4418      	add	r0, r3
 80064f6:	f010 001f 	ands.w	r0, r0, #31
 80064fa:	f000 8082 	beq.w	8006602 <_dtoa_r+0x912>
 80064fe:	f1c0 0320 	rsb	r3, r0, #32
 8006502:	2b04      	cmp	r3, #4
 8006504:	dd73      	ble.n	80065ee <_dtoa_r+0x8fe>
 8006506:	9b00      	ldr	r3, [sp, #0]
 8006508:	f1c0 001c 	rsb	r0, r0, #28
 800650c:	4403      	add	r3, r0
 800650e:	9300      	str	r3, [sp, #0]
 8006510:	9b06      	ldr	r3, [sp, #24]
 8006512:	4403      	add	r3, r0
 8006514:	4406      	add	r6, r0
 8006516:	9306      	str	r3, [sp, #24]
 8006518:	9b00      	ldr	r3, [sp, #0]
 800651a:	2b00      	cmp	r3, #0
 800651c:	dd05      	ble.n	800652a <_dtoa_r+0x83a>
 800651e:	9902      	ldr	r1, [sp, #8]
 8006520:	461a      	mov	r2, r3
 8006522:	4648      	mov	r0, r9
 8006524:	f000 fd04 	bl	8006f30 <__lshift>
 8006528:	9002      	str	r0, [sp, #8]
 800652a:	9b06      	ldr	r3, [sp, #24]
 800652c:	2b00      	cmp	r3, #0
 800652e:	dd05      	ble.n	800653c <_dtoa_r+0x84c>
 8006530:	4621      	mov	r1, r4
 8006532:	461a      	mov	r2, r3
 8006534:	4648      	mov	r0, r9
 8006536:	f000 fcfb 	bl	8006f30 <__lshift>
 800653a:	4604      	mov	r4, r0
 800653c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800653e:	2b00      	cmp	r3, #0
 8006540:	d061      	beq.n	8006606 <_dtoa_r+0x916>
 8006542:	9802      	ldr	r0, [sp, #8]
 8006544:	4621      	mov	r1, r4
 8006546:	f000 fd5f 	bl	8007008 <__mcmp>
 800654a:	2800      	cmp	r0, #0
 800654c:	da5b      	bge.n	8006606 <_dtoa_r+0x916>
 800654e:	2300      	movs	r3, #0
 8006550:	9902      	ldr	r1, [sp, #8]
 8006552:	220a      	movs	r2, #10
 8006554:	4648      	mov	r0, r9
 8006556:	f000 fafd 	bl	8006b54 <__multadd>
 800655a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800655c:	9002      	str	r0, [sp, #8]
 800655e:	f107 38ff 	add.w	r8, r7, #4294967295
 8006562:	2b00      	cmp	r3, #0
 8006564:	f000 8177 	beq.w	8006856 <_dtoa_r+0xb66>
 8006568:	4629      	mov	r1, r5
 800656a:	2300      	movs	r3, #0
 800656c:	220a      	movs	r2, #10
 800656e:	4648      	mov	r0, r9
 8006570:	f000 faf0 	bl	8006b54 <__multadd>
 8006574:	f1bb 0f00 	cmp.w	fp, #0
 8006578:	4605      	mov	r5, r0
 800657a:	dc6f      	bgt.n	800665c <_dtoa_r+0x96c>
 800657c:	9b07      	ldr	r3, [sp, #28]
 800657e:	2b02      	cmp	r3, #2
 8006580:	dc49      	bgt.n	8006616 <_dtoa_r+0x926>
 8006582:	e06b      	b.n	800665c <_dtoa_r+0x96c>
 8006584:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8006586:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800658a:	e73c      	b.n	8006406 <_dtoa_r+0x716>
 800658c:	3fe00000 	.word	0x3fe00000
 8006590:	40240000 	.word	0x40240000
 8006594:	9b03      	ldr	r3, [sp, #12]
 8006596:	1e5c      	subs	r4, r3, #1
 8006598:	9b08      	ldr	r3, [sp, #32]
 800659a:	42a3      	cmp	r3, r4
 800659c:	db09      	blt.n	80065b2 <_dtoa_r+0x8c2>
 800659e:	1b1c      	subs	r4, r3, r4
 80065a0:	9b03      	ldr	r3, [sp, #12]
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	f6bf af30 	bge.w	8006408 <_dtoa_r+0x718>
 80065a8:	9b00      	ldr	r3, [sp, #0]
 80065aa:	9a03      	ldr	r2, [sp, #12]
 80065ac:	1a9e      	subs	r6, r3, r2
 80065ae:	2300      	movs	r3, #0
 80065b0:	e72b      	b.n	800640a <_dtoa_r+0x71a>
 80065b2:	9b08      	ldr	r3, [sp, #32]
 80065b4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80065b6:	9408      	str	r4, [sp, #32]
 80065b8:	1ae3      	subs	r3, r4, r3
 80065ba:	441a      	add	r2, r3
 80065bc:	9e00      	ldr	r6, [sp, #0]
 80065be:	9b03      	ldr	r3, [sp, #12]
 80065c0:	920d      	str	r2, [sp, #52]	@ 0x34
 80065c2:	2400      	movs	r4, #0
 80065c4:	e721      	b.n	800640a <_dtoa_r+0x71a>
 80065c6:	9c08      	ldr	r4, [sp, #32]
 80065c8:	9e00      	ldr	r6, [sp, #0]
 80065ca:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 80065cc:	e728      	b.n	8006420 <_dtoa_r+0x730>
 80065ce:	f8dd 8008 	ldr.w	r8, [sp, #8]
 80065d2:	e751      	b.n	8006478 <_dtoa_r+0x788>
 80065d4:	9a08      	ldr	r2, [sp, #32]
 80065d6:	9902      	ldr	r1, [sp, #8]
 80065d8:	e750      	b.n	800647c <_dtoa_r+0x78c>
 80065da:	f8cd 8008 	str.w	r8, [sp, #8]
 80065de:	e751      	b.n	8006484 <_dtoa_r+0x794>
 80065e0:	2300      	movs	r3, #0
 80065e2:	e779      	b.n	80064d8 <_dtoa_r+0x7e8>
 80065e4:	9b04      	ldr	r3, [sp, #16]
 80065e6:	e777      	b.n	80064d8 <_dtoa_r+0x7e8>
 80065e8:	2300      	movs	r3, #0
 80065ea:	9308      	str	r3, [sp, #32]
 80065ec:	e779      	b.n	80064e2 <_dtoa_r+0x7f2>
 80065ee:	d093      	beq.n	8006518 <_dtoa_r+0x828>
 80065f0:	9a00      	ldr	r2, [sp, #0]
 80065f2:	331c      	adds	r3, #28
 80065f4:	441a      	add	r2, r3
 80065f6:	9200      	str	r2, [sp, #0]
 80065f8:	9a06      	ldr	r2, [sp, #24]
 80065fa:	441a      	add	r2, r3
 80065fc:	441e      	add	r6, r3
 80065fe:	9206      	str	r2, [sp, #24]
 8006600:	e78a      	b.n	8006518 <_dtoa_r+0x828>
 8006602:	4603      	mov	r3, r0
 8006604:	e7f4      	b.n	80065f0 <_dtoa_r+0x900>
 8006606:	9b03      	ldr	r3, [sp, #12]
 8006608:	2b00      	cmp	r3, #0
 800660a:	46b8      	mov	r8, r7
 800660c:	dc20      	bgt.n	8006650 <_dtoa_r+0x960>
 800660e:	469b      	mov	fp, r3
 8006610:	9b07      	ldr	r3, [sp, #28]
 8006612:	2b02      	cmp	r3, #2
 8006614:	dd1e      	ble.n	8006654 <_dtoa_r+0x964>
 8006616:	f1bb 0f00 	cmp.w	fp, #0
 800661a:	f47f adb1 	bne.w	8006180 <_dtoa_r+0x490>
 800661e:	4621      	mov	r1, r4
 8006620:	465b      	mov	r3, fp
 8006622:	2205      	movs	r2, #5
 8006624:	4648      	mov	r0, r9
 8006626:	f000 fa95 	bl	8006b54 <__multadd>
 800662a:	4601      	mov	r1, r0
 800662c:	4604      	mov	r4, r0
 800662e:	9802      	ldr	r0, [sp, #8]
 8006630:	f000 fcea 	bl	8007008 <__mcmp>
 8006634:	2800      	cmp	r0, #0
 8006636:	f77f ada3 	ble.w	8006180 <_dtoa_r+0x490>
 800663a:	4656      	mov	r6, sl
 800663c:	2331      	movs	r3, #49	@ 0x31
 800663e:	f806 3b01 	strb.w	r3, [r6], #1
 8006642:	f108 0801 	add.w	r8, r8, #1
 8006646:	e59f      	b.n	8006188 <_dtoa_r+0x498>
 8006648:	9c03      	ldr	r4, [sp, #12]
 800664a:	46b8      	mov	r8, r7
 800664c:	4625      	mov	r5, r4
 800664e:	e7f4      	b.n	800663a <_dtoa_r+0x94a>
 8006650:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8006654:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006656:	2b00      	cmp	r3, #0
 8006658:	f000 8101 	beq.w	800685e <_dtoa_r+0xb6e>
 800665c:	2e00      	cmp	r6, #0
 800665e:	dd05      	ble.n	800666c <_dtoa_r+0x97c>
 8006660:	4629      	mov	r1, r5
 8006662:	4632      	mov	r2, r6
 8006664:	4648      	mov	r0, r9
 8006666:	f000 fc63 	bl	8006f30 <__lshift>
 800666a:	4605      	mov	r5, r0
 800666c:	9b08      	ldr	r3, [sp, #32]
 800666e:	2b00      	cmp	r3, #0
 8006670:	d05c      	beq.n	800672c <_dtoa_r+0xa3c>
 8006672:	6869      	ldr	r1, [r5, #4]
 8006674:	4648      	mov	r0, r9
 8006676:	f000 fa0b 	bl	8006a90 <_Balloc>
 800667a:	4606      	mov	r6, r0
 800667c:	b928      	cbnz	r0, 800668a <_dtoa_r+0x99a>
 800667e:	4b82      	ldr	r3, [pc, #520]	@ (8006888 <_dtoa_r+0xb98>)
 8006680:	4602      	mov	r2, r0
 8006682:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8006686:	f7ff bb4a 	b.w	8005d1e <_dtoa_r+0x2e>
 800668a:	692a      	ldr	r2, [r5, #16]
 800668c:	3202      	adds	r2, #2
 800668e:	0092      	lsls	r2, r2, #2
 8006690:	f105 010c 	add.w	r1, r5, #12
 8006694:	300c      	adds	r0, #12
 8006696:	f001 ff69 	bl	800856c <memcpy>
 800669a:	2201      	movs	r2, #1
 800669c:	4631      	mov	r1, r6
 800669e:	4648      	mov	r0, r9
 80066a0:	f000 fc46 	bl	8006f30 <__lshift>
 80066a4:	f10a 0301 	add.w	r3, sl, #1
 80066a8:	9300      	str	r3, [sp, #0]
 80066aa:	eb0a 030b 	add.w	r3, sl, fp
 80066ae:	9308      	str	r3, [sp, #32]
 80066b0:	9b04      	ldr	r3, [sp, #16]
 80066b2:	f003 0301 	and.w	r3, r3, #1
 80066b6:	462f      	mov	r7, r5
 80066b8:	9306      	str	r3, [sp, #24]
 80066ba:	4605      	mov	r5, r0
 80066bc:	9b00      	ldr	r3, [sp, #0]
 80066be:	9802      	ldr	r0, [sp, #8]
 80066c0:	4621      	mov	r1, r4
 80066c2:	f103 3bff 	add.w	fp, r3, #4294967295
 80066c6:	f7ff fa89 	bl	8005bdc <quorem>
 80066ca:	4603      	mov	r3, r0
 80066cc:	3330      	adds	r3, #48	@ 0x30
 80066ce:	9003      	str	r0, [sp, #12]
 80066d0:	4639      	mov	r1, r7
 80066d2:	9802      	ldr	r0, [sp, #8]
 80066d4:	9309      	str	r3, [sp, #36]	@ 0x24
 80066d6:	f000 fc97 	bl	8007008 <__mcmp>
 80066da:	462a      	mov	r2, r5
 80066dc:	9004      	str	r0, [sp, #16]
 80066de:	4621      	mov	r1, r4
 80066e0:	4648      	mov	r0, r9
 80066e2:	f000 fcad 	bl	8007040 <__mdiff>
 80066e6:	68c2      	ldr	r2, [r0, #12]
 80066e8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80066ea:	4606      	mov	r6, r0
 80066ec:	bb02      	cbnz	r2, 8006730 <_dtoa_r+0xa40>
 80066ee:	4601      	mov	r1, r0
 80066f0:	9802      	ldr	r0, [sp, #8]
 80066f2:	f000 fc89 	bl	8007008 <__mcmp>
 80066f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80066f8:	4602      	mov	r2, r0
 80066fa:	4631      	mov	r1, r6
 80066fc:	4648      	mov	r0, r9
 80066fe:	920c      	str	r2, [sp, #48]	@ 0x30
 8006700:	9309      	str	r3, [sp, #36]	@ 0x24
 8006702:	f000 fa05 	bl	8006b10 <_Bfree>
 8006706:	9b07      	ldr	r3, [sp, #28]
 8006708:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800670a:	9e00      	ldr	r6, [sp, #0]
 800670c:	ea42 0103 	orr.w	r1, r2, r3
 8006710:	9b06      	ldr	r3, [sp, #24]
 8006712:	4319      	orrs	r1, r3
 8006714:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006716:	d10d      	bne.n	8006734 <_dtoa_r+0xa44>
 8006718:	2b39      	cmp	r3, #57	@ 0x39
 800671a:	d027      	beq.n	800676c <_dtoa_r+0xa7c>
 800671c:	9a04      	ldr	r2, [sp, #16]
 800671e:	2a00      	cmp	r2, #0
 8006720:	dd01      	ble.n	8006726 <_dtoa_r+0xa36>
 8006722:	9b03      	ldr	r3, [sp, #12]
 8006724:	3331      	adds	r3, #49	@ 0x31
 8006726:	f88b 3000 	strb.w	r3, [fp]
 800672a:	e52e      	b.n	800618a <_dtoa_r+0x49a>
 800672c:	4628      	mov	r0, r5
 800672e:	e7b9      	b.n	80066a4 <_dtoa_r+0x9b4>
 8006730:	2201      	movs	r2, #1
 8006732:	e7e2      	b.n	80066fa <_dtoa_r+0xa0a>
 8006734:	9904      	ldr	r1, [sp, #16]
 8006736:	2900      	cmp	r1, #0
 8006738:	db04      	blt.n	8006744 <_dtoa_r+0xa54>
 800673a:	9807      	ldr	r0, [sp, #28]
 800673c:	4301      	orrs	r1, r0
 800673e:	9806      	ldr	r0, [sp, #24]
 8006740:	4301      	orrs	r1, r0
 8006742:	d120      	bne.n	8006786 <_dtoa_r+0xa96>
 8006744:	2a00      	cmp	r2, #0
 8006746:	ddee      	ble.n	8006726 <_dtoa_r+0xa36>
 8006748:	9902      	ldr	r1, [sp, #8]
 800674a:	9300      	str	r3, [sp, #0]
 800674c:	2201      	movs	r2, #1
 800674e:	4648      	mov	r0, r9
 8006750:	f000 fbee 	bl	8006f30 <__lshift>
 8006754:	4621      	mov	r1, r4
 8006756:	9002      	str	r0, [sp, #8]
 8006758:	f000 fc56 	bl	8007008 <__mcmp>
 800675c:	2800      	cmp	r0, #0
 800675e:	9b00      	ldr	r3, [sp, #0]
 8006760:	dc02      	bgt.n	8006768 <_dtoa_r+0xa78>
 8006762:	d1e0      	bne.n	8006726 <_dtoa_r+0xa36>
 8006764:	07da      	lsls	r2, r3, #31
 8006766:	d5de      	bpl.n	8006726 <_dtoa_r+0xa36>
 8006768:	2b39      	cmp	r3, #57	@ 0x39
 800676a:	d1da      	bne.n	8006722 <_dtoa_r+0xa32>
 800676c:	2339      	movs	r3, #57	@ 0x39
 800676e:	f88b 3000 	strb.w	r3, [fp]
 8006772:	4633      	mov	r3, r6
 8006774:	461e      	mov	r6, r3
 8006776:	3b01      	subs	r3, #1
 8006778:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800677c:	2a39      	cmp	r2, #57	@ 0x39
 800677e:	d04e      	beq.n	800681e <_dtoa_r+0xb2e>
 8006780:	3201      	adds	r2, #1
 8006782:	701a      	strb	r2, [r3, #0]
 8006784:	e501      	b.n	800618a <_dtoa_r+0x49a>
 8006786:	2a00      	cmp	r2, #0
 8006788:	dd03      	ble.n	8006792 <_dtoa_r+0xaa2>
 800678a:	2b39      	cmp	r3, #57	@ 0x39
 800678c:	d0ee      	beq.n	800676c <_dtoa_r+0xa7c>
 800678e:	3301      	adds	r3, #1
 8006790:	e7c9      	b.n	8006726 <_dtoa_r+0xa36>
 8006792:	9a00      	ldr	r2, [sp, #0]
 8006794:	9908      	ldr	r1, [sp, #32]
 8006796:	f802 3c01 	strb.w	r3, [r2, #-1]
 800679a:	428a      	cmp	r2, r1
 800679c:	d028      	beq.n	80067f0 <_dtoa_r+0xb00>
 800679e:	9902      	ldr	r1, [sp, #8]
 80067a0:	2300      	movs	r3, #0
 80067a2:	220a      	movs	r2, #10
 80067a4:	4648      	mov	r0, r9
 80067a6:	f000 f9d5 	bl	8006b54 <__multadd>
 80067aa:	42af      	cmp	r7, r5
 80067ac:	9002      	str	r0, [sp, #8]
 80067ae:	f04f 0300 	mov.w	r3, #0
 80067b2:	f04f 020a 	mov.w	r2, #10
 80067b6:	4639      	mov	r1, r7
 80067b8:	4648      	mov	r0, r9
 80067ba:	d107      	bne.n	80067cc <_dtoa_r+0xadc>
 80067bc:	f000 f9ca 	bl	8006b54 <__multadd>
 80067c0:	4607      	mov	r7, r0
 80067c2:	4605      	mov	r5, r0
 80067c4:	9b00      	ldr	r3, [sp, #0]
 80067c6:	3301      	adds	r3, #1
 80067c8:	9300      	str	r3, [sp, #0]
 80067ca:	e777      	b.n	80066bc <_dtoa_r+0x9cc>
 80067cc:	f000 f9c2 	bl	8006b54 <__multadd>
 80067d0:	4629      	mov	r1, r5
 80067d2:	4607      	mov	r7, r0
 80067d4:	2300      	movs	r3, #0
 80067d6:	220a      	movs	r2, #10
 80067d8:	4648      	mov	r0, r9
 80067da:	f000 f9bb 	bl	8006b54 <__multadd>
 80067de:	4605      	mov	r5, r0
 80067e0:	e7f0      	b.n	80067c4 <_dtoa_r+0xad4>
 80067e2:	f1bb 0f00 	cmp.w	fp, #0
 80067e6:	bfcc      	ite	gt
 80067e8:	465e      	movgt	r6, fp
 80067ea:	2601      	movle	r6, #1
 80067ec:	4456      	add	r6, sl
 80067ee:	2700      	movs	r7, #0
 80067f0:	9902      	ldr	r1, [sp, #8]
 80067f2:	9300      	str	r3, [sp, #0]
 80067f4:	2201      	movs	r2, #1
 80067f6:	4648      	mov	r0, r9
 80067f8:	f000 fb9a 	bl	8006f30 <__lshift>
 80067fc:	4621      	mov	r1, r4
 80067fe:	9002      	str	r0, [sp, #8]
 8006800:	f000 fc02 	bl	8007008 <__mcmp>
 8006804:	2800      	cmp	r0, #0
 8006806:	dcb4      	bgt.n	8006772 <_dtoa_r+0xa82>
 8006808:	d102      	bne.n	8006810 <_dtoa_r+0xb20>
 800680a:	9b00      	ldr	r3, [sp, #0]
 800680c:	07db      	lsls	r3, r3, #31
 800680e:	d4b0      	bmi.n	8006772 <_dtoa_r+0xa82>
 8006810:	4633      	mov	r3, r6
 8006812:	461e      	mov	r6, r3
 8006814:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006818:	2a30      	cmp	r2, #48	@ 0x30
 800681a:	d0fa      	beq.n	8006812 <_dtoa_r+0xb22>
 800681c:	e4b5      	b.n	800618a <_dtoa_r+0x49a>
 800681e:	459a      	cmp	sl, r3
 8006820:	d1a8      	bne.n	8006774 <_dtoa_r+0xa84>
 8006822:	2331      	movs	r3, #49	@ 0x31
 8006824:	f108 0801 	add.w	r8, r8, #1
 8006828:	f88a 3000 	strb.w	r3, [sl]
 800682c:	e4ad      	b.n	800618a <_dtoa_r+0x49a>
 800682e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006830:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800688c <_dtoa_r+0xb9c>
 8006834:	b11b      	cbz	r3, 800683e <_dtoa_r+0xb4e>
 8006836:	f10a 0308 	add.w	r3, sl, #8
 800683a:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800683c:	6013      	str	r3, [r2, #0]
 800683e:	4650      	mov	r0, sl
 8006840:	b017      	add	sp, #92	@ 0x5c
 8006842:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006846:	9b07      	ldr	r3, [sp, #28]
 8006848:	2b01      	cmp	r3, #1
 800684a:	f77f ae2e 	ble.w	80064aa <_dtoa_r+0x7ba>
 800684e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006850:	9308      	str	r3, [sp, #32]
 8006852:	2001      	movs	r0, #1
 8006854:	e64d      	b.n	80064f2 <_dtoa_r+0x802>
 8006856:	f1bb 0f00 	cmp.w	fp, #0
 800685a:	f77f aed9 	ble.w	8006610 <_dtoa_r+0x920>
 800685e:	4656      	mov	r6, sl
 8006860:	9802      	ldr	r0, [sp, #8]
 8006862:	4621      	mov	r1, r4
 8006864:	f7ff f9ba 	bl	8005bdc <quorem>
 8006868:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800686c:	f806 3b01 	strb.w	r3, [r6], #1
 8006870:	eba6 020a 	sub.w	r2, r6, sl
 8006874:	4593      	cmp	fp, r2
 8006876:	ddb4      	ble.n	80067e2 <_dtoa_r+0xaf2>
 8006878:	9902      	ldr	r1, [sp, #8]
 800687a:	2300      	movs	r3, #0
 800687c:	220a      	movs	r2, #10
 800687e:	4648      	mov	r0, r9
 8006880:	f000 f968 	bl	8006b54 <__multadd>
 8006884:	9002      	str	r0, [sp, #8]
 8006886:	e7eb      	b.n	8006860 <_dtoa_r+0xb70>
 8006888:	08009975 	.word	0x08009975
 800688c:	080098f9 	.word	0x080098f9

08006890 <_free_r>:
 8006890:	b538      	push	{r3, r4, r5, lr}
 8006892:	4605      	mov	r5, r0
 8006894:	2900      	cmp	r1, #0
 8006896:	d041      	beq.n	800691c <_free_r+0x8c>
 8006898:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800689c:	1f0c      	subs	r4, r1, #4
 800689e:	2b00      	cmp	r3, #0
 80068a0:	bfb8      	it	lt
 80068a2:	18e4      	addlt	r4, r4, r3
 80068a4:	f000 f8e8 	bl	8006a78 <__malloc_lock>
 80068a8:	4a1d      	ldr	r2, [pc, #116]	@ (8006920 <_free_r+0x90>)
 80068aa:	6813      	ldr	r3, [r2, #0]
 80068ac:	b933      	cbnz	r3, 80068bc <_free_r+0x2c>
 80068ae:	6063      	str	r3, [r4, #4]
 80068b0:	6014      	str	r4, [r2, #0]
 80068b2:	4628      	mov	r0, r5
 80068b4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80068b8:	f000 b8e4 	b.w	8006a84 <__malloc_unlock>
 80068bc:	42a3      	cmp	r3, r4
 80068be:	d908      	bls.n	80068d2 <_free_r+0x42>
 80068c0:	6820      	ldr	r0, [r4, #0]
 80068c2:	1821      	adds	r1, r4, r0
 80068c4:	428b      	cmp	r3, r1
 80068c6:	bf01      	itttt	eq
 80068c8:	6819      	ldreq	r1, [r3, #0]
 80068ca:	685b      	ldreq	r3, [r3, #4]
 80068cc:	1809      	addeq	r1, r1, r0
 80068ce:	6021      	streq	r1, [r4, #0]
 80068d0:	e7ed      	b.n	80068ae <_free_r+0x1e>
 80068d2:	461a      	mov	r2, r3
 80068d4:	685b      	ldr	r3, [r3, #4]
 80068d6:	b10b      	cbz	r3, 80068dc <_free_r+0x4c>
 80068d8:	42a3      	cmp	r3, r4
 80068da:	d9fa      	bls.n	80068d2 <_free_r+0x42>
 80068dc:	6811      	ldr	r1, [r2, #0]
 80068de:	1850      	adds	r0, r2, r1
 80068e0:	42a0      	cmp	r0, r4
 80068e2:	d10b      	bne.n	80068fc <_free_r+0x6c>
 80068e4:	6820      	ldr	r0, [r4, #0]
 80068e6:	4401      	add	r1, r0
 80068e8:	1850      	adds	r0, r2, r1
 80068ea:	4283      	cmp	r3, r0
 80068ec:	6011      	str	r1, [r2, #0]
 80068ee:	d1e0      	bne.n	80068b2 <_free_r+0x22>
 80068f0:	6818      	ldr	r0, [r3, #0]
 80068f2:	685b      	ldr	r3, [r3, #4]
 80068f4:	6053      	str	r3, [r2, #4]
 80068f6:	4408      	add	r0, r1
 80068f8:	6010      	str	r0, [r2, #0]
 80068fa:	e7da      	b.n	80068b2 <_free_r+0x22>
 80068fc:	d902      	bls.n	8006904 <_free_r+0x74>
 80068fe:	230c      	movs	r3, #12
 8006900:	602b      	str	r3, [r5, #0]
 8006902:	e7d6      	b.n	80068b2 <_free_r+0x22>
 8006904:	6820      	ldr	r0, [r4, #0]
 8006906:	1821      	adds	r1, r4, r0
 8006908:	428b      	cmp	r3, r1
 800690a:	bf04      	itt	eq
 800690c:	6819      	ldreq	r1, [r3, #0]
 800690e:	685b      	ldreq	r3, [r3, #4]
 8006910:	6063      	str	r3, [r4, #4]
 8006912:	bf04      	itt	eq
 8006914:	1809      	addeq	r1, r1, r0
 8006916:	6021      	streq	r1, [r4, #0]
 8006918:	6054      	str	r4, [r2, #4]
 800691a:	e7ca      	b.n	80068b2 <_free_r+0x22>
 800691c:	bd38      	pop	{r3, r4, r5, pc}
 800691e:	bf00      	nop
 8006920:	200004e4 	.word	0x200004e4

08006924 <malloc>:
 8006924:	4b02      	ldr	r3, [pc, #8]	@ (8006930 <malloc+0xc>)
 8006926:	4601      	mov	r1, r0
 8006928:	6818      	ldr	r0, [r3, #0]
 800692a:	f000 b825 	b.w	8006978 <_malloc_r>
 800692e:	bf00      	nop
 8006930:	20000018 	.word	0x20000018

08006934 <sbrk_aligned>:
 8006934:	b570      	push	{r4, r5, r6, lr}
 8006936:	4e0f      	ldr	r6, [pc, #60]	@ (8006974 <sbrk_aligned+0x40>)
 8006938:	460c      	mov	r4, r1
 800693a:	6831      	ldr	r1, [r6, #0]
 800693c:	4605      	mov	r5, r0
 800693e:	b911      	cbnz	r1, 8006946 <sbrk_aligned+0x12>
 8006940:	f001 fe04 	bl	800854c <_sbrk_r>
 8006944:	6030      	str	r0, [r6, #0]
 8006946:	4621      	mov	r1, r4
 8006948:	4628      	mov	r0, r5
 800694a:	f001 fdff 	bl	800854c <_sbrk_r>
 800694e:	1c43      	adds	r3, r0, #1
 8006950:	d103      	bne.n	800695a <sbrk_aligned+0x26>
 8006952:	f04f 34ff 	mov.w	r4, #4294967295
 8006956:	4620      	mov	r0, r4
 8006958:	bd70      	pop	{r4, r5, r6, pc}
 800695a:	1cc4      	adds	r4, r0, #3
 800695c:	f024 0403 	bic.w	r4, r4, #3
 8006960:	42a0      	cmp	r0, r4
 8006962:	d0f8      	beq.n	8006956 <sbrk_aligned+0x22>
 8006964:	1a21      	subs	r1, r4, r0
 8006966:	4628      	mov	r0, r5
 8006968:	f001 fdf0 	bl	800854c <_sbrk_r>
 800696c:	3001      	adds	r0, #1
 800696e:	d1f2      	bne.n	8006956 <sbrk_aligned+0x22>
 8006970:	e7ef      	b.n	8006952 <sbrk_aligned+0x1e>
 8006972:	bf00      	nop
 8006974:	200004e0 	.word	0x200004e0

08006978 <_malloc_r>:
 8006978:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800697c:	1ccd      	adds	r5, r1, #3
 800697e:	f025 0503 	bic.w	r5, r5, #3
 8006982:	3508      	adds	r5, #8
 8006984:	2d0c      	cmp	r5, #12
 8006986:	bf38      	it	cc
 8006988:	250c      	movcc	r5, #12
 800698a:	2d00      	cmp	r5, #0
 800698c:	4606      	mov	r6, r0
 800698e:	db01      	blt.n	8006994 <_malloc_r+0x1c>
 8006990:	42a9      	cmp	r1, r5
 8006992:	d904      	bls.n	800699e <_malloc_r+0x26>
 8006994:	230c      	movs	r3, #12
 8006996:	6033      	str	r3, [r6, #0]
 8006998:	2000      	movs	r0, #0
 800699a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800699e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006a74 <_malloc_r+0xfc>
 80069a2:	f000 f869 	bl	8006a78 <__malloc_lock>
 80069a6:	f8d8 3000 	ldr.w	r3, [r8]
 80069aa:	461c      	mov	r4, r3
 80069ac:	bb44      	cbnz	r4, 8006a00 <_malloc_r+0x88>
 80069ae:	4629      	mov	r1, r5
 80069b0:	4630      	mov	r0, r6
 80069b2:	f7ff ffbf 	bl	8006934 <sbrk_aligned>
 80069b6:	1c43      	adds	r3, r0, #1
 80069b8:	4604      	mov	r4, r0
 80069ba:	d158      	bne.n	8006a6e <_malloc_r+0xf6>
 80069bc:	f8d8 4000 	ldr.w	r4, [r8]
 80069c0:	4627      	mov	r7, r4
 80069c2:	2f00      	cmp	r7, #0
 80069c4:	d143      	bne.n	8006a4e <_malloc_r+0xd6>
 80069c6:	2c00      	cmp	r4, #0
 80069c8:	d04b      	beq.n	8006a62 <_malloc_r+0xea>
 80069ca:	6823      	ldr	r3, [r4, #0]
 80069cc:	4639      	mov	r1, r7
 80069ce:	4630      	mov	r0, r6
 80069d0:	eb04 0903 	add.w	r9, r4, r3
 80069d4:	f001 fdba 	bl	800854c <_sbrk_r>
 80069d8:	4581      	cmp	r9, r0
 80069da:	d142      	bne.n	8006a62 <_malloc_r+0xea>
 80069dc:	6821      	ldr	r1, [r4, #0]
 80069de:	1a6d      	subs	r5, r5, r1
 80069e0:	4629      	mov	r1, r5
 80069e2:	4630      	mov	r0, r6
 80069e4:	f7ff ffa6 	bl	8006934 <sbrk_aligned>
 80069e8:	3001      	adds	r0, #1
 80069ea:	d03a      	beq.n	8006a62 <_malloc_r+0xea>
 80069ec:	6823      	ldr	r3, [r4, #0]
 80069ee:	442b      	add	r3, r5
 80069f0:	6023      	str	r3, [r4, #0]
 80069f2:	f8d8 3000 	ldr.w	r3, [r8]
 80069f6:	685a      	ldr	r2, [r3, #4]
 80069f8:	bb62      	cbnz	r2, 8006a54 <_malloc_r+0xdc>
 80069fa:	f8c8 7000 	str.w	r7, [r8]
 80069fe:	e00f      	b.n	8006a20 <_malloc_r+0xa8>
 8006a00:	6822      	ldr	r2, [r4, #0]
 8006a02:	1b52      	subs	r2, r2, r5
 8006a04:	d420      	bmi.n	8006a48 <_malloc_r+0xd0>
 8006a06:	2a0b      	cmp	r2, #11
 8006a08:	d917      	bls.n	8006a3a <_malloc_r+0xc2>
 8006a0a:	1961      	adds	r1, r4, r5
 8006a0c:	42a3      	cmp	r3, r4
 8006a0e:	6025      	str	r5, [r4, #0]
 8006a10:	bf18      	it	ne
 8006a12:	6059      	strne	r1, [r3, #4]
 8006a14:	6863      	ldr	r3, [r4, #4]
 8006a16:	bf08      	it	eq
 8006a18:	f8c8 1000 	streq.w	r1, [r8]
 8006a1c:	5162      	str	r2, [r4, r5]
 8006a1e:	604b      	str	r3, [r1, #4]
 8006a20:	4630      	mov	r0, r6
 8006a22:	f000 f82f 	bl	8006a84 <__malloc_unlock>
 8006a26:	f104 000b 	add.w	r0, r4, #11
 8006a2a:	1d23      	adds	r3, r4, #4
 8006a2c:	f020 0007 	bic.w	r0, r0, #7
 8006a30:	1ac2      	subs	r2, r0, r3
 8006a32:	bf1c      	itt	ne
 8006a34:	1a1b      	subne	r3, r3, r0
 8006a36:	50a3      	strne	r3, [r4, r2]
 8006a38:	e7af      	b.n	800699a <_malloc_r+0x22>
 8006a3a:	6862      	ldr	r2, [r4, #4]
 8006a3c:	42a3      	cmp	r3, r4
 8006a3e:	bf0c      	ite	eq
 8006a40:	f8c8 2000 	streq.w	r2, [r8]
 8006a44:	605a      	strne	r2, [r3, #4]
 8006a46:	e7eb      	b.n	8006a20 <_malloc_r+0xa8>
 8006a48:	4623      	mov	r3, r4
 8006a4a:	6864      	ldr	r4, [r4, #4]
 8006a4c:	e7ae      	b.n	80069ac <_malloc_r+0x34>
 8006a4e:	463c      	mov	r4, r7
 8006a50:	687f      	ldr	r7, [r7, #4]
 8006a52:	e7b6      	b.n	80069c2 <_malloc_r+0x4a>
 8006a54:	461a      	mov	r2, r3
 8006a56:	685b      	ldr	r3, [r3, #4]
 8006a58:	42a3      	cmp	r3, r4
 8006a5a:	d1fb      	bne.n	8006a54 <_malloc_r+0xdc>
 8006a5c:	2300      	movs	r3, #0
 8006a5e:	6053      	str	r3, [r2, #4]
 8006a60:	e7de      	b.n	8006a20 <_malloc_r+0xa8>
 8006a62:	230c      	movs	r3, #12
 8006a64:	6033      	str	r3, [r6, #0]
 8006a66:	4630      	mov	r0, r6
 8006a68:	f000 f80c 	bl	8006a84 <__malloc_unlock>
 8006a6c:	e794      	b.n	8006998 <_malloc_r+0x20>
 8006a6e:	6005      	str	r5, [r0, #0]
 8006a70:	e7d6      	b.n	8006a20 <_malloc_r+0xa8>
 8006a72:	bf00      	nop
 8006a74:	200004e4 	.word	0x200004e4

08006a78 <__malloc_lock>:
 8006a78:	4801      	ldr	r0, [pc, #4]	@ (8006a80 <__malloc_lock+0x8>)
 8006a7a:	f7ff b8a6 	b.w	8005bca <__retarget_lock_acquire_recursive>
 8006a7e:	bf00      	nop
 8006a80:	200004dc 	.word	0x200004dc

08006a84 <__malloc_unlock>:
 8006a84:	4801      	ldr	r0, [pc, #4]	@ (8006a8c <__malloc_unlock+0x8>)
 8006a86:	f7ff b8a1 	b.w	8005bcc <__retarget_lock_release_recursive>
 8006a8a:	bf00      	nop
 8006a8c:	200004dc 	.word	0x200004dc

08006a90 <_Balloc>:
 8006a90:	b570      	push	{r4, r5, r6, lr}
 8006a92:	69c6      	ldr	r6, [r0, #28]
 8006a94:	4604      	mov	r4, r0
 8006a96:	460d      	mov	r5, r1
 8006a98:	b976      	cbnz	r6, 8006ab8 <_Balloc+0x28>
 8006a9a:	2010      	movs	r0, #16
 8006a9c:	f7ff ff42 	bl	8006924 <malloc>
 8006aa0:	4602      	mov	r2, r0
 8006aa2:	61e0      	str	r0, [r4, #28]
 8006aa4:	b920      	cbnz	r0, 8006ab0 <_Balloc+0x20>
 8006aa6:	4b18      	ldr	r3, [pc, #96]	@ (8006b08 <_Balloc+0x78>)
 8006aa8:	4818      	ldr	r0, [pc, #96]	@ (8006b0c <_Balloc+0x7c>)
 8006aaa:	216b      	movs	r1, #107	@ 0x6b
 8006aac:	f001 fd74 	bl	8008598 <__assert_func>
 8006ab0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006ab4:	6006      	str	r6, [r0, #0]
 8006ab6:	60c6      	str	r6, [r0, #12]
 8006ab8:	69e6      	ldr	r6, [r4, #28]
 8006aba:	68f3      	ldr	r3, [r6, #12]
 8006abc:	b183      	cbz	r3, 8006ae0 <_Balloc+0x50>
 8006abe:	69e3      	ldr	r3, [r4, #28]
 8006ac0:	68db      	ldr	r3, [r3, #12]
 8006ac2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006ac6:	b9b8      	cbnz	r0, 8006af8 <_Balloc+0x68>
 8006ac8:	2101      	movs	r1, #1
 8006aca:	fa01 f605 	lsl.w	r6, r1, r5
 8006ace:	1d72      	adds	r2, r6, #5
 8006ad0:	0092      	lsls	r2, r2, #2
 8006ad2:	4620      	mov	r0, r4
 8006ad4:	f001 fd7e 	bl	80085d4 <_calloc_r>
 8006ad8:	b160      	cbz	r0, 8006af4 <_Balloc+0x64>
 8006ada:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006ade:	e00e      	b.n	8006afe <_Balloc+0x6e>
 8006ae0:	2221      	movs	r2, #33	@ 0x21
 8006ae2:	2104      	movs	r1, #4
 8006ae4:	4620      	mov	r0, r4
 8006ae6:	f001 fd75 	bl	80085d4 <_calloc_r>
 8006aea:	69e3      	ldr	r3, [r4, #28]
 8006aec:	60f0      	str	r0, [r6, #12]
 8006aee:	68db      	ldr	r3, [r3, #12]
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d1e4      	bne.n	8006abe <_Balloc+0x2e>
 8006af4:	2000      	movs	r0, #0
 8006af6:	bd70      	pop	{r4, r5, r6, pc}
 8006af8:	6802      	ldr	r2, [r0, #0]
 8006afa:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006afe:	2300      	movs	r3, #0
 8006b00:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006b04:	e7f7      	b.n	8006af6 <_Balloc+0x66>
 8006b06:	bf00      	nop
 8006b08:	08009906 	.word	0x08009906
 8006b0c:	08009986 	.word	0x08009986

08006b10 <_Bfree>:
 8006b10:	b570      	push	{r4, r5, r6, lr}
 8006b12:	69c6      	ldr	r6, [r0, #28]
 8006b14:	4605      	mov	r5, r0
 8006b16:	460c      	mov	r4, r1
 8006b18:	b976      	cbnz	r6, 8006b38 <_Bfree+0x28>
 8006b1a:	2010      	movs	r0, #16
 8006b1c:	f7ff ff02 	bl	8006924 <malloc>
 8006b20:	4602      	mov	r2, r0
 8006b22:	61e8      	str	r0, [r5, #28]
 8006b24:	b920      	cbnz	r0, 8006b30 <_Bfree+0x20>
 8006b26:	4b09      	ldr	r3, [pc, #36]	@ (8006b4c <_Bfree+0x3c>)
 8006b28:	4809      	ldr	r0, [pc, #36]	@ (8006b50 <_Bfree+0x40>)
 8006b2a:	218f      	movs	r1, #143	@ 0x8f
 8006b2c:	f001 fd34 	bl	8008598 <__assert_func>
 8006b30:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006b34:	6006      	str	r6, [r0, #0]
 8006b36:	60c6      	str	r6, [r0, #12]
 8006b38:	b13c      	cbz	r4, 8006b4a <_Bfree+0x3a>
 8006b3a:	69eb      	ldr	r3, [r5, #28]
 8006b3c:	6862      	ldr	r2, [r4, #4]
 8006b3e:	68db      	ldr	r3, [r3, #12]
 8006b40:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006b44:	6021      	str	r1, [r4, #0]
 8006b46:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006b4a:	bd70      	pop	{r4, r5, r6, pc}
 8006b4c:	08009906 	.word	0x08009906
 8006b50:	08009986 	.word	0x08009986

08006b54 <__multadd>:
 8006b54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006b58:	690d      	ldr	r5, [r1, #16]
 8006b5a:	4607      	mov	r7, r0
 8006b5c:	460c      	mov	r4, r1
 8006b5e:	461e      	mov	r6, r3
 8006b60:	f101 0c14 	add.w	ip, r1, #20
 8006b64:	2000      	movs	r0, #0
 8006b66:	f8dc 3000 	ldr.w	r3, [ip]
 8006b6a:	b299      	uxth	r1, r3
 8006b6c:	fb02 6101 	mla	r1, r2, r1, r6
 8006b70:	0c1e      	lsrs	r6, r3, #16
 8006b72:	0c0b      	lsrs	r3, r1, #16
 8006b74:	fb02 3306 	mla	r3, r2, r6, r3
 8006b78:	b289      	uxth	r1, r1
 8006b7a:	3001      	adds	r0, #1
 8006b7c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006b80:	4285      	cmp	r5, r0
 8006b82:	f84c 1b04 	str.w	r1, [ip], #4
 8006b86:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006b8a:	dcec      	bgt.n	8006b66 <__multadd+0x12>
 8006b8c:	b30e      	cbz	r6, 8006bd2 <__multadd+0x7e>
 8006b8e:	68a3      	ldr	r3, [r4, #8]
 8006b90:	42ab      	cmp	r3, r5
 8006b92:	dc19      	bgt.n	8006bc8 <__multadd+0x74>
 8006b94:	6861      	ldr	r1, [r4, #4]
 8006b96:	4638      	mov	r0, r7
 8006b98:	3101      	adds	r1, #1
 8006b9a:	f7ff ff79 	bl	8006a90 <_Balloc>
 8006b9e:	4680      	mov	r8, r0
 8006ba0:	b928      	cbnz	r0, 8006bae <__multadd+0x5a>
 8006ba2:	4602      	mov	r2, r0
 8006ba4:	4b0c      	ldr	r3, [pc, #48]	@ (8006bd8 <__multadd+0x84>)
 8006ba6:	480d      	ldr	r0, [pc, #52]	@ (8006bdc <__multadd+0x88>)
 8006ba8:	21ba      	movs	r1, #186	@ 0xba
 8006baa:	f001 fcf5 	bl	8008598 <__assert_func>
 8006bae:	6922      	ldr	r2, [r4, #16]
 8006bb0:	3202      	adds	r2, #2
 8006bb2:	f104 010c 	add.w	r1, r4, #12
 8006bb6:	0092      	lsls	r2, r2, #2
 8006bb8:	300c      	adds	r0, #12
 8006bba:	f001 fcd7 	bl	800856c <memcpy>
 8006bbe:	4621      	mov	r1, r4
 8006bc0:	4638      	mov	r0, r7
 8006bc2:	f7ff ffa5 	bl	8006b10 <_Bfree>
 8006bc6:	4644      	mov	r4, r8
 8006bc8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006bcc:	3501      	adds	r5, #1
 8006bce:	615e      	str	r6, [r3, #20]
 8006bd0:	6125      	str	r5, [r4, #16]
 8006bd2:	4620      	mov	r0, r4
 8006bd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006bd8:	08009975 	.word	0x08009975
 8006bdc:	08009986 	.word	0x08009986

08006be0 <__s2b>:
 8006be0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006be4:	460c      	mov	r4, r1
 8006be6:	4615      	mov	r5, r2
 8006be8:	461f      	mov	r7, r3
 8006bea:	2209      	movs	r2, #9
 8006bec:	3308      	adds	r3, #8
 8006bee:	4606      	mov	r6, r0
 8006bf0:	fb93 f3f2 	sdiv	r3, r3, r2
 8006bf4:	2100      	movs	r1, #0
 8006bf6:	2201      	movs	r2, #1
 8006bf8:	429a      	cmp	r2, r3
 8006bfa:	db09      	blt.n	8006c10 <__s2b+0x30>
 8006bfc:	4630      	mov	r0, r6
 8006bfe:	f7ff ff47 	bl	8006a90 <_Balloc>
 8006c02:	b940      	cbnz	r0, 8006c16 <__s2b+0x36>
 8006c04:	4602      	mov	r2, r0
 8006c06:	4b19      	ldr	r3, [pc, #100]	@ (8006c6c <__s2b+0x8c>)
 8006c08:	4819      	ldr	r0, [pc, #100]	@ (8006c70 <__s2b+0x90>)
 8006c0a:	21d3      	movs	r1, #211	@ 0xd3
 8006c0c:	f001 fcc4 	bl	8008598 <__assert_func>
 8006c10:	0052      	lsls	r2, r2, #1
 8006c12:	3101      	adds	r1, #1
 8006c14:	e7f0      	b.n	8006bf8 <__s2b+0x18>
 8006c16:	9b08      	ldr	r3, [sp, #32]
 8006c18:	6143      	str	r3, [r0, #20]
 8006c1a:	2d09      	cmp	r5, #9
 8006c1c:	f04f 0301 	mov.w	r3, #1
 8006c20:	6103      	str	r3, [r0, #16]
 8006c22:	dd16      	ble.n	8006c52 <__s2b+0x72>
 8006c24:	f104 0909 	add.w	r9, r4, #9
 8006c28:	46c8      	mov	r8, r9
 8006c2a:	442c      	add	r4, r5
 8006c2c:	f818 3b01 	ldrb.w	r3, [r8], #1
 8006c30:	4601      	mov	r1, r0
 8006c32:	3b30      	subs	r3, #48	@ 0x30
 8006c34:	220a      	movs	r2, #10
 8006c36:	4630      	mov	r0, r6
 8006c38:	f7ff ff8c 	bl	8006b54 <__multadd>
 8006c3c:	45a0      	cmp	r8, r4
 8006c3e:	d1f5      	bne.n	8006c2c <__s2b+0x4c>
 8006c40:	f1a5 0408 	sub.w	r4, r5, #8
 8006c44:	444c      	add	r4, r9
 8006c46:	1b2d      	subs	r5, r5, r4
 8006c48:	1963      	adds	r3, r4, r5
 8006c4a:	42bb      	cmp	r3, r7
 8006c4c:	db04      	blt.n	8006c58 <__s2b+0x78>
 8006c4e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006c52:	340a      	adds	r4, #10
 8006c54:	2509      	movs	r5, #9
 8006c56:	e7f6      	b.n	8006c46 <__s2b+0x66>
 8006c58:	f814 3b01 	ldrb.w	r3, [r4], #1
 8006c5c:	4601      	mov	r1, r0
 8006c5e:	3b30      	subs	r3, #48	@ 0x30
 8006c60:	220a      	movs	r2, #10
 8006c62:	4630      	mov	r0, r6
 8006c64:	f7ff ff76 	bl	8006b54 <__multadd>
 8006c68:	e7ee      	b.n	8006c48 <__s2b+0x68>
 8006c6a:	bf00      	nop
 8006c6c:	08009975 	.word	0x08009975
 8006c70:	08009986 	.word	0x08009986

08006c74 <__hi0bits>:
 8006c74:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8006c78:	4603      	mov	r3, r0
 8006c7a:	bf36      	itet	cc
 8006c7c:	0403      	lslcc	r3, r0, #16
 8006c7e:	2000      	movcs	r0, #0
 8006c80:	2010      	movcc	r0, #16
 8006c82:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006c86:	bf3c      	itt	cc
 8006c88:	021b      	lslcc	r3, r3, #8
 8006c8a:	3008      	addcc	r0, #8
 8006c8c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006c90:	bf3c      	itt	cc
 8006c92:	011b      	lslcc	r3, r3, #4
 8006c94:	3004      	addcc	r0, #4
 8006c96:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006c9a:	bf3c      	itt	cc
 8006c9c:	009b      	lslcc	r3, r3, #2
 8006c9e:	3002      	addcc	r0, #2
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	db05      	blt.n	8006cb0 <__hi0bits+0x3c>
 8006ca4:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8006ca8:	f100 0001 	add.w	r0, r0, #1
 8006cac:	bf08      	it	eq
 8006cae:	2020      	moveq	r0, #32
 8006cb0:	4770      	bx	lr

08006cb2 <__lo0bits>:
 8006cb2:	6803      	ldr	r3, [r0, #0]
 8006cb4:	4602      	mov	r2, r0
 8006cb6:	f013 0007 	ands.w	r0, r3, #7
 8006cba:	d00b      	beq.n	8006cd4 <__lo0bits+0x22>
 8006cbc:	07d9      	lsls	r1, r3, #31
 8006cbe:	d421      	bmi.n	8006d04 <__lo0bits+0x52>
 8006cc0:	0798      	lsls	r0, r3, #30
 8006cc2:	bf49      	itett	mi
 8006cc4:	085b      	lsrmi	r3, r3, #1
 8006cc6:	089b      	lsrpl	r3, r3, #2
 8006cc8:	2001      	movmi	r0, #1
 8006cca:	6013      	strmi	r3, [r2, #0]
 8006ccc:	bf5c      	itt	pl
 8006cce:	6013      	strpl	r3, [r2, #0]
 8006cd0:	2002      	movpl	r0, #2
 8006cd2:	4770      	bx	lr
 8006cd4:	b299      	uxth	r1, r3
 8006cd6:	b909      	cbnz	r1, 8006cdc <__lo0bits+0x2a>
 8006cd8:	0c1b      	lsrs	r3, r3, #16
 8006cda:	2010      	movs	r0, #16
 8006cdc:	b2d9      	uxtb	r1, r3
 8006cde:	b909      	cbnz	r1, 8006ce4 <__lo0bits+0x32>
 8006ce0:	3008      	adds	r0, #8
 8006ce2:	0a1b      	lsrs	r3, r3, #8
 8006ce4:	0719      	lsls	r1, r3, #28
 8006ce6:	bf04      	itt	eq
 8006ce8:	091b      	lsreq	r3, r3, #4
 8006cea:	3004      	addeq	r0, #4
 8006cec:	0799      	lsls	r1, r3, #30
 8006cee:	bf04      	itt	eq
 8006cf0:	089b      	lsreq	r3, r3, #2
 8006cf2:	3002      	addeq	r0, #2
 8006cf4:	07d9      	lsls	r1, r3, #31
 8006cf6:	d403      	bmi.n	8006d00 <__lo0bits+0x4e>
 8006cf8:	085b      	lsrs	r3, r3, #1
 8006cfa:	f100 0001 	add.w	r0, r0, #1
 8006cfe:	d003      	beq.n	8006d08 <__lo0bits+0x56>
 8006d00:	6013      	str	r3, [r2, #0]
 8006d02:	4770      	bx	lr
 8006d04:	2000      	movs	r0, #0
 8006d06:	4770      	bx	lr
 8006d08:	2020      	movs	r0, #32
 8006d0a:	4770      	bx	lr

08006d0c <__i2b>:
 8006d0c:	b510      	push	{r4, lr}
 8006d0e:	460c      	mov	r4, r1
 8006d10:	2101      	movs	r1, #1
 8006d12:	f7ff febd 	bl	8006a90 <_Balloc>
 8006d16:	4602      	mov	r2, r0
 8006d18:	b928      	cbnz	r0, 8006d26 <__i2b+0x1a>
 8006d1a:	4b05      	ldr	r3, [pc, #20]	@ (8006d30 <__i2b+0x24>)
 8006d1c:	4805      	ldr	r0, [pc, #20]	@ (8006d34 <__i2b+0x28>)
 8006d1e:	f240 1145 	movw	r1, #325	@ 0x145
 8006d22:	f001 fc39 	bl	8008598 <__assert_func>
 8006d26:	2301      	movs	r3, #1
 8006d28:	6144      	str	r4, [r0, #20]
 8006d2a:	6103      	str	r3, [r0, #16]
 8006d2c:	bd10      	pop	{r4, pc}
 8006d2e:	bf00      	nop
 8006d30:	08009975 	.word	0x08009975
 8006d34:	08009986 	.word	0x08009986

08006d38 <__multiply>:
 8006d38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d3c:	4617      	mov	r7, r2
 8006d3e:	690a      	ldr	r2, [r1, #16]
 8006d40:	693b      	ldr	r3, [r7, #16]
 8006d42:	429a      	cmp	r2, r3
 8006d44:	bfa8      	it	ge
 8006d46:	463b      	movge	r3, r7
 8006d48:	4689      	mov	r9, r1
 8006d4a:	bfa4      	itt	ge
 8006d4c:	460f      	movge	r7, r1
 8006d4e:	4699      	movge	r9, r3
 8006d50:	693d      	ldr	r5, [r7, #16]
 8006d52:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8006d56:	68bb      	ldr	r3, [r7, #8]
 8006d58:	6879      	ldr	r1, [r7, #4]
 8006d5a:	eb05 060a 	add.w	r6, r5, sl
 8006d5e:	42b3      	cmp	r3, r6
 8006d60:	b085      	sub	sp, #20
 8006d62:	bfb8      	it	lt
 8006d64:	3101      	addlt	r1, #1
 8006d66:	f7ff fe93 	bl	8006a90 <_Balloc>
 8006d6a:	b930      	cbnz	r0, 8006d7a <__multiply+0x42>
 8006d6c:	4602      	mov	r2, r0
 8006d6e:	4b41      	ldr	r3, [pc, #260]	@ (8006e74 <__multiply+0x13c>)
 8006d70:	4841      	ldr	r0, [pc, #260]	@ (8006e78 <__multiply+0x140>)
 8006d72:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8006d76:	f001 fc0f 	bl	8008598 <__assert_func>
 8006d7a:	f100 0414 	add.w	r4, r0, #20
 8006d7e:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8006d82:	4623      	mov	r3, r4
 8006d84:	2200      	movs	r2, #0
 8006d86:	4573      	cmp	r3, lr
 8006d88:	d320      	bcc.n	8006dcc <__multiply+0x94>
 8006d8a:	f107 0814 	add.w	r8, r7, #20
 8006d8e:	f109 0114 	add.w	r1, r9, #20
 8006d92:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8006d96:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8006d9a:	9302      	str	r3, [sp, #8]
 8006d9c:	1beb      	subs	r3, r5, r7
 8006d9e:	3b15      	subs	r3, #21
 8006da0:	f023 0303 	bic.w	r3, r3, #3
 8006da4:	3304      	adds	r3, #4
 8006da6:	3715      	adds	r7, #21
 8006da8:	42bd      	cmp	r5, r7
 8006daa:	bf38      	it	cc
 8006dac:	2304      	movcc	r3, #4
 8006dae:	9301      	str	r3, [sp, #4]
 8006db0:	9b02      	ldr	r3, [sp, #8]
 8006db2:	9103      	str	r1, [sp, #12]
 8006db4:	428b      	cmp	r3, r1
 8006db6:	d80c      	bhi.n	8006dd2 <__multiply+0x9a>
 8006db8:	2e00      	cmp	r6, #0
 8006dba:	dd03      	ble.n	8006dc4 <__multiply+0x8c>
 8006dbc:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d055      	beq.n	8006e70 <__multiply+0x138>
 8006dc4:	6106      	str	r6, [r0, #16]
 8006dc6:	b005      	add	sp, #20
 8006dc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006dcc:	f843 2b04 	str.w	r2, [r3], #4
 8006dd0:	e7d9      	b.n	8006d86 <__multiply+0x4e>
 8006dd2:	f8b1 a000 	ldrh.w	sl, [r1]
 8006dd6:	f1ba 0f00 	cmp.w	sl, #0
 8006dda:	d01f      	beq.n	8006e1c <__multiply+0xe4>
 8006ddc:	46c4      	mov	ip, r8
 8006dde:	46a1      	mov	r9, r4
 8006de0:	2700      	movs	r7, #0
 8006de2:	f85c 2b04 	ldr.w	r2, [ip], #4
 8006de6:	f8d9 3000 	ldr.w	r3, [r9]
 8006dea:	fa1f fb82 	uxth.w	fp, r2
 8006dee:	b29b      	uxth	r3, r3
 8006df0:	fb0a 330b 	mla	r3, sl, fp, r3
 8006df4:	443b      	add	r3, r7
 8006df6:	f8d9 7000 	ldr.w	r7, [r9]
 8006dfa:	0c12      	lsrs	r2, r2, #16
 8006dfc:	0c3f      	lsrs	r7, r7, #16
 8006dfe:	fb0a 7202 	mla	r2, sl, r2, r7
 8006e02:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8006e06:	b29b      	uxth	r3, r3
 8006e08:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006e0c:	4565      	cmp	r5, ip
 8006e0e:	f849 3b04 	str.w	r3, [r9], #4
 8006e12:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8006e16:	d8e4      	bhi.n	8006de2 <__multiply+0xaa>
 8006e18:	9b01      	ldr	r3, [sp, #4]
 8006e1a:	50e7      	str	r7, [r4, r3]
 8006e1c:	9b03      	ldr	r3, [sp, #12]
 8006e1e:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8006e22:	3104      	adds	r1, #4
 8006e24:	f1b9 0f00 	cmp.w	r9, #0
 8006e28:	d020      	beq.n	8006e6c <__multiply+0x134>
 8006e2a:	6823      	ldr	r3, [r4, #0]
 8006e2c:	4647      	mov	r7, r8
 8006e2e:	46a4      	mov	ip, r4
 8006e30:	f04f 0a00 	mov.w	sl, #0
 8006e34:	f8b7 b000 	ldrh.w	fp, [r7]
 8006e38:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8006e3c:	fb09 220b 	mla	r2, r9, fp, r2
 8006e40:	4452      	add	r2, sl
 8006e42:	b29b      	uxth	r3, r3
 8006e44:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006e48:	f84c 3b04 	str.w	r3, [ip], #4
 8006e4c:	f857 3b04 	ldr.w	r3, [r7], #4
 8006e50:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006e54:	f8bc 3000 	ldrh.w	r3, [ip]
 8006e58:	fb09 330a 	mla	r3, r9, sl, r3
 8006e5c:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8006e60:	42bd      	cmp	r5, r7
 8006e62:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006e66:	d8e5      	bhi.n	8006e34 <__multiply+0xfc>
 8006e68:	9a01      	ldr	r2, [sp, #4]
 8006e6a:	50a3      	str	r3, [r4, r2]
 8006e6c:	3404      	adds	r4, #4
 8006e6e:	e79f      	b.n	8006db0 <__multiply+0x78>
 8006e70:	3e01      	subs	r6, #1
 8006e72:	e7a1      	b.n	8006db8 <__multiply+0x80>
 8006e74:	08009975 	.word	0x08009975
 8006e78:	08009986 	.word	0x08009986

08006e7c <__pow5mult>:
 8006e7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006e80:	4615      	mov	r5, r2
 8006e82:	f012 0203 	ands.w	r2, r2, #3
 8006e86:	4607      	mov	r7, r0
 8006e88:	460e      	mov	r6, r1
 8006e8a:	d007      	beq.n	8006e9c <__pow5mult+0x20>
 8006e8c:	4c25      	ldr	r4, [pc, #148]	@ (8006f24 <__pow5mult+0xa8>)
 8006e8e:	3a01      	subs	r2, #1
 8006e90:	2300      	movs	r3, #0
 8006e92:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006e96:	f7ff fe5d 	bl	8006b54 <__multadd>
 8006e9a:	4606      	mov	r6, r0
 8006e9c:	10ad      	asrs	r5, r5, #2
 8006e9e:	d03d      	beq.n	8006f1c <__pow5mult+0xa0>
 8006ea0:	69fc      	ldr	r4, [r7, #28]
 8006ea2:	b97c      	cbnz	r4, 8006ec4 <__pow5mult+0x48>
 8006ea4:	2010      	movs	r0, #16
 8006ea6:	f7ff fd3d 	bl	8006924 <malloc>
 8006eaa:	4602      	mov	r2, r0
 8006eac:	61f8      	str	r0, [r7, #28]
 8006eae:	b928      	cbnz	r0, 8006ebc <__pow5mult+0x40>
 8006eb0:	4b1d      	ldr	r3, [pc, #116]	@ (8006f28 <__pow5mult+0xac>)
 8006eb2:	481e      	ldr	r0, [pc, #120]	@ (8006f2c <__pow5mult+0xb0>)
 8006eb4:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8006eb8:	f001 fb6e 	bl	8008598 <__assert_func>
 8006ebc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006ec0:	6004      	str	r4, [r0, #0]
 8006ec2:	60c4      	str	r4, [r0, #12]
 8006ec4:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8006ec8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006ecc:	b94c      	cbnz	r4, 8006ee2 <__pow5mult+0x66>
 8006ece:	f240 2171 	movw	r1, #625	@ 0x271
 8006ed2:	4638      	mov	r0, r7
 8006ed4:	f7ff ff1a 	bl	8006d0c <__i2b>
 8006ed8:	2300      	movs	r3, #0
 8006eda:	f8c8 0008 	str.w	r0, [r8, #8]
 8006ede:	4604      	mov	r4, r0
 8006ee0:	6003      	str	r3, [r0, #0]
 8006ee2:	f04f 0900 	mov.w	r9, #0
 8006ee6:	07eb      	lsls	r3, r5, #31
 8006ee8:	d50a      	bpl.n	8006f00 <__pow5mult+0x84>
 8006eea:	4631      	mov	r1, r6
 8006eec:	4622      	mov	r2, r4
 8006eee:	4638      	mov	r0, r7
 8006ef0:	f7ff ff22 	bl	8006d38 <__multiply>
 8006ef4:	4631      	mov	r1, r6
 8006ef6:	4680      	mov	r8, r0
 8006ef8:	4638      	mov	r0, r7
 8006efa:	f7ff fe09 	bl	8006b10 <_Bfree>
 8006efe:	4646      	mov	r6, r8
 8006f00:	106d      	asrs	r5, r5, #1
 8006f02:	d00b      	beq.n	8006f1c <__pow5mult+0xa0>
 8006f04:	6820      	ldr	r0, [r4, #0]
 8006f06:	b938      	cbnz	r0, 8006f18 <__pow5mult+0x9c>
 8006f08:	4622      	mov	r2, r4
 8006f0a:	4621      	mov	r1, r4
 8006f0c:	4638      	mov	r0, r7
 8006f0e:	f7ff ff13 	bl	8006d38 <__multiply>
 8006f12:	6020      	str	r0, [r4, #0]
 8006f14:	f8c0 9000 	str.w	r9, [r0]
 8006f18:	4604      	mov	r4, r0
 8006f1a:	e7e4      	b.n	8006ee6 <__pow5mult+0x6a>
 8006f1c:	4630      	mov	r0, r6
 8006f1e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006f22:	bf00      	nop
 8006f24:	08009a98 	.word	0x08009a98
 8006f28:	08009906 	.word	0x08009906
 8006f2c:	08009986 	.word	0x08009986

08006f30 <__lshift>:
 8006f30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006f34:	460c      	mov	r4, r1
 8006f36:	6849      	ldr	r1, [r1, #4]
 8006f38:	6923      	ldr	r3, [r4, #16]
 8006f3a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006f3e:	68a3      	ldr	r3, [r4, #8]
 8006f40:	4607      	mov	r7, r0
 8006f42:	4691      	mov	r9, r2
 8006f44:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006f48:	f108 0601 	add.w	r6, r8, #1
 8006f4c:	42b3      	cmp	r3, r6
 8006f4e:	db0b      	blt.n	8006f68 <__lshift+0x38>
 8006f50:	4638      	mov	r0, r7
 8006f52:	f7ff fd9d 	bl	8006a90 <_Balloc>
 8006f56:	4605      	mov	r5, r0
 8006f58:	b948      	cbnz	r0, 8006f6e <__lshift+0x3e>
 8006f5a:	4602      	mov	r2, r0
 8006f5c:	4b28      	ldr	r3, [pc, #160]	@ (8007000 <__lshift+0xd0>)
 8006f5e:	4829      	ldr	r0, [pc, #164]	@ (8007004 <__lshift+0xd4>)
 8006f60:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8006f64:	f001 fb18 	bl	8008598 <__assert_func>
 8006f68:	3101      	adds	r1, #1
 8006f6a:	005b      	lsls	r3, r3, #1
 8006f6c:	e7ee      	b.n	8006f4c <__lshift+0x1c>
 8006f6e:	2300      	movs	r3, #0
 8006f70:	f100 0114 	add.w	r1, r0, #20
 8006f74:	f100 0210 	add.w	r2, r0, #16
 8006f78:	4618      	mov	r0, r3
 8006f7a:	4553      	cmp	r3, sl
 8006f7c:	db33      	blt.n	8006fe6 <__lshift+0xb6>
 8006f7e:	6920      	ldr	r0, [r4, #16]
 8006f80:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006f84:	f104 0314 	add.w	r3, r4, #20
 8006f88:	f019 091f 	ands.w	r9, r9, #31
 8006f8c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006f90:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006f94:	d02b      	beq.n	8006fee <__lshift+0xbe>
 8006f96:	f1c9 0e20 	rsb	lr, r9, #32
 8006f9a:	468a      	mov	sl, r1
 8006f9c:	2200      	movs	r2, #0
 8006f9e:	6818      	ldr	r0, [r3, #0]
 8006fa0:	fa00 f009 	lsl.w	r0, r0, r9
 8006fa4:	4310      	orrs	r0, r2
 8006fa6:	f84a 0b04 	str.w	r0, [sl], #4
 8006faa:	f853 2b04 	ldr.w	r2, [r3], #4
 8006fae:	459c      	cmp	ip, r3
 8006fb0:	fa22 f20e 	lsr.w	r2, r2, lr
 8006fb4:	d8f3      	bhi.n	8006f9e <__lshift+0x6e>
 8006fb6:	ebac 0304 	sub.w	r3, ip, r4
 8006fba:	3b15      	subs	r3, #21
 8006fbc:	f023 0303 	bic.w	r3, r3, #3
 8006fc0:	3304      	adds	r3, #4
 8006fc2:	f104 0015 	add.w	r0, r4, #21
 8006fc6:	4560      	cmp	r0, ip
 8006fc8:	bf88      	it	hi
 8006fca:	2304      	movhi	r3, #4
 8006fcc:	50ca      	str	r2, [r1, r3]
 8006fce:	b10a      	cbz	r2, 8006fd4 <__lshift+0xa4>
 8006fd0:	f108 0602 	add.w	r6, r8, #2
 8006fd4:	3e01      	subs	r6, #1
 8006fd6:	4638      	mov	r0, r7
 8006fd8:	612e      	str	r6, [r5, #16]
 8006fda:	4621      	mov	r1, r4
 8006fdc:	f7ff fd98 	bl	8006b10 <_Bfree>
 8006fe0:	4628      	mov	r0, r5
 8006fe2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006fe6:	f842 0f04 	str.w	r0, [r2, #4]!
 8006fea:	3301      	adds	r3, #1
 8006fec:	e7c5      	b.n	8006f7a <__lshift+0x4a>
 8006fee:	3904      	subs	r1, #4
 8006ff0:	f853 2b04 	ldr.w	r2, [r3], #4
 8006ff4:	f841 2f04 	str.w	r2, [r1, #4]!
 8006ff8:	459c      	cmp	ip, r3
 8006ffa:	d8f9      	bhi.n	8006ff0 <__lshift+0xc0>
 8006ffc:	e7ea      	b.n	8006fd4 <__lshift+0xa4>
 8006ffe:	bf00      	nop
 8007000:	08009975 	.word	0x08009975
 8007004:	08009986 	.word	0x08009986

08007008 <__mcmp>:
 8007008:	690a      	ldr	r2, [r1, #16]
 800700a:	4603      	mov	r3, r0
 800700c:	6900      	ldr	r0, [r0, #16]
 800700e:	1a80      	subs	r0, r0, r2
 8007010:	b530      	push	{r4, r5, lr}
 8007012:	d10e      	bne.n	8007032 <__mcmp+0x2a>
 8007014:	3314      	adds	r3, #20
 8007016:	3114      	adds	r1, #20
 8007018:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800701c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8007020:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8007024:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8007028:	4295      	cmp	r5, r2
 800702a:	d003      	beq.n	8007034 <__mcmp+0x2c>
 800702c:	d205      	bcs.n	800703a <__mcmp+0x32>
 800702e:	f04f 30ff 	mov.w	r0, #4294967295
 8007032:	bd30      	pop	{r4, r5, pc}
 8007034:	42a3      	cmp	r3, r4
 8007036:	d3f3      	bcc.n	8007020 <__mcmp+0x18>
 8007038:	e7fb      	b.n	8007032 <__mcmp+0x2a>
 800703a:	2001      	movs	r0, #1
 800703c:	e7f9      	b.n	8007032 <__mcmp+0x2a>
	...

08007040 <__mdiff>:
 8007040:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007044:	4689      	mov	r9, r1
 8007046:	4606      	mov	r6, r0
 8007048:	4611      	mov	r1, r2
 800704a:	4648      	mov	r0, r9
 800704c:	4614      	mov	r4, r2
 800704e:	f7ff ffdb 	bl	8007008 <__mcmp>
 8007052:	1e05      	subs	r5, r0, #0
 8007054:	d112      	bne.n	800707c <__mdiff+0x3c>
 8007056:	4629      	mov	r1, r5
 8007058:	4630      	mov	r0, r6
 800705a:	f7ff fd19 	bl	8006a90 <_Balloc>
 800705e:	4602      	mov	r2, r0
 8007060:	b928      	cbnz	r0, 800706e <__mdiff+0x2e>
 8007062:	4b3f      	ldr	r3, [pc, #252]	@ (8007160 <__mdiff+0x120>)
 8007064:	f240 2137 	movw	r1, #567	@ 0x237
 8007068:	483e      	ldr	r0, [pc, #248]	@ (8007164 <__mdiff+0x124>)
 800706a:	f001 fa95 	bl	8008598 <__assert_func>
 800706e:	2301      	movs	r3, #1
 8007070:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007074:	4610      	mov	r0, r2
 8007076:	b003      	add	sp, #12
 8007078:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800707c:	bfbc      	itt	lt
 800707e:	464b      	movlt	r3, r9
 8007080:	46a1      	movlt	r9, r4
 8007082:	4630      	mov	r0, r6
 8007084:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8007088:	bfba      	itte	lt
 800708a:	461c      	movlt	r4, r3
 800708c:	2501      	movlt	r5, #1
 800708e:	2500      	movge	r5, #0
 8007090:	f7ff fcfe 	bl	8006a90 <_Balloc>
 8007094:	4602      	mov	r2, r0
 8007096:	b918      	cbnz	r0, 80070a0 <__mdiff+0x60>
 8007098:	4b31      	ldr	r3, [pc, #196]	@ (8007160 <__mdiff+0x120>)
 800709a:	f240 2145 	movw	r1, #581	@ 0x245
 800709e:	e7e3      	b.n	8007068 <__mdiff+0x28>
 80070a0:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80070a4:	6926      	ldr	r6, [r4, #16]
 80070a6:	60c5      	str	r5, [r0, #12]
 80070a8:	f109 0310 	add.w	r3, r9, #16
 80070ac:	f109 0514 	add.w	r5, r9, #20
 80070b0:	f104 0e14 	add.w	lr, r4, #20
 80070b4:	f100 0b14 	add.w	fp, r0, #20
 80070b8:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80070bc:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80070c0:	9301      	str	r3, [sp, #4]
 80070c2:	46d9      	mov	r9, fp
 80070c4:	f04f 0c00 	mov.w	ip, #0
 80070c8:	9b01      	ldr	r3, [sp, #4]
 80070ca:	f85e 0b04 	ldr.w	r0, [lr], #4
 80070ce:	f853 af04 	ldr.w	sl, [r3, #4]!
 80070d2:	9301      	str	r3, [sp, #4]
 80070d4:	fa1f f38a 	uxth.w	r3, sl
 80070d8:	4619      	mov	r1, r3
 80070da:	b283      	uxth	r3, r0
 80070dc:	1acb      	subs	r3, r1, r3
 80070de:	0c00      	lsrs	r0, r0, #16
 80070e0:	4463      	add	r3, ip
 80070e2:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80070e6:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80070ea:	b29b      	uxth	r3, r3
 80070ec:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80070f0:	4576      	cmp	r6, lr
 80070f2:	f849 3b04 	str.w	r3, [r9], #4
 80070f6:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80070fa:	d8e5      	bhi.n	80070c8 <__mdiff+0x88>
 80070fc:	1b33      	subs	r3, r6, r4
 80070fe:	3b15      	subs	r3, #21
 8007100:	f023 0303 	bic.w	r3, r3, #3
 8007104:	3415      	adds	r4, #21
 8007106:	3304      	adds	r3, #4
 8007108:	42a6      	cmp	r6, r4
 800710a:	bf38      	it	cc
 800710c:	2304      	movcc	r3, #4
 800710e:	441d      	add	r5, r3
 8007110:	445b      	add	r3, fp
 8007112:	461e      	mov	r6, r3
 8007114:	462c      	mov	r4, r5
 8007116:	4544      	cmp	r4, r8
 8007118:	d30e      	bcc.n	8007138 <__mdiff+0xf8>
 800711a:	f108 0103 	add.w	r1, r8, #3
 800711e:	1b49      	subs	r1, r1, r5
 8007120:	f021 0103 	bic.w	r1, r1, #3
 8007124:	3d03      	subs	r5, #3
 8007126:	45a8      	cmp	r8, r5
 8007128:	bf38      	it	cc
 800712a:	2100      	movcc	r1, #0
 800712c:	440b      	add	r3, r1
 800712e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8007132:	b191      	cbz	r1, 800715a <__mdiff+0x11a>
 8007134:	6117      	str	r7, [r2, #16]
 8007136:	e79d      	b.n	8007074 <__mdiff+0x34>
 8007138:	f854 1b04 	ldr.w	r1, [r4], #4
 800713c:	46e6      	mov	lr, ip
 800713e:	0c08      	lsrs	r0, r1, #16
 8007140:	fa1c fc81 	uxtah	ip, ip, r1
 8007144:	4471      	add	r1, lr
 8007146:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800714a:	b289      	uxth	r1, r1
 800714c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8007150:	f846 1b04 	str.w	r1, [r6], #4
 8007154:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007158:	e7dd      	b.n	8007116 <__mdiff+0xd6>
 800715a:	3f01      	subs	r7, #1
 800715c:	e7e7      	b.n	800712e <__mdiff+0xee>
 800715e:	bf00      	nop
 8007160:	08009975 	.word	0x08009975
 8007164:	08009986 	.word	0x08009986

08007168 <__ulp>:
 8007168:	b082      	sub	sp, #8
 800716a:	ed8d 0b00 	vstr	d0, [sp]
 800716e:	9a01      	ldr	r2, [sp, #4]
 8007170:	4b0f      	ldr	r3, [pc, #60]	@ (80071b0 <__ulp+0x48>)
 8007172:	4013      	ands	r3, r2
 8007174:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8007178:	2b00      	cmp	r3, #0
 800717a:	dc08      	bgt.n	800718e <__ulp+0x26>
 800717c:	425b      	negs	r3, r3
 800717e:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8007182:	ea4f 5223 	mov.w	r2, r3, asr #20
 8007186:	da04      	bge.n	8007192 <__ulp+0x2a>
 8007188:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 800718c:	4113      	asrs	r3, r2
 800718e:	2200      	movs	r2, #0
 8007190:	e008      	b.n	80071a4 <__ulp+0x3c>
 8007192:	f1a2 0314 	sub.w	r3, r2, #20
 8007196:	2b1e      	cmp	r3, #30
 8007198:	bfda      	itte	le
 800719a:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 800719e:	40da      	lsrle	r2, r3
 80071a0:	2201      	movgt	r2, #1
 80071a2:	2300      	movs	r3, #0
 80071a4:	4619      	mov	r1, r3
 80071a6:	4610      	mov	r0, r2
 80071a8:	ec41 0b10 	vmov	d0, r0, r1
 80071ac:	b002      	add	sp, #8
 80071ae:	4770      	bx	lr
 80071b0:	7ff00000 	.word	0x7ff00000

080071b4 <__b2d>:
 80071b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80071b8:	6906      	ldr	r6, [r0, #16]
 80071ba:	f100 0814 	add.w	r8, r0, #20
 80071be:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 80071c2:	1f37      	subs	r7, r6, #4
 80071c4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80071c8:	4610      	mov	r0, r2
 80071ca:	f7ff fd53 	bl	8006c74 <__hi0bits>
 80071ce:	f1c0 0320 	rsb	r3, r0, #32
 80071d2:	280a      	cmp	r0, #10
 80071d4:	600b      	str	r3, [r1, #0]
 80071d6:	491b      	ldr	r1, [pc, #108]	@ (8007244 <__b2d+0x90>)
 80071d8:	dc15      	bgt.n	8007206 <__b2d+0x52>
 80071da:	f1c0 0c0b 	rsb	ip, r0, #11
 80071de:	fa22 f30c 	lsr.w	r3, r2, ip
 80071e2:	45b8      	cmp	r8, r7
 80071e4:	ea43 0501 	orr.w	r5, r3, r1
 80071e8:	bf34      	ite	cc
 80071ea:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80071ee:	2300      	movcs	r3, #0
 80071f0:	3015      	adds	r0, #21
 80071f2:	fa02 f000 	lsl.w	r0, r2, r0
 80071f6:	fa23 f30c 	lsr.w	r3, r3, ip
 80071fa:	4303      	orrs	r3, r0
 80071fc:	461c      	mov	r4, r3
 80071fe:	ec45 4b10 	vmov	d0, r4, r5
 8007202:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007206:	45b8      	cmp	r8, r7
 8007208:	bf3a      	itte	cc
 800720a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800720e:	f1a6 0708 	subcc.w	r7, r6, #8
 8007212:	2300      	movcs	r3, #0
 8007214:	380b      	subs	r0, #11
 8007216:	d012      	beq.n	800723e <__b2d+0x8a>
 8007218:	f1c0 0120 	rsb	r1, r0, #32
 800721c:	fa23 f401 	lsr.w	r4, r3, r1
 8007220:	4082      	lsls	r2, r0
 8007222:	4322      	orrs	r2, r4
 8007224:	4547      	cmp	r7, r8
 8007226:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 800722a:	bf8c      	ite	hi
 800722c:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8007230:	2200      	movls	r2, #0
 8007232:	4083      	lsls	r3, r0
 8007234:	40ca      	lsrs	r2, r1
 8007236:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800723a:	4313      	orrs	r3, r2
 800723c:	e7de      	b.n	80071fc <__b2d+0x48>
 800723e:	ea42 0501 	orr.w	r5, r2, r1
 8007242:	e7db      	b.n	80071fc <__b2d+0x48>
 8007244:	3ff00000 	.word	0x3ff00000

08007248 <__d2b>:
 8007248:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800724c:	460f      	mov	r7, r1
 800724e:	2101      	movs	r1, #1
 8007250:	ec59 8b10 	vmov	r8, r9, d0
 8007254:	4616      	mov	r6, r2
 8007256:	f7ff fc1b 	bl	8006a90 <_Balloc>
 800725a:	4604      	mov	r4, r0
 800725c:	b930      	cbnz	r0, 800726c <__d2b+0x24>
 800725e:	4602      	mov	r2, r0
 8007260:	4b23      	ldr	r3, [pc, #140]	@ (80072f0 <__d2b+0xa8>)
 8007262:	4824      	ldr	r0, [pc, #144]	@ (80072f4 <__d2b+0xac>)
 8007264:	f240 310f 	movw	r1, #783	@ 0x30f
 8007268:	f001 f996 	bl	8008598 <__assert_func>
 800726c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8007270:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007274:	b10d      	cbz	r5, 800727a <__d2b+0x32>
 8007276:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800727a:	9301      	str	r3, [sp, #4]
 800727c:	f1b8 0300 	subs.w	r3, r8, #0
 8007280:	d023      	beq.n	80072ca <__d2b+0x82>
 8007282:	4668      	mov	r0, sp
 8007284:	9300      	str	r3, [sp, #0]
 8007286:	f7ff fd14 	bl	8006cb2 <__lo0bits>
 800728a:	e9dd 1200 	ldrd	r1, r2, [sp]
 800728e:	b1d0      	cbz	r0, 80072c6 <__d2b+0x7e>
 8007290:	f1c0 0320 	rsb	r3, r0, #32
 8007294:	fa02 f303 	lsl.w	r3, r2, r3
 8007298:	430b      	orrs	r3, r1
 800729a:	40c2      	lsrs	r2, r0
 800729c:	6163      	str	r3, [r4, #20]
 800729e:	9201      	str	r2, [sp, #4]
 80072a0:	9b01      	ldr	r3, [sp, #4]
 80072a2:	61a3      	str	r3, [r4, #24]
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	bf0c      	ite	eq
 80072a8:	2201      	moveq	r2, #1
 80072aa:	2202      	movne	r2, #2
 80072ac:	6122      	str	r2, [r4, #16]
 80072ae:	b1a5      	cbz	r5, 80072da <__d2b+0x92>
 80072b0:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80072b4:	4405      	add	r5, r0
 80072b6:	603d      	str	r5, [r7, #0]
 80072b8:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80072bc:	6030      	str	r0, [r6, #0]
 80072be:	4620      	mov	r0, r4
 80072c0:	b003      	add	sp, #12
 80072c2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80072c6:	6161      	str	r1, [r4, #20]
 80072c8:	e7ea      	b.n	80072a0 <__d2b+0x58>
 80072ca:	a801      	add	r0, sp, #4
 80072cc:	f7ff fcf1 	bl	8006cb2 <__lo0bits>
 80072d0:	9b01      	ldr	r3, [sp, #4]
 80072d2:	6163      	str	r3, [r4, #20]
 80072d4:	3020      	adds	r0, #32
 80072d6:	2201      	movs	r2, #1
 80072d8:	e7e8      	b.n	80072ac <__d2b+0x64>
 80072da:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80072de:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80072e2:	6038      	str	r0, [r7, #0]
 80072e4:	6918      	ldr	r0, [r3, #16]
 80072e6:	f7ff fcc5 	bl	8006c74 <__hi0bits>
 80072ea:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80072ee:	e7e5      	b.n	80072bc <__d2b+0x74>
 80072f0:	08009975 	.word	0x08009975
 80072f4:	08009986 	.word	0x08009986

080072f8 <__ratio>:
 80072f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072fc:	b085      	sub	sp, #20
 80072fe:	e9cd 1000 	strd	r1, r0, [sp]
 8007302:	a902      	add	r1, sp, #8
 8007304:	f7ff ff56 	bl	80071b4 <__b2d>
 8007308:	9800      	ldr	r0, [sp, #0]
 800730a:	a903      	add	r1, sp, #12
 800730c:	ec55 4b10 	vmov	r4, r5, d0
 8007310:	f7ff ff50 	bl	80071b4 <__b2d>
 8007314:	9b01      	ldr	r3, [sp, #4]
 8007316:	6919      	ldr	r1, [r3, #16]
 8007318:	9b00      	ldr	r3, [sp, #0]
 800731a:	691b      	ldr	r3, [r3, #16]
 800731c:	1ac9      	subs	r1, r1, r3
 800731e:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8007322:	1a9b      	subs	r3, r3, r2
 8007324:	ec5b ab10 	vmov	sl, fp, d0
 8007328:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 800732c:	2b00      	cmp	r3, #0
 800732e:	bfce      	itee	gt
 8007330:	462a      	movgt	r2, r5
 8007332:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8007336:	465a      	movle	r2, fp
 8007338:	462f      	mov	r7, r5
 800733a:	46d9      	mov	r9, fp
 800733c:	bfcc      	ite	gt
 800733e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8007342:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8007346:	464b      	mov	r3, r9
 8007348:	4652      	mov	r2, sl
 800734a:	4620      	mov	r0, r4
 800734c:	4639      	mov	r1, r7
 800734e:	f7f9 fa85 	bl	800085c <__aeabi_ddiv>
 8007352:	ec41 0b10 	vmov	d0, r0, r1
 8007356:	b005      	add	sp, #20
 8007358:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800735c <__copybits>:
 800735c:	3901      	subs	r1, #1
 800735e:	b570      	push	{r4, r5, r6, lr}
 8007360:	1149      	asrs	r1, r1, #5
 8007362:	6914      	ldr	r4, [r2, #16]
 8007364:	3101      	adds	r1, #1
 8007366:	f102 0314 	add.w	r3, r2, #20
 800736a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800736e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8007372:	1f05      	subs	r5, r0, #4
 8007374:	42a3      	cmp	r3, r4
 8007376:	d30c      	bcc.n	8007392 <__copybits+0x36>
 8007378:	1aa3      	subs	r3, r4, r2
 800737a:	3b11      	subs	r3, #17
 800737c:	f023 0303 	bic.w	r3, r3, #3
 8007380:	3211      	adds	r2, #17
 8007382:	42a2      	cmp	r2, r4
 8007384:	bf88      	it	hi
 8007386:	2300      	movhi	r3, #0
 8007388:	4418      	add	r0, r3
 800738a:	2300      	movs	r3, #0
 800738c:	4288      	cmp	r0, r1
 800738e:	d305      	bcc.n	800739c <__copybits+0x40>
 8007390:	bd70      	pop	{r4, r5, r6, pc}
 8007392:	f853 6b04 	ldr.w	r6, [r3], #4
 8007396:	f845 6f04 	str.w	r6, [r5, #4]!
 800739a:	e7eb      	b.n	8007374 <__copybits+0x18>
 800739c:	f840 3b04 	str.w	r3, [r0], #4
 80073a0:	e7f4      	b.n	800738c <__copybits+0x30>

080073a2 <__any_on>:
 80073a2:	f100 0214 	add.w	r2, r0, #20
 80073a6:	6900      	ldr	r0, [r0, #16]
 80073a8:	114b      	asrs	r3, r1, #5
 80073aa:	4298      	cmp	r0, r3
 80073ac:	b510      	push	{r4, lr}
 80073ae:	db11      	blt.n	80073d4 <__any_on+0x32>
 80073b0:	dd0a      	ble.n	80073c8 <__any_on+0x26>
 80073b2:	f011 011f 	ands.w	r1, r1, #31
 80073b6:	d007      	beq.n	80073c8 <__any_on+0x26>
 80073b8:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80073bc:	fa24 f001 	lsr.w	r0, r4, r1
 80073c0:	fa00 f101 	lsl.w	r1, r0, r1
 80073c4:	428c      	cmp	r4, r1
 80073c6:	d10b      	bne.n	80073e0 <__any_on+0x3e>
 80073c8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80073cc:	4293      	cmp	r3, r2
 80073ce:	d803      	bhi.n	80073d8 <__any_on+0x36>
 80073d0:	2000      	movs	r0, #0
 80073d2:	bd10      	pop	{r4, pc}
 80073d4:	4603      	mov	r3, r0
 80073d6:	e7f7      	b.n	80073c8 <__any_on+0x26>
 80073d8:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80073dc:	2900      	cmp	r1, #0
 80073de:	d0f5      	beq.n	80073cc <__any_on+0x2a>
 80073e0:	2001      	movs	r0, #1
 80073e2:	e7f6      	b.n	80073d2 <__any_on+0x30>

080073e4 <sulp>:
 80073e4:	b570      	push	{r4, r5, r6, lr}
 80073e6:	4604      	mov	r4, r0
 80073e8:	460d      	mov	r5, r1
 80073ea:	ec45 4b10 	vmov	d0, r4, r5
 80073ee:	4616      	mov	r6, r2
 80073f0:	f7ff feba 	bl	8007168 <__ulp>
 80073f4:	ec51 0b10 	vmov	r0, r1, d0
 80073f8:	b17e      	cbz	r6, 800741a <sulp+0x36>
 80073fa:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80073fe:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8007402:	2b00      	cmp	r3, #0
 8007404:	dd09      	ble.n	800741a <sulp+0x36>
 8007406:	051b      	lsls	r3, r3, #20
 8007408:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800740c:	2400      	movs	r4, #0
 800740e:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8007412:	4622      	mov	r2, r4
 8007414:	462b      	mov	r3, r5
 8007416:	f7f9 f8f7 	bl	8000608 <__aeabi_dmul>
 800741a:	ec41 0b10 	vmov	d0, r0, r1
 800741e:	bd70      	pop	{r4, r5, r6, pc}

08007420 <_strtod_l>:
 8007420:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007424:	b09f      	sub	sp, #124	@ 0x7c
 8007426:	460c      	mov	r4, r1
 8007428:	9217      	str	r2, [sp, #92]	@ 0x5c
 800742a:	2200      	movs	r2, #0
 800742c:	921a      	str	r2, [sp, #104]	@ 0x68
 800742e:	9005      	str	r0, [sp, #20]
 8007430:	f04f 0a00 	mov.w	sl, #0
 8007434:	f04f 0b00 	mov.w	fp, #0
 8007438:	460a      	mov	r2, r1
 800743a:	9219      	str	r2, [sp, #100]	@ 0x64
 800743c:	7811      	ldrb	r1, [r2, #0]
 800743e:	292b      	cmp	r1, #43	@ 0x2b
 8007440:	d04a      	beq.n	80074d8 <_strtod_l+0xb8>
 8007442:	d838      	bhi.n	80074b6 <_strtod_l+0x96>
 8007444:	290d      	cmp	r1, #13
 8007446:	d832      	bhi.n	80074ae <_strtod_l+0x8e>
 8007448:	2908      	cmp	r1, #8
 800744a:	d832      	bhi.n	80074b2 <_strtod_l+0x92>
 800744c:	2900      	cmp	r1, #0
 800744e:	d03b      	beq.n	80074c8 <_strtod_l+0xa8>
 8007450:	2200      	movs	r2, #0
 8007452:	920e      	str	r2, [sp, #56]	@ 0x38
 8007454:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8007456:	782a      	ldrb	r2, [r5, #0]
 8007458:	2a30      	cmp	r2, #48	@ 0x30
 800745a:	f040 80b2 	bne.w	80075c2 <_strtod_l+0x1a2>
 800745e:	786a      	ldrb	r2, [r5, #1]
 8007460:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8007464:	2a58      	cmp	r2, #88	@ 0x58
 8007466:	d16e      	bne.n	8007546 <_strtod_l+0x126>
 8007468:	9302      	str	r3, [sp, #8]
 800746a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800746c:	9301      	str	r3, [sp, #4]
 800746e:	ab1a      	add	r3, sp, #104	@ 0x68
 8007470:	9300      	str	r3, [sp, #0]
 8007472:	4a8f      	ldr	r2, [pc, #572]	@ (80076b0 <_strtod_l+0x290>)
 8007474:	9805      	ldr	r0, [sp, #20]
 8007476:	ab1b      	add	r3, sp, #108	@ 0x6c
 8007478:	a919      	add	r1, sp, #100	@ 0x64
 800747a:	f001 f927 	bl	80086cc <__gethex>
 800747e:	f010 060f 	ands.w	r6, r0, #15
 8007482:	4604      	mov	r4, r0
 8007484:	d005      	beq.n	8007492 <_strtod_l+0x72>
 8007486:	2e06      	cmp	r6, #6
 8007488:	d128      	bne.n	80074dc <_strtod_l+0xbc>
 800748a:	3501      	adds	r5, #1
 800748c:	2300      	movs	r3, #0
 800748e:	9519      	str	r5, [sp, #100]	@ 0x64
 8007490:	930e      	str	r3, [sp, #56]	@ 0x38
 8007492:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8007494:	2b00      	cmp	r3, #0
 8007496:	f040 858e 	bne.w	8007fb6 <_strtod_l+0xb96>
 800749a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800749c:	b1cb      	cbz	r3, 80074d2 <_strtod_l+0xb2>
 800749e:	4652      	mov	r2, sl
 80074a0:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 80074a4:	ec43 2b10 	vmov	d0, r2, r3
 80074a8:	b01f      	add	sp, #124	@ 0x7c
 80074aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80074ae:	2920      	cmp	r1, #32
 80074b0:	d1ce      	bne.n	8007450 <_strtod_l+0x30>
 80074b2:	3201      	adds	r2, #1
 80074b4:	e7c1      	b.n	800743a <_strtod_l+0x1a>
 80074b6:	292d      	cmp	r1, #45	@ 0x2d
 80074b8:	d1ca      	bne.n	8007450 <_strtod_l+0x30>
 80074ba:	2101      	movs	r1, #1
 80074bc:	910e      	str	r1, [sp, #56]	@ 0x38
 80074be:	1c51      	adds	r1, r2, #1
 80074c0:	9119      	str	r1, [sp, #100]	@ 0x64
 80074c2:	7852      	ldrb	r2, [r2, #1]
 80074c4:	2a00      	cmp	r2, #0
 80074c6:	d1c5      	bne.n	8007454 <_strtod_l+0x34>
 80074c8:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80074ca:	9419      	str	r4, [sp, #100]	@ 0x64
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	f040 8570 	bne.w	8007fb2 <_strtod_l+0xb92>
 80074d2:	4652      	mov	r2, sl
 80074d4:	465b      	mov	r3, fp
 80074d6:	e7e5      	b.n	80074a4 <_strtod_l+0x84>
 80074d8:	2100      	movs	r1, #0
 80074da:	e7ef      	b.n	80074bc <_strtod_l+0x9c>
 80074dc:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80074de:	b13a      	cbz	r2, 80074f0 <_strtod_l+0xd0>
 80074e0:	2135      	movs	r1, #53	@ 0x35
 80074e2:	a81c      	add	r0, sp, #112	@ 0x70
 80074e4:	f7ff ff3a 	bl	800735c <__copybits>
 80074e8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80074ea:	9805      	ldr	r0, [sp, #20]
 80074ec:	f7ff fb10 	bl	8006b10 <_Bfree>
 80074f0:	3e01      	subs	r6, #1
 80074f2:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 80074f4:	2e04      	cmp	r6, #4
 80074f6:	d806      	bhi.n	8007506 <_strtod_l+0xe6>
 80074f8:	e8df f006 	tbb	[pc, r6]
 80074fc:	201d0314 	.word	0x201d0314
 8007500:	14          	.byte	0x14
 8007501:	00          	.byte	0x00
 8007502:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8007506:	05e1      	lsls	r1, r4, #23
 8007508:	bf48      	it	mi
 800750a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800750e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8007512:	0d1b      	lsrs	r3, r3, #20
 8007514:	051b      	lsls	r3, r3, #20
 8007516:	2b00      	cmp	r3, #0
 8007518:	d1bb      	bne.n	8007492 <_strtod_l+0x72>
 800751a:	f7fe fb2b 	bl	8005b74 <__errno>
 800751e:	2322      	movs	r3, #34	@ 0x22
 8007520:	6003      	str	r3, [r0, #0]
 8007522:	e7b6      	b.n	8007492 <_strtod_l+0x72>
 8007524:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8007528:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800752c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8007530:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8007534:	e7e7      	b.n	8007506 <_strtod_l+0xe6>
 8007536:	f8df b180 	ldr.w	fp, [pc, #384]	@ 80076b8 <_strtod_l+0x298>
 800753a:	e7e4      	b.n	8007506 <_strtod_l+0xe6>
 800753c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8007540:	f04f 3aff 	mov.w	sl, #4294967295
 8007544:	e7df      	b.n	8007506 <_strtod_l+0xe6>
 8007546:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007548:	1c5a      	adds	r2, r3, #1
 800754a:	9219      	str	r2, [sp, #100]	@ 0x64
 800754c:	785b      	ldrb	r3, [r3, #1]
 800754e:	2b30      	cmp	r3, #48	@ 0x30
 8007550:	d0f9      	beq.n	8007546 <_strtod_l+0x126>
 8007552:	2b00      	cmp	r3, #0
 8007554:	d09d      	beq.n	8007492 <_strtod_l+0x72>
 8007556:	2301      	movs	r3, #1
 8007558:	2700      	movs	r7, #0
 800755a:	9308      	str	r3, [sp, #32]
 800755c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800755e:	930c      	str	r3, [sp, #48]	@ 0x30
 8007560:	970b      	str	r7, [sp, #44]	@ 0x2c
 8007562:	46b9      	mov	r9, r7
 8007564:	220a      	movs	r2, #10
 8007566:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8007568:	7805      	ldrb	r5, [r0, #0]
 800756a:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800756e:	b2d9      	uxtb	r1, r3
 8007570:	2909      	cmp	r1, #9
 8007572:	d928      	bls.n	80075c6 <_strtod_l+0x1a6>
 8007574:	494f      	ldr	r1, [pc, #316]	@ (80076b4 <_strtod_l+0x294>)
 8007576:	2201      	movs	r2, #1
 8007578:	f000 ffd6 	bl	8008528 <strncmp>
 800757c:	2800      	cmp	r0, #0
 800757e:	d032      	beq.n	80075e6 <_strtod_l+0x1c6>
 8007580:	2000      	movs	r0, #0
 8007582:	462a      	mov	r2, r5
 8007584:	900a      	str	r0, [sp, #40]	@ 0x28
 8007586:	464d      	mov	r5, r9
 8007588:	4603      	mov	r3, r0
 800758a:	2a65      	cmp	r2, #101	@ 0x65
 800758c:	d001      	beq.n	8007592 <_strtod_l+0x172>
 800758e:	2a45      	cmp	r2, #69	@ 0x45
 8007590:	d114      	bne.n	80075bc <_strtod_l+0x19c>
 8007592:	b91d      	cbnz	r5, 800759c <_strtod_l+0x17c>
 8007594:	9a08      	ldr	r2, [sp, #32]
 8007596:	4302      	orrs	r2, r0
 8007598:	d096      	beq.n	80074c8 <_strtod_l+0xa8>
 800759a:	2500      	movs	r5, #0
 800759c:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800759e:	1c62      	adds	r2, r4, #1
 80075a0:	9219      	str	r2, [sp, #100]	@ 0x64
 80075a2:	7862      	ldrb	r2, [r4, #1]
 80075a4:	2a2b      	cmp	r2, #43	@ 0x2b
 80075a6:	d07a      	beq.n	800769e <_strtod_l+0x27e>
 80075a8:	2a2d      	cmp	r2, #45	@ 0x2d
 80075aa:	d07e      	beq.n	80076aa <_strtod_l+0x28a>
 80075ac:	f04f 0c00 	mov.w	ip, #0
 80075b0:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 80075b4:	2909      	cmp	r1, #9
 80075b6:	f240 8085 	bls.w	80076c4 <_strtod_l+0x2a4>
 80075ba:	9419      	str	r4, [sp, #100]	@ 0x64
 80075bc:	f04f 0800 	mov.w	r8, #0
 80075c0:	e0a5      	b.n	800770e <_strtod_l+0x2ee>
 80075c2:	2300      	movs	r3, #0
 80075c4:	e7c8      	b.n	8007558 <_strtod_l+0x138>
 80075c6:	f1b9 0f08 	cmp.w	r9, #8
 80075ca:	bfd8      	it	le
 80075cc:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 80075ce:	f100 0001 	add.w	r0, r0, #1
 80075d2:	bfda      	itte	le
 80075d4:	fb02 3301 	mlale	r3, r2, r1, r3
 80075d8:	930b      	strle	r3, [sp, #44]	@ 0x2c
 80075da:	fb02 3707 	mlagt	r7, r2, r7, r3
 80075de:	f109 0901 	add.w	r9, r9, #1
 80075e2:	9019      	str	r0, [sp, #100]	@ 0x64
 80075e4:	e7bf      	b.n	8007566 <_strtod_l+0x146>
 80075e6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80075e8:	1c5a      	adds	r2, r3, #1
 80075ea:	9219      	str	r2, [sp, #100]	@ 0x64
 80075ec:	785a      	ldrb	r2, [r3, #1]
 80075ee:	f1b9 0f00 	cmp.w	r9, #0
 80075f2:	d03b      	beq.n	800766c <_strtod_l+0x24c>
 80075f4:	900a      	str	r0, [sp, #40]	@ 0x28
 80075f6:	464d      	mov	r5, r9
 80075f8:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 80075fc:	2b09      	cmp	r3, #9
 80075fe:	d912      	bls.n	8007626 <_strtod_l+0x206>
 8007600:	2301      	movs	r3, #1
 8007602:	e7c2      	b.n	800758a <_strtod_l+0x16a>
 8007604:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007606:	1c5a      	adds	r2, r3, #1
 8007608:	9219      	str	r2, [sp, #100]	@ 0x64
 800760a:	785a      	ldrb	r2, [r3, #1]
 800760c:	3001      	adds	r0, #1
 800760e:	2a30      	cmp	r2, #48	@ 0x30
 8007610:	d0f8      	beq.n	8007604 <_strtod_l+0x1e4>
 8007612:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8007616:	2b08      	cmp	r3, #8
 8007618:	f200 84d2 	bhi.w	8007fc0 <_strtod_l+0xba0>
 800761c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800761e:	900a      	str	r0, [sp, #40]	@ 0x28
 8007620:	2000      	movs	r0, #0
 8007622:	930c      	str	r3, [sp, #48]	@ 0x30
 8007624:	4605      	mov	r5, r0
 8007626:	3a30      	subs	r2, #48	@ 0x30
 8007628:	f100 0301 	add.w	r3, r0, #1
 800762c:	d018      	beq.n	8007660 <_strtod_l+0x240>
 800762e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007630:	4419      	add	r1, r3
 8007632:	910a      	str	r1, [sp, #40]	@ 0x28
 8007634:	462e      	mov	r6, r5
 8007636:	f04f 0e0a 	mov.w	lr, #10
 800763a:	1c71      	adds	r1, r6, #1
 800763c:	eba1 0c05 	sub.w	ip, r1, r5
 8007640:	4563      	cmp	r3, ip
 8007642:	dc15      	bgt.n	8007670 <_strtod_l+0x250>
 8007644:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8007648:	182b      	adds	r3, r5, r0
 800764a:	2b08      	cmp	r3, #8
 800764c:	f105 0501 	add.w	r5, r5, #1
 8007650:	4405      	add	r5, r0
 8007652:	dc1a      	bgt.n	800768a <_strtod_l+0x26a>
 8007654:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007656:	230a      	movs	r3, #10
 8007658:	fb03 2301 	mla	r3, r3, r1, r2
 800765c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800765e:	2300      	movs	r3, #0
 8007660:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8007662:	1c51      	adds	r1, r2, #1
 8007664:	9119      	str	r1, [sp, #100]	@ 0x64
 8007666:	7852      	ldrb	r2, [r2, #1]
 8007668:	4618      	mov	r0, r3
 800766a:	e7c5      	b.n	80075f8 <_strtod_l+0x1d8>
 800766c:	4648      	mov	r0, r9
 800766e:	e7ce      	b.n	800760e <_strtod_l+0x1ee>
 8007670:	2e08      	cmp	r6, #8
 8007672:	dc05      	bgt.n	8007680 <_strtod_l+0x260>
 8007674:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8007676:	fb0e f606 	mul.w	r6, lr, r6
 800767a:	960b      	str	r6, [sp, #44]	@ 0x2c
 800767c:	460e      	mov	r6, r1
 800767e:	e7dc      	b.n	800763a <_strtod_l+0x21a>
 8007680:	2910      	cmp	r1, #16
 8007682:	bfd8      	it	le
 8007684:	fb0e f707 	mulle.w	r7, lr, r7
 8007688:	e7f8      	b.n	800767c <_strtod_l+0x25c>
 800768a:	2b0f      	cmp	r3, #15
 800768c:	bfdc      	itt	le
 800768e:	230a      	movle	r3, #10
 8007690:	fb03 2707 	mlale	r7, r3, r7, r2
 8007694:	e7e3      	b.n	800765e <_strtod_l+0x23e>
 8007696:	2300      	movs	r3, #0
 8007698:	930a      	str	r3, [sp, #40]	@ 0x28
 800769a:	2301      	movs	r3, #1
 800769c:	e77a      	b.n	8007594 <_strtod_l+0x174>
 800769e:	f04f 0c00 	mov.w	ip, #0
 80076a2:	1ca2      	adds	r2, r4, #2
 80076a4:	9219      	str	r2, [sp, #100]	@ 0x64
 80076a6:	78a2      	ldrb	r2, [r4, #2]
 80076a8:	e782      	b.n	80075b0 <_strtod_l+0x190>
 80076aa:	f04f 0c01 	mov.w	ip, #1
 80076ae:	e7f8      	b.n	80076a2 <_strtod_l+0x282>
 80076b0:	08009bac 	.word	0x08009bac
 80076b4:	080099df 	.word	0x080099df
 80076b8:	7ff00000 	.word	0x7ff00000
 80076bc:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80076be:	1c51      	adds	r1, r2, #1
 80076c0:	9119      	str	r1, [sp, #100]	@ 0x64
 80076c2:	7852      	ldrb	r2, [r2, #1]
 80076c4:	2a30      	cmp	r2, #48	@ 0x30
 80076c6:	d0f9      	beq.n	80076bc <_strtod_l+0x29c>
 80076c8:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 80076cc:	2908      	cmp	r1, #8
 80076ce:	f63f af75 	bhi.w	80075bc <_strtod_l+0x19c>
 80076d2:	3a30      	subs	r2, #48	@ 0x30
 80076d4:	9209      	str	r2, [sp, #36]	@ 0x24
 80076d6:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80076d8:	920f      	str	r2, [sp, #60]	@ 0x3c
 80076da:	f04f 080a 	mov.w	r8, #10
 80076de:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80076e0:	1c56      	adds	r6, r2, #1
 80076e2:	9619      	str	r6, [sp, #100]	@ 0x64
 80076e4:	7852      	ldrb	r2, [r2, #1]
 80076e6:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 80076ea:	f1be 0f09 	cmp.w	lr, #9
 80076ee:	d939      	bls.n	8007764 <_strtod_l+0x344>
 80076f0:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80076f2:	1a76      	subs	r6, r6, r1
 80076f4:	2e08      	cmp	r6, #8
 80076f6:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 80076fa:	dc03      	bgt.n	8007704 <_strtod_l+0x2e4>
 80076fc:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80076fe:	4588      	cmp	r8, r1
 8007700:	bfa8      	it	ge
 8007702:	4688      	movge	r8, r1
 8007704:	f1bc 0f00 	cmp.w	ip, #0
 8007708:	d001      	beq.n	800770e <_strtod_l+0x2ee>
 800770a:	f1c8 0800 	rsb	r8, r8, #0
 800770e:	2d00      	cmp	r5, #0
 8007710:	d14e      	bne.n	80077b0 <_strtod_l+0x390>
 8007712:	9908      	ldr	r1, [sp, #32]
 8007714:	4308      	orrs	r0, r1
 8007716:	f47f aebc 	bne.w	8007492 <_strtod_l+0x72>
 800771a:	2b00      	cmp	r3, #0
 800771c:	f47f aed4 	bne.w	80074c8 <_strtod_l+0xa8>
 8007720:	2a69      	cmp	r2, #105	@ 0x69
 8007722:	d028      	beq.n	8007776 <_strtod_l+0x356>
 8007724:	dc25      	bgt.n	8007772 <_strtod_l+0x352>
 8007726:	2a49      	cmp	r2, #73	@ 0x49
 8007728:	d025      	beq.n	8007776 <_strtod_l+0x356>
 800772a:	2a4e      	cmp	r2, #78	@ 0x4e
 800772c:	f47f aecc 	bne.w	80074c8 <_strtod_l+0xa8>
 8007730:	499a      	ldr	r1, [pc, #616]	@ (800799c <_strtod_l+0x57c>)
 8007732:	a819      	add	r0, sp, #100	@ 0x64
 8007734:	f001 f9ec 	bl	8008b10 <__match>
 8007738:	2800      	cmp	r0, #0
 800773a:	f43f aec5 	beq.w	80074c8 <_strtod_l+0xa8>
 800773e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007740:	781b      	ldrb	r3, [r3, #0]
 8007742:	2b28      	cmp	r3, #40	@ 0x28
 8007744:	d12e      	bne.n	80077a4 <_strtod_l+0x384>
 8007746:	4996      	ldr	r1, [pc, #600]	@ (80079a0 <_strtod_l+0x580>)
 8007748:	aa1c      	add	r2, sp, #112	@ 0x70
 800774a:	a819      	add	r0, sp, #100	@ 0x64
 800774c:	f001 f9f4 	bl	8008b38 <__hexnan>
 8007750:	2805      	cmp	r0, #5
 8007752:	d127      	bne.n	80077a4 <_strtod_l+0x384>
 8007754:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8007756:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800775a:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800775e:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8007762:	e696      	b.n	8007492 <_strtod_l+0x72>
 8007764:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007766:	fb08 2101 	mla	r1, r8, r1, r2
 800776a:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800776e:	9209      	str	r2, [sp, #36]	@ 0x24
 8007770:	e7b5      	b.n	80076de <_strtod_l+0x2be>
 8007772:	2a6e      	cmp	r2, #110	@ 0x6e
 8007774:	e7da      	b.n	800772c <_strtod_l+0x30c>
 8007776:	498b      	ldr	r1, [pc, #556]	@ (80079a4 <_strtod_l+0x584>)
 8007778:	a819      	add	r0, sp, #100	@ 0x64
 800777a:	f001 f9c9 	bl	8008b10 <__match>
 800777e:	2800      	cmp	r0, #0
 8007780:	f43f aea2 	beq.w	80074c8 <_strtod_l+0xa8>
 8007784:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007786:	4988      	ldr	r1, [pc, #544]	@ (80079a8 <_strtod_l+0x588>)
 8007788:	3b01      	subs	r3, #1
 800778a:	a819      	add	r0, sp, #100	@ 0x64
 800778c:	9319      	str	r3, [sp, #100]	@ 0x64
 800778e:	f001 f9bf 	bl	8008b10 <__match>
 8007792:	b910      	cbnz	r0, 800779a <_strtod_l+0x37a>
 8007794:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007796:	3301      	adds	r3, #1
 8007798:	9319      	str	r3, [sp, #100]	@ 0x64
 800779a:	f8df b21c 	ldr.w	fp, [pc, #540]	@ 80079b8 <_strtod_l+0x598>
 800779e:	f04f 0a00 	mov.w	sl, #0
 80077a2:	e676      	b.n	8007492 <_strtod_l+0x72>
 80077a4:	4881      	ldr	r0, [pc, #516]	@ (80079ac <_strtod_l+0x58c>)
 80077a6:	f000 feef 	bl	8008588 <nan>
 80077aa:	ec5b ab10 	vmov	sl, fp, d0
 80077ae:	e670      	b.n	8007492 <_strtod_l+0x72>
 80077b0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80077b2:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 80077b4:	eba8 0303 	sub.w	r3, r8, r3
 80077b8:	f1b9 0f00 	cmp.w	r9, #0
 80077bc:	bf08      	it	eq
 80077be:	46a9      	moveq	r9, r5
 80077c0:	2d10      	cmp	r5, #16
 80077c2:	9309      	str	r3, [sp, #36]	@ 0x24
 80077c4:	462c      	mov	r4, r5
 80077c6:	bfa8      	it	ge
 80077c8:	2410      	movge	r4, #16
 80077ca:	f7f8 fea3 	bl	8000514 <__aeabi_ui2d>
 80077ce:	2d09      	cmp	r5, #9
 80077d0:	4682      	mov	sl, r0
 80077d2:	468b      	mov	fp, r1
 80077d4:	dc13      	bgt.n	80077fe <_strtod_l+0x3de>
 80077d6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80077d8:	2b00      	cmp	r3, #0
 80077da:	f43f ae5a 	beq.w	8007492 <_strtod_l+0x72>
 80077de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80077e0:	dd78      	ble.n	80078d4 <_strtod_l+0x4b4>
 80077e2:	2b16      	cmp	r3, #22
 80077e4:	dc5f      	bgt.n	80078a6 <_strtod_l+0x486>
 80077e6:	4972      	ldr	r1, [pc, #456]	@ (80079b0 <_strtod_l+0x590>)
 80077e8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80077ec:	e9d1 0100 	ldrd	r0, r1, [r1]
 80077f0:	4652      	mov	r2, sl
 80077f2:	465b      	mov	r3, fp
 80077f4:	f7f8 ff08 	bl	8000608 <__aeabi_dmul>
 80077f8:	4682      	mov	sl, r0
 80077fa:	468b      	mov	fp, r1
 80077fc:	e649      	b.n	8007492 <_strtod_l+0x72>
 80077fe:	4b6c      	ldr	r3, [pc, #432]	@ (80079b0 <_strtod_l+0x590>)
 8007800:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007804:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8007808:	f7f8 fefe 	bl	8000608 <__aeabi_dmul>
 800780c:	4682      	mov	sl, r0
 800780e:	4638      	mov	r0, r7
 8007810:	468b      	mov	fp, r1
 8007812:	f7f8 fe7f 	bl	8000514 <__aeabi_ui2d>
 8007816:	4602      	mov	r2, r0
 8007818:	460b      	mov	r3, r1
 800781a:	4650      	mov	r0, sl
 800781c:	4659      	mov	r1, fp
 800781e:	f7f8 fd3d 	bl	800029c <__adddf3>
 8007822:	2d0f      	cmp	r5, #15
 8007824:	4682      	mov	sl, r0
 8007826:	468b      	mov	fp, r1
 8007828:	ddd5      	ble.n	80077d6 <_strtod_l+0x3b6>
 800782a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800782c:	1b2c      	subs	r4, r5, r4
 800782e:	441c      	add	r4, r3
 8007830:	2c00      	cmp	r4, #0
 8007832:	f340 8093 	ble.w	800795c <_strtod_l+0x53c>
 8007836:	f014 030f 	ands.w	r3, r4, #15
 800783a:	d00a      	beq.n	8007852 <_strtod_l+0x432>
 800783c:	495c      	ldr	r1, [pc, #368]	@ (80079b0 <_strtod_l+0x590>)
 800783e:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8007842:	4652      	mov	r2, sl
 8007844:	465b      	mov	r3, fp
 8007846:	e9d1 0100 	ldrd	r0, r1, [r1]
 800784a:	f7f8 fedd 	bl	8000608 <__aeabi_dmul>
 800784e:	4682      	mov	sl, r0
 8007850:	468b      	mov	fp, r1
 8007852:	f034 040f 	bics.w	r4, r4, #15
 8007856:	d073      	beq.n	8007940 <_strtod_l+0x520>
 8007858:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800785c:	dd49      	ble.n	80078f2 <_strtod_l+0x4d2>
 800785e:	2400      	movs	r4, #0
 8007860:	46a0      	mov	r8, r4
 8007862:	940b      	str	r4, [sp, #44]	@ 0x2c
 8007864:	46a1      	mov	r9, r4
 8007866:	9a05      	ldr	r2, [sp, #20]
 8007868:	f8df b14c 	ldr.w	fp, [pc, #332]	@ 80079b8 <_strtod_l+0x598>
 800786c:	2322      	movs	r3, #34	@ 0x22
 800786e:	6013      	str	r3, [r2, #0]
 8007870:	f04f 0a00 	mov.w	sl, #0
 8007874:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007876:	2b00      	cmp	r3, #0
 8007878:	f43f ae0b 	beq.w	8007492 <_strtod_l+0x72>
 800787c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800787e:	9805      	ldr	r0, [sp, #20]
 8007880:	f7ff f946 	bl	8006b10 <_Bfree>
 8007884:	9805      	ldr	r0, [sp, #20]
 8007886:	4649      	mov	r1, r9
 8007888:	f7ff f942 	bl	8006b10 <_Bfree>
 800788c:	9805      	ldr	r0, [sp, #20]
 800788e:	4641      	mov	r1, r8
 8007890:	f7ff f93e 	bl	8006b10 <_Bfree>
 8007894:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007896:	9805      	ldr	r0, [sp, #20]
 8007898:	f7ff f93a 	bl	8006b10 <_Bfree>
 800789c:	9805      	ldr	r0, [sp, #20]
 800789e:	4621      	mov	r1, r4
 80078a0:	f7ff f936 	bl	8006b10 <_Bfree>
 80078a4:	e5f5      	b.n	8007492 <_strtod_l+0x72>
 80078a6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80078a8:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 80078ac:	4293      	cmp	r3, r2
 80078ae:	dbbc      	blt.n	800782a <_strtod_l+0x40a>
 80078b0:	4c3f      	ldr	r4, [pc, #252]	@ (80079b0 <_strtod_l+0x590>)
 80078b2:	f1c5 050f 	rsb	r5, r5, #15
 80078b6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 80078ba:	4652      	mov	r2, sl
 80078bc:	465b      	mov	r3, fp
 80078be:	e9d1 0100 	ldrd	r0, r1, [r1]
 80078c2:	f7f8 fea1 	bl	8000608 <__aeabi_dmul>
 80078c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80078c8:	1b5d      	subs	r5, r3, r5
 80078ca:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 80078ce:	e9d4 2300 	ldrd	r2, r3, [r4]
 80078d2:	e78f      	b.n	80077f4 <_strtod_l+0x3d4>
 80078d4:	3316      	adds	r3, #22
 80078d6:	dba8      	blt.n	800782a <_strtod_l+0x40a>
 80078d8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80078da:	eba3 0808 	sub.w	r8, r3, r8
 80078de:	4b34      	ldr	r3, [pc, #208]	@ (80079b0 <_strtod_l+0x590>)
 80078e0:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 80078e4:	e9d8 2300 	ldrd	r2, r3, [r8]
 80078e8:	4650      	mov	r0, sl
 80078ea:	4659      	mov	r1, fp
 80078ec:	f7f8 ffb6 	bl	800085c <__aeabi_ddiv>
 80078f0:	e782      	b.n	80077f8 <_strtod_l+0x3d8>
 80078f2:	2300      	movs	r3, #0
 80078f4:	4f2f      	ldr	r7, [pc, #188]	@ (80079b4 <_strtod_l+0x594>)
 80078f6:	1124      	asrs	r4, r4, #4
 80078f8:	4650      	mov	r0, sl
 80078fa:	4659      	mov	r1, fp
 80078fc:	461e      	mov	r6, r3
 80078fe:	2c01      	cmp	r4, #1
 8007900:	dc21      	bgt.n	8007946 <_strtod_l+0x526>
 8007902:	b10b      	cbz	r3, 8007908 <_strtod_l+0x4e8>
 8007904:	4682      	mov	sl, r0
 8007906:	468b      	mov	fp, r1
 8007908:	492a      	ldr	r1, [pc, #168]	@ (80079b4 <_strtod_l+0x594>)
 800790a:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800790e:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8007912:	4652      	mov	r2, sl
 8007914:	465b      	mov	r3, fp
 8007916:	e9d1 0100 	ldrd	r0, r1, [r1]
 800791a:	f7f8 fe75 	bl	8000608 <__aeabi_dmul>
 800791e:	4b26      	ldr	r3, [pc, #152]	@ (80079b8 <_strtod_l+0x598>)
 8007920:	460a      	mov	r2, r1
 8007922:	400b      	ands	r3, r1
 8007924:	4925      	ldr	r1, [pc, #148]	@ (80079bc <_strtod_l+0x59c>)
 8007926:	428b      	cmp	r3, r1
 8007928:	4682      	mov	sl, r0
 800792a:	d898      	bhi.n	800785e <_strtod_l+0x43e>
 800792c:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8007930:	428b      	cmp	r3, r1
 8007932:	bf86      	itte	hi
 8007934:	f8df b088 	ldrhi.w	fp, [pc, #136]	@ 80079c0 <_strtod_l+0x5a0>
 8007938:	f04f 3aff 	movhi.w	sl, #4294967295
 800793c:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8007940:	2300      	movs	r3, #0
 8007942:	9308      	str	r3, [sp, #32]
 8007944:	e076      	b.n	8007a34 <_strtod_l+0x614>
 8007946:	07e2      	lsls	r2, r4, #31
 8007948:	d504      	bpl.n	8007954 <_strtod_l+0x534>
 800794a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800794e:	f7f8 fe5b 	bl	8000608 <__aeabi_dmul>
 8007952:	2301      	movs	r3, #1
 8007954:	3601      	adds	r6, #1
 8007956:	1064      	asrs	r4, r4, #1
 8007958:	3708      	adds	r7, #8
 800795a:	e7d0      	b.n	80078fe <_strtod_l+0x4de>
 800795c:	d0f0      	beq.n	8007940 <_strtod_l+0x520>
 800795e:	4264      	negs	r4, r4
 8007960:	f014 020f 	ands.w	r2, r4, #15
 8007964:	d00a      	beq.n	800797c <_strtod_l+0x55c>
 8007966:	4b12      	ldr	r3, [pc, #72]	@ (80079b0 <_strtod_l+0x590>)
 8007968:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800796c:	4650      	mov	r0, sl
 800796e:	4659      	mov	r1, fp
 8007970:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007974:	f7f8 ff72 	bl	800085c <__aeabi_ddiv>
 8007978:	4682      	mov	sl, r0
 800797a:	468b      	mov	fp, r1
 800797c:	1124      	asrs	r4, r4, #4
 800797e:	d0df      	beq.n	8007940 <_strtod_l+0x520>
 8007980:	2c1f      	cmp	r4, #31
 8007982:	dd1f      	ble.n	80079c4 <_strtod_l+0x5a4>
 8007984:	2400      	movs	r4, #0
 8007986:	46a0      	mov	r8, r4
 8007988:	940b      	str	r4, [sp, #44]	@ 0x2c
 800798a:	46a1      	mov	r9, r4
 800798c:	9a05      	ldr	r2, [sp, #20]
 800798e:	2322      	movs	r3, #34	@ 0x22
 8007990:	f04f 0a00 	mov.w	sl, #0
 8007994:	f04f 0b00 	mov.w	fp, #0
 8007998:	6013      	str	r3, [r2, #0]
 800799a:	e76b      	b.n	8007874 <_strtod_l+0x454>
 800799c:	080098cd 	.word	0x080098cd
 80079a0:	08009b98 	.word	0x08009b98
 80079a4:	080098c5 	.word	0x080098c5
 80079a8:	080098fc 	.word	0x080098fc
 80079ac:	08009a35 	.word	0x08009a35
 80079b0:	08009ad0 	.word	0x08009ad0
 80079b4:	08009aa8 	.word	0x08009aa8
 80079b8:	7ff00000 	.word	0x7ff00000
 80079bc:	7ca00000 	.word	0x7ca00000
 80079c0:	7fefffff 	.word	0x7fefffff
 80079c4:	f014 0310 	ands.w	r3, r4, #16
 80079c8:	bf18      	it	ne
 80079ca:	236a      	movne	r3, #106	@ 0x6a
 80079cc:	4ea9      	ldr	r6, [pc, #676]	@ (8007c74 <_strtod_l+0x854>)
 80079ce:	9308      	str	r3, [sp, #32]
 80079d0:	4650      	mov	r0, sl
 80079d2:	4659      	mov	r1, fp
 80079d4:	2300      	movs	r3, #0
 80079d6:	07e7      	lsls	r7, r4, #31
 80079d8:	d504      	bpl.n	80079e4 <_strtod_l+0x5c4>
 80079da:	e9d6 2300 	ldrd	r2, r3, [r6]
 80079de:	f7f8 fe13 	bl	8000608 <__aeabi_dmul>
 80079e2:	2301      	movs	r3, #1
 80079e4:	1064      	asrs	r4, r4, #1
 80079e6:	f106 0608 	add.w	r6, r6, #8
 80079ea:	d1f4      	bne.n	80079d6 <_strtod_l+0x5b6>
 80079ec:	b10b      	cbz	r3, 80079f2 <_strtod_l+0x5d2>
 80079ee:	4682      	mov	sl, r0
 80079f0:	468b      	mov	fp, r1
 80079f2:	9b08      	ldr	r3, [sp, #32]
 80079f4:	b1b3      	cbz	r3, 8007a24 <_strtod_l+0x604>
 80079f6:	f3cb 520a 	ubfx	r2, fp, #20, #11
 80079fa:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	4659      	mov	r1, fp
 8007a02:	dd0f      	ble.n	8007a24 <_strtod_l+0x604>
 8007a04:	2b1f      	cmp	r3, #31
 8007a06:	dd56      	ble.n	8007ab6 <_strtod_l+0x696>
 8007a08:	2b34      	cmp	r3, #52	@ 0x34
 8007a0a:	bfde      	ittt	le
 8007a0c:	f04f 33ff 	movle.w	r3, #4294967295
 8007a10:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8007a14:	4093      	lslle	r3, r2
 8007a16:	f04f 0a00 	mov.w	sl, #0
 8007a1a:	bfcc      	ite	gt
 8007a1c:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8007a20:	ea03 0b01 	andle.w	fp, r3, r1
 8007a24:	2200      	movs	r2, #0
 8007a26:	2300      	movs	r3, #0
 8007a28:	4650      	mov	r0, sl
 8007a2a:	4659      	mov	r1, fp
 8007a2c:	f7f9 f854 	bl	8000ad8 <__aeabi_dcmpeq>
 8007a30:	2800      	cmp	r0, #0
 8007a32:	d1a7      	bne.n	8007984 <_strtod_l+0x564>
 8007a34:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007a36:	9300      	str	r3, [sp, #0]
 8007a38:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8007a3a:	9805      	ldr	r0, [sp, #20]
 8007a3c:	462b      	mov	r3, r5
 8007a3e:	464a      	mov	r2, r9
 8007a40:	f7ff f8ce 	bl	8006be0 <__s2b>
 8007a44:	900b      	str	r0, [sp, #44]	@ 0x2c
 8007a46:	2800      	cmp	r0, #0
 8007a48:	f43f af09 	beq.w	800785e <_strtod_l+0x43e>
 8007a4c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007a4e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007a50:	2a00      	cmp	r2, #0
 8007a52:	eba3 0308 	sub.w	r3, r3, r8
 8007a56:	bfa8      	it	ge
 8007a58:	2300      	movge	r3, #0
 8007a5a:	9312      	str	r3, [sp, #72]	@ 0x48
 8007a5c:	2400      	movs	r4, #0
 8007a5e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8007a62:	9316      	str	r3, [sp, #88]	@ 0x58
 8007a64:	46a0      	mov	r8, r4
 8007a66:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007a68:	9805      	ldr	r0, [sp, #20]
 8007a6a:	6859      	ldr	r1, [r3, #4]
 8007a6c:	f7ff f810 	bl	8006a90 <_Balloc>
 8007a70:	4681      	mov	r9, r0
 8007a72:	2800      	cmp	r0, #0
 8007a74:	f43f aef7 	beq.w	8007866 <_strtod_l+0x446>
 8007a78:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007a7a:	691a      	ldr	r2, [r3, #16]
 8007a7c:	3202      	adds	r2, #2
 8007a7e:	f103 010c 	add.w	r1, r3, #12
 8007a82:	0092      	lsls	r2, r2, #2
 8007a84:	300c      	adds	r0, #12
 8007a86:	f000 fd71 	bl	800856c <memcpy>
 8007a8a:	ec4b ab10 	vmov	d0, sl, fp
 8007a8e:	9805      	ldr	r0, [sp, #20]
 8007a90:	aa1c      	add	r2, sp, #112	@ 0x70
 8007a92:	a91b      	add	r1, sp, #108	@ 0x6c
 8007a94:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8007a98:	f7ff fbd6 	bl	8007248 <__d2b>
 8007a9c:	901a      	str	r0, [sp, #104]	@ 0x68
 8007a9e:	2800      	cmp	r0, #0
 8007aa0:	f43f aee1 	beq.w	8007866 <_strtod_l+0x446>
 8007aa4:	9805      	ldr	r0, [sp, #20]
 8007aa6:	2101      	movs	r1, #1
 8007aa8:	f7ff f930 	bl	8006d0c <__i2b>
 8007aac:	4680      	mov	r8, r0
 8007aae:	b948      	cbnz	r0, 8007ac4 <_strtod_l+0x6a4>
 8007ab0:	f04f 0800 	mov.w	r8, #0
 8007ab4:	e6d7      	b.n	8007866 <_strtod_l+0x446>
 8007ab6:	f04f 32ff 	mov.w	r2, #4294967295
 8007aba:	fa02 f303 	lsl.w	r3, r2, r3
 8007abe:	ea03 0a0a 	and.w	sl, r3, sl
 8007ac2:	e7af      	b.n	8007a24 <_strtod_l+0x604>
 8007ac4:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8007ac6:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8007ac8:	2d00      	cmp	r5, #0
 8007aca:	bfab      	itete	ge
 8007acc:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8007ace:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8007ad0:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8007ad2:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8007ad4:	bfac      	ite	ge
 8007ad6:	18ef      	addge	r7, r5, r3
 8007ad8:	1b5e      	sublt	r6, r3, r5
 8007ada:	9b08      	ldr	r3, [sp, #32]
 8007adc:	1aed      	subs	r5, r5, r3
 8007ade:	4415      	add	r5, r2
 8007ae0:	4b65      	ldr	r3, [pc, #404]	@ (8007c78 <_strtod_l+0x858>)
 8007ae2:	3d01      	subs	r5, #1
 8007ae4:	429d      	cmp	r5, r3
 8007ae6:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8007aea:	da50      	bge.n	8007b8e <_strtod_l+0x76e>
 8007aec:	1b5b      	subs	r3, r3, r5
 8007aee:	2b1f      	cmp	r3, #31
 8007af0:	eba2 0203 	sub.w	r2, r2, r3
 8007af4:	f04f 0101 	mov.w	r1, #1
 8007af8:	dc3d      	bgt.n	8007b76 <_strtod_l+0x756>
 8007afa:	fa01 f303 	lsl.w	r3, r1, r3
 8007afe:	9313      	str	r3, [sp, #76]	@ 0x4c
 8007b00:	2300      	movs	r3, #0
 8007b02:	9310      	str	r3, [sp, #64]	@ 0x40
 8007b04:	18bd      	adds	r5, r7, r2
 8007b06:	9b08      	ldr	r3, [sp, #32]
 8007b08:	42af      	cmp	r7, r5
 8007b0a:	4416      	add	r6, r2
 8007b0c:	441e      	add	r6, r3
 8007b0e:	463b      	mov	r3, r7
 8007b10:	bfa8      	it	ge
 8007b12:	462b      	movge	r3, r5
 8007b14:	42b3      	cmp	r3, r6
 8007b16:	bfa8      	it	ge
 8007b18:	4633      	movge	r3, r6
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	bfc2      	ittt	gt
 8007b1e:	1aed      	subgt	r5, r5, r3
 8007b20:	1af6      	subgt	r6, r6, r3
 8007b22:	1aff      	subgt	r7, r7, r3
 8007b24:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	dd16      	ble.n	8007b58 <_strtod_l+0x738>
 8007b2a:	4641      	mov	r1, r8
 8007b2c:	9805      	ldr	r0, [sp, #20]
 8007b2e:	461a      	mov	r2, r3
 8007b30:	f7ff f9a4 	bl	8006e7c <__pow5mult>
 8007b34:	4680      	mov	r8, r0
 8007b36:	2800      	cmp	r0, #0
 8007b38:	d0ba      	beq.n	8007ab0 <_strtod_l+0x690>
 8007b3a:	4601      	mov	r1, r0
 8007b3c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8007b3e:	9805      	ldr	r0, [sp, #20]
 8007b40:	f7ff f8fa 	bl	8006d38 <__multiply>
 8007b44:	900a      	str	r0, [sp, #40]	@ 0x28
 8007b46:	2800      	cmp	r0, #0
 8007b48:	f43f ae8d 	beq.w	8007866 <_strtod_l+0x446>
 8007b4c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007b4e:	9805      	ldr	r0, [sp, #20]
 8007b50:	f7fe ffde 	bl	8006b10 <_Bfree>
 8007b54:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007b56:	931a      	str	r3, [sp, #104]	@ 0x68
 8007b58:	2d00      	cmp	r5, #0
 8007b5a:	dc1d      	bgt.n	8007b98 <_strtod_l+0x778>
 8007b5c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	dd23      	ble.n	8007baa <_strtod_l+0x78a>
 8007b62:	4649      	mov	r1, r9
 8007b64:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8007b66:	9805      	ldr	r0, [sp, #20]
 8007b68:	f7ff f988 	bl	8006e7c <__pow5mult>
 8007b6c:	4681      	mov	r9, r0
 8007b6e:	b9e0      	cbnz	r0, 8007baa <_strtod_l+0x78a>
 8007b70:	f04f 0900 	mov.w	r9, #0
 8007b74:	e677      	b.n	8007866 <_strtod_l+0x446>
 8007b76:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8007b7a:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8007b7e:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8007b82:	35e2      	adds	r5, #226	@ 0xe2
 8007b84:	fa01 f305 	lsl.w	r3, r1, r5
 8007b88:	9310      	str	r3, [sp, #64]	@ 0x40
 8007b8a:	9113      	str	r1, [sp, #76]	@ 0x4c
 8007b8c:	e7ba      	b.n	8007b04 <_strtod_l+0x6e4>
 8007b8e:	2300      	movs	r3, #0
 8007b90:	9310      	str	r3, [sp, #64]	@ 0x40
 8007b92:	2301      	movs	r3, #1
 8007b94:	9313      	str	r3, [sp, #76]	@ 0x4c
 8007b96:	e7b5      	b.n	8007b04 <_strtod_l+0x6e4>
 8007b98:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007b9a:	9805      	ldr	r0, [sp, #20]
 8007b9c:	462a      	mov	r2, r5
 8007b9e:	f7ff f9c7 	bl	8006f30 <__lshift>
 8007ba2:	901a      	str	r0, [sp, #104]	@ 0x68
 8007ba4:	2800      	cmp	r0, #0
 8007ba6:	d1d9      	bne.n	8007b5c <_strtod_l+0x73c>
 8007ba8:	e65d      	b.n	8007866 <_strtod_l+0x446>
 8007baa:	2e00      	cmp	r6, #0
 8007bac:	dd07      	ble.n	8007bbe <_strtod_l+0x79e>
 8007bae:	4649      	mov	r1, r9
 8007bb0:	9805      	ldr	r0, [sp, #20]
 8007bb2:	4632      	mov	r2, r6
 8007bb4:	f7ff f9bc 	bl	8006f30 <__lshift>
 8007bb8:	4681      	mov	r9, r0
 8007bba:	2800      	cmp	r0, #0
 8007bbc:	d0d8      	beq.n	8007b70 <_strtod_l+0x750>
 8007bbe:	2f00      	cmp	r7, #0
 8007bc0:	dd08      	ble.n	8007bd4 <_strtod_l+0x7b4>
 8007bc2:	4641      	mov	r1, r8
 8007bc4:	9805      	ldr	r0, [sp, #20]
 8007bc6:	463a      	mov	r2, r7
 8007bc8:	f7ff f9b2 	bl	8006f30 <__lshift>
 8007bcc:	4680      	mov	r8, r0
 8007bce:	2800      	cmp	r0, #0
 8007bd0:	f43f ae49 	beq.w	8007866 <_strtod_l+0x446>
 8007bd4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007bd6:	9805      	ldr	r0, [sp, #20]
 8007bd8:	464a      	mov	r2, r9
 8007bda:	f7ff fa31 	bl	8007040 <__mdiff>
 8007bde:	4604      	mov	r4, r0
 8007be0:	2800      	cmp	r0, #0
 8007be2:	f43f ae40 	beq.w	8007866 <_strtod_l+0x446>
 8007be6:	68c3      	ldr	r3, [r0, #12]
 8007be8:	930f      	str	r3, [sp, #60]	@ 0x3c
 8007bea:	2300      	movs	r3, #0
 8007bec:	60c3      	str	r3, [r0, #12]
 8007bee:	4641      	mov	r1, r8
 8007bf0:	f7ff fa0a 	bl	8007008 <__mcmp>
 8007bf4:	2800      	cmp	r0, #0
 8007bf6:	da45      	bge.n	8007c84 <_strtod_l+0x864>
 8007bf8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007bfa:	ea53 030a 	orrs.w	r3, r3, sl
 8007bfe:	d16b      	bne.n	8007cd8 <_strtod_l+0x8b8>
 8007c00:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007c04:	2b00      	cmp	r3, #0
 8007c06:	d167      	bne.n	8007cd8 <_strtod_l+0x8b8>
 8007c08:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8007c0c:	0d1b      	lsrs	r3, r3, #20
 8007c0e:	051b      	lsls	r3, r3, #20
 8007c10:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8007c14:	d960      	bls.n	8007cd8 <_strtod_l+0x8b8>
 8007c16:	6963      	ldr	r3, [r4, #20]
 8007c18:	b913      	cbnz	r3, 8007c20 <_strtod_l+0x800>
 8007c1a:	6923      	ldr	r3, [r4, #16]
 8007c1c:	2b01      	cmp	r3, #1
 8007c1e:	dd5b      	ble.n	8007cd8 <_strtod_l+0x8b8>
 8007c20:	4621      	mov	r1, r4
 8007c22:	2201      	movs	r2, #1
 8007c24:	9805      	ldr	r0, [sp, #20]
 8007c26:	f7ff f983 	bl	8006f30 <__lshift>
 8007c2a:	4641      	mov	r1, r8
 8007c2c:	4604      	mov	r4, r0
 8007c2e:	f7ff f9eb 	bl	8007008 <__mcmp>
 8007c32:	2800      	cmp	r0, #0
 8007c34:	dd50      	ble.n	8007cd8 <_strtod_l+0x8b8>
 8007c36:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8007c3a:	9a08      	ldr	r2, [sp, #32]
 8007c3c:	0d1b      	lsrs	r3, r3, #20
 8007c3e:	051b      	lsls	r3, r3, #20
 8007c40:	2a00      	cmp	r2, #0
 8007c42:	d06a      	beq.n	8007d1a <_strtod_l+0x8fa>
 8007c44:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8007c48:	d867      	bhi.n	8007d1a <_strtod_l+0x8fa>
 8007c4a:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8007c4e:	f67f ae9d 	bls.w	800798c <_strtod_l+0x56c>
 8007c52:	4b0a      	ldr	r3, [pc, #40]	@ (8007c7c <_strtod_l+0x85c>)
 8007c54:	4650      	mov	r0, sl
 8007c56:	4659      	mov	r1, fp
 8007c58:	2200      	movs	r2, #0
 8007c5a:	f7f8 fcd5 	bl	8000608 <__aeabi_dmul>
 8007c5e:	4b08      	ldr	r3, [pc, #32]	@ (8007c80 <_strtod_l+0x860>)
 8007c60:	400b      	ands	r3, r1
 8007c62:	4682      	mov	sl, r0
 8007c64:	468b      	mov	fp, r1
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	f47f ae08 	bne.w	800787c <_strtod_l+0x45c>
 8007c6c:	9a05      	ldr	r2, [sp, #20]
 8007c6e:	2322      	movs	r3, #34	@ 0x22
 8007c70:	6013      	str	r3, [r2, #0]
 8007c72:	e603      	b.n	800787c <_strtod_l+0x45c>
 8007c74:	08009bc0 	.word	0x08009bc0
 8007c78:	fffffc02 	.word	0xfffffc02
 8007c7c:	39500000 	.word	0x39500000
 8007c80:	7ff00000 	.word	0x7ff00000
 8007c84:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 8007c88:	d165      	bne.n	8007d56 <_strtod_l+0x936>
 8007c8a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8007c8c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8007c90:	b35a      	cbz	r2, 8007cea <_strtod_l+0x8ca>
 8007c92:	4a9f      	ldr	r2, [pc, #636]	@ (8007f10 <_strtod_l+0xaf0>)
 8007c94:	4293      	cmp	r3, r2
 8007c96:	d12b      	bne.n	8007cf0 <_strtod_l+0x8d0>
 8007c98:	9b08      	ldr	r3, [sp, #32]
 8007c9a:	4651      	mov	r1, sl
 8007c9c:	b303      	cbz	r3, 8007ce0 <_strtod_l+0x8c0>
 8007c9e:	4b9d      	ldr	r3, [pc, #628]	@ (8007f14 <_strtod_l+0xaf4>)
 8007ca0:	465a      	mov	r2, fp
 8007ca2:	4013      	ands	r3, r2
 8007ca4:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8007ca8:	f04f 32ff 	mov.w	r2, #4294967295
 8007cac:	d81b      	bhi.n	8007ce6 <_strtod_l+0x8c6>
 8007cae:	0d1b      	lsrs	r3, r3, #20
 8007cb0:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8007cb4:	fa02 f303 	lsl.w	r3, r2, r3
 8007cb8:	4299      	cmp	r1, r3
 8007cba:	d119      	bne.n	8007cf0 <_strtod_l+0x8d0>
 8007cbc:	4b96      	ldr	r3, [pc, #600]	@ (8007f18 <_strtod_l+0xaf8>)
 8007cbe:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007cc0:	429a      	cmp	r2, r3
 8007cc2:	d102      	bne.n	8007cca <_strtod_l+0x8aa>
 8007cc4:	3101      	adds	r1, #1
 8007cc6:	f43f adce 	beq.w	8007866 <_strtod_l+0x446>
 8007cca:	4b92      	ldr	r3, [pc, #584]	@ (8007f14 <_strtod_l+0xaf4>)
 8007ccc:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007cce:	401a      	ands	r2, r3
 8007cd0:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8007cd4:	f04f 0a00 	mov.w	sl, #0
 8007cd8:	9b08      	ldr	r3, [sp, #32]
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d1b9      	bne.n	8007c52 <_strtod_l+0x832>
 8007cde:	e5cd      	b.n	800787c <_strtod_l+0x45c>
 8007ce0:	f04f 33ff 	mov.w	r3, #4294967295
 8007ce4:	e7e8      	b.n	8007cb8 <_strtod_l+0x898>
 8007ce6:	4613      	mov	r3, r2
 8007ce8:	e7e6      	b.n	8007cb8 <_strtod_l+0x898>
 8007cea:	ea53 030a 	orrs.w	r3, r3, sl
 8007cee:	d0a2      	beq.n	8007c36 <_strtod_l+0x816>
 8007cf0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8007cf2:	b1db      	cbz	r3, 8007d2c <_strtod_l+0x90c>
 8007cf4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007cf6:	4213      	tst	r3, r2
 8007cf8:	d0ee      	beq.n	8007cd8 <_strtod_l+0x8b8>
 8007cfa:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007cfc:	9a08      	ldr	r2, [sp, #32]
 8007cfe:	4650      	mov	r0, sl
 8007d00:	4659      	mov	r1, fp
 8007d02:	b1bb      	cbz	r3, 8007d34 <_strtod_l+0x914>
 8007d04:	f7ff fb6e 	bl	80073e4 <sulp>
 8007d08:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007d0c:	ec53 2b10 	vmov	r2, r3, d0
 8007d10:	f7f8 fac4 	bl	800029c <__adddf3>
 8007d14:	4682      	mov	sl, r0
 8007d16:	468b      	mov	fp, r1
 8007d18:	e7de      	b.n	8007cd8 <_strtod_l+0x8b8>
 8007d1a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8007d1e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8007d22:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8007d26:	f04f 3aff 	mov.w	sl, #4294967295
 8007d2a:	e7d5      	b.n	8007cd8 <_strtod_l+0x8b8>
 8007d2c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8007d2e:	ea13 0f0a 	tst.w	r3, sl
 8007d32:	e7e1      	b.n	8007cf8 <_strtod_l+0x8d8>
 8007d34:	f7ff fb56 	bl	80073e4 <sulp>
 8007d38:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007d3c:	ec53 2b10 	vmov	r2, r3, d0
 8007d40:	f7f8 faaa 	bl	8000298 <__aeabi_dsub>
 8007d44:	2200      	movs	r2, #0
 8007d46:	2300      	movs	r3, #0
 8007d48:	4682      	mov	sl, r0
 8007d4a:	468b      	mov	fp, r1
 8007d4c:	f7f8 fec4 	bl	8000ad8 <__aeabi_dcmpeq>
 8007d50:	2800      	cmp	r0, #0
 8007d52:	d0c1      	beq.n	8007cd8 <_strtod_l+0x8b8>
 8007d54:	e61a      	b.n	800798c <_strtod_l+0x56c>
 8007d56:	4641      	mov	r1, r8
 8007d58:	4620      	mov	r0, r4
 8007d5a:	f7ff facd 	bl	80072f8 <__ratio>
 8007d5e:	ec57 6b10 	vmov	r6, r7, d0
 8007d62:	2200      	movs	r2, #0
 8007d64:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8007d68:	4630      	mov	r0, r6
 8007d6a:	4639      	mov	r1, r7
 8007d6c:	f7f8 fec8 	bl	8000b00 <__aeabi_dcmple>
 8007d70:	2800      	cmp	r0, #0
 8007d72:	d06f      	beq.n	8007e54 <_strtod_l+0xa34>
 8007d74:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007d76:	2b00      	cmp	r3, #0
 8007d78:	d17a      	bne.n	8007e70 <_strtod_l+0xa50>
 8007d7a:	f1ba 0f00 	cmp.w	sl, #0
 8007d7e:	d158      	bne.n	8007e32 <_strtod_l+0xa12>
 8007d80:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007d82:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d15a      	bne.n	8007e40 <_strtod_l+0xa20>
 8007d8a:	4b64      	ldr	r3, [pc, #400]	@ (8007f1c <_strtod_l+0xafc>)
 8007d8c:	2200      	movs	r2, #0
 8007d8e:	4630      	mov	r0, r6
 8007d90:	4639      	mov	r1, r7
 8007d92:	f7f8 feab 	bl	8000aec <__aeabi_dcmplt>
 8007d96:	2800      	cmp	r0, #0
 8007d98:	d159      	bne.n	8007e4e <_strtod_l+0xa2e>
 8007d9a:	4630      	mov	r0, r6
 8007d9c:	4639      	mov	r1, r7
 8007d9e:	4b60      	ldr	r3, [pc, #384]	@ (8007f20 <_strtod_l+0xb00>)
 8007da0:	2200      	movs	r2, #0
 8007da2:	f7f8 fc31 	bl	8000608 <__aeabi_dmul>
 8007da6:	4606      	mov	r6, r0
 8007da8:	460f      	mov	r7, r1
 8007daa:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8007dae:	9606      	str	r6, [sp, #24]
 8007db0:	9307      	str	r3, [sp, #28]
 8007db2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007db6:	4d57      	ldr	r5, [pc, #348]	@ (8007f14 <_strtod_l+0xaf4>)
 8007db8:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8007dbc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007dbe:	401d      	ands	r5, r3
 8007dc0:	4b58      	ldr	r3, [pc, #352]	@ (8007f24 <_strtod_l+0xb04>)
 8007dc2:	429d      	cmp	r5, r3
 8007dc4:	f040 80b2 	bne.w	8007f2c <_strtod_l+0xb0c>
 8007dc8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007dca:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8007dce:	ec4b ab10 	vmov	d0, sl, fp
 8007dd2:	f7ff f9c9 	bl	8007168 <__ulp>
 8007dd6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007dda:	ec51 0b10 	vmov	r0, r1, d0
 8007dde:	f7f8 fc13 	bl	8000608 <__aeabi_dmul>
 8007de2:	4652      	mov	r2, sl
 8007de4:	465b      	mov	r3, fp
 8007de6:	f7f8 fa59 	bl	800029c <__adddf3>
 8007dea:	460b      	mov	r3, r1
 8007dec:	4949      	ldr	r1, [pc, #292]	@ (8007f14 <_strtod_l+0xaf4>)
 8007dee:	4a4e      	ldr	r2, [pc, #312]	@ (8007f28 <_strtod_l+0xb08>)
 8007df0:	4019      	ands	r1, r3
 8007df2:	4291      	cmp	r1, r2
 8007df4:	4682      	mov	sl, r0
 8007df6:	d942      	bls.n	8007e7e <_strtod_l+0xa5e>
 8007df8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8007dfa:	4b47      	ldr	r3, [pc, #284]	@ (8007f18 <_strtod_l+0xaf8>)
 8007dfc:	429a      	cmp	r2, r3
 8007dfe:	d103      	bne.n	8007e08 <_strtod_l+0x9e8>
 8007e00:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007e02:	3301      	adds	r3, #1
 8007e04:	f43f ad2f 	beq.w	8007866 <_strtod_l+0x446>
 8007e08:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8007f18 <_strtod_l+0xaf8>
 8007e0c:	f04f 3aff 	mov.w	sl, #4294967295
 8007e10:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007e12:	9805      	ldr	r0, [sp, #20]
 8007e14:	f7fe fe7c 	bl	8006b10 <_Bfree>
 8007e18:	9805      	ldr	r0, [sp, #20]
 8007e1a:	4649      	mov	r1, r9
 8007e1c:	f7fe fe78 	bl	8006b10 <_Bfree>
 8007e20:	9805      	ldr	r0, [sp, #20]
 8007e22:	4641      	mov	r1, r8
 8007e24:	f7fe fe74 	bl	8006b10 <_Bfree>
 8007e28:	9805      	ldr	r0, [sp, #20]
 8007e2a:	4621      	mov	r1, r4
 8007e2c:	f7fe fe70 	bl	8006b10 <_Bfree>
 8007e30:	e619      	b.n	8007a66 <_strtod_l+0x646>
 8007e32:	f1ba 0f01 	cmp.w	sl, #1
 8007e36:	d103      	bne.n	8007e40 <_strtod_l+0xa20>
 8007e38:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	f43f ada6 	beq.w	800798c <_strtod_l+0x56c>
 8007e40:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8007ef0 <_strtod_l+0xad0>
 8007e44:	4f35      	ldr	r7, [pc, #212]	@ (8007f1c <_strtod_l+0xafc>)
 8007e46:	ed8d 7b06 	vstr	d7, [sp, #24]
 8007e4a:	2600      	movs	r6, #0
 8007e4c:	e7b1      	b.n	8007db2 <_strtod_l+0x992>
 8007e4e:	4f34      	ldr	r7, [pc, #208]	@ (8007f20 <_strtod_l+0xb00>)
 8007e50:	2600      	movs	r6, #0
 8007e52:	e7aa      	b.n	8007daa <_strtod_l+0x98a>
 8007e54:	4b32      	ldr	r3, [pc, #200]	@ (8007f20 <_strtod_l+0xb00>)
 8007e56:	4630      	mov	r0, r6
 8007e58:	4639      	mov	r1, r7
 8007e5a:	2200      	movs	r2, #0
 8007e5c:	f7f8 fbd4 	bl	8000608 <__aeabi_dmul>
 8007e60:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007e62:	4606      	mov	r6, r0
 8007e64:	460f      	mov	r7, r1
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d09f      	beq.n	8007daa <_strtod_l+0x98a>
 8007e6a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8007e6e:	e7a0      	b.n	8007db2 <_strtod_l+0x992>
 8007e70:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8007ef8 <_strtod_l+0xad8>
 8007e74:	ed8d 7b06 	vstr	d7, [sp, #24]
 8007e78:	ec57 6b17 	vmov	r6, r7, d7
 8007e7c:	e799      	b.n	8007db2 <_strtod_l+0x992>
 8007e7e:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8007e82:	9b08      	ldr	r3, [sp, #32]
 8007e84:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	d1c1      	bne.n	8007e10 <_strtod_l+0x9f0>
 8007e8c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8007e90:	0d1b      	lsrs	r3, r3, #20
 8007e92:	051b      	lsls	r3, r3, #20
 8007e94:	429d      	cmp	r5, r3
 8007e96:	d1bb      	bne.n	8007e10 <_strtod_l+0x9f0>
 8007e98:	4630      	mov	r0, r6
 8007e9a:	4639      	mov	r1, r7
 8007e9c:	f7f8 ff14 	bl	8000cc8 <__aeabi_d2lz>
 8007ea0:	f7f8 fb84 	bl	80005ac <__aeabi_l2d>
 8007ea4:	4602      	mov	r2, r0
 8007ea6:	460b      	mov	r3, r1
 8007ea8:	4630      	mov	r0, r6
 8007eaa:	4639      	mov	r1, r7
 8007eac:	f7f8 f9f4 	bl	8000298 <__aeabi_dsub>
 8007eb0:	460b      	mov	r3, r1
 8007eb2:	4602      	mov	r2, r0
 8007eb4:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8007eb8:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8007ebc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007ebe:	ea46 060a 	orr.w	r6, r6, sl
 8007ec2:	431e      	orrs	r6, r3
 8007ec4:	d06f      	beq.n	8007fa6 <_strtod_l+0xb86>
 8007ec6:	a30e      	add	r3, pc, #56	@ (adr r3, 8007f00 <_strtod_l+0xae0>)
 8007ec8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ecc:	f7f8 fe0e 	bl	8000aec <__aeabi_dcmplt>
 8007ed0:	2800      	cmp	r0, #0
 8007ed2:	f47f acd3 	bne.w	800787c <_strtod_l+0x45c>
 8007ed6:	a30c      	add	r3, pc, #48	@ (adr r3, 8007f08 <_strtod_l+0xae8>)
 8007ed8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007edc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007ee0:	f7f8 fe22 	bl	8000b28 <__aeabi_dcmpgt>
 8007ee4:	2800      	cmp	r0, #0
 8007ee6:	d093      	beq.n	8007e10 <_strtod_l+0x9f0>
 8007ee8:	e4c8      	b.n	800787c <_strtod_l+0x45c>
 8007eea:	bf00      	nop
 8007eec:	f3af 8000 	nop.w
 8007ef0:	00000000 	.word	0x00000000
 8007ef4:	bff00000 	.word	0xbff00000
 8007ef8:	00000000 	.word	0x00000000
 8007efc:	3ff00000 	.word	0x3ff00000
 8007f00:	94a03595 	.word	0x94a03595
 8007f04:	3fdfffff 	.word	0x3fdfffff
 8007f08:	35afe535 	.word	0x35afe535
 8007f0c:	3fe00000 	.word	0x3fe00000
 8007f10:	000fffff 	.word	0x000fffff
 8007f14:	7ff00000 	.word	0x7ff00000
 8007f18:	7fefffff 	.word	0x7fefffff
 8007f1c:	3ff00000 	.word	0x3ff00000
 8007f20:	3fe00000 	.word	0x3fe00000
 8007f24:	7fe00000 	.word	0x7fe00000
 8007f28:	7c9fffff 	.word	0x7c9fffff
 8007f2c:	9b08      	ldr	r3, [sp, #32]
 8007f2e:	b323      	cbz	r3, 8007f7a <_strtod_l+0xb5a>
 8007f30:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8007f34:	d821      	bhi.n	8007f7a <_strtod_l+0xb5a>
 8007f36:	a328      	add	r3, pc, #160	@ (adr r3, 8007fd8 <_strtod_l+0xbb8>)
 8007f38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f3c:	4630      	mov	r0, r6
 8007f3e:	4639      	mov	r1, r7
 8007f40:	f7f8 fdde 	bl	8000b00 <__aeabi_dcmple>
 8007f44:	b1a0      	cbz	r0, 8007f70 <_strtod_l+0xb50>
 8007f46:	4639      	mov	r1, r7
 8007f48:	4630      	mov	r0, r6
 8007f4a:	f7f8 fe35 	bl	8000bb8 <__aeabi_d2uiz>
 8007f4e:	2801      	cmp	r0, #1
 8007f50:	bf38      	it	cc
 8007f52:	2001      	movcc	r0, #1
 8007f54:	f7f8 fade 	bl	8000514 <__aeabi_ui2d>
 8007f58:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007f5a:	4606      	mov	r6, r0
 8007f5c:	460f      	mov	r7, r1
 8007f5e:	b9fb      	cbnz	r3, 8007fa0 <_strtod_l+0xb80>
 8007f60:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8007f64:	9014      	str	r0, [sp, #80]	@ 0x50
 8007f66:	9315      	str	r3, [sp, #84]	@ 0x54
 8007f68:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8007f6c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8007f70:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8007f72:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8007f76:	1b5b      	subs	r3, r3, r5
 8007f78:	9311      	str	r3, [sp, #68]	@ 0x44
 8007f7a:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8007f7e:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8007f82:	f7ff f8f1 	bl	8007168 <__ulp>
 8007f86:	4650      	mov	r0, sl
 8007f88:	ec53 2b10 	vmov	r2, r3, d0
 8007f8c:	4659      	mov	r1, fp
 8007f8e:	f7f8 fb3b 	bl	8000608 <__aeabi_dmul>
 8007f92:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8007f96:	f7f8 f981 	bl	800029c <__adddf3>
 8007f9a:	4682      	mov	sl, r0
 8007f9c:	468b      	mov	fp, r1
 8007f9e:	e770      	b.n	8007e82 <_strtod_l+0xa62>
 8007fa0:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8007fa4:	e7e0      	b.n	8007f68 <_strtod_l+0xb48>
 8007fa6:	a30e      	add	r3, pc, #56	@ (adr r3, 8007fe0 <_strtod_l+0xbc0>)
 8007fa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007fac:	f7f8 fd9e 	bl	8000aec <__aeabi_dcmplt>
 8007fb0:	e798      	b.n	8007ee4 <_strtod_l+0xac4>
 8007fb2:	2300      	movs	r3, #0
 8007fb4:	930e      	str	r3, [sp, #56]	@ 0x38
 8007fb6:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8007fb8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007fba:	6013      	str	r3, [r2, #0]
 8007fbc:	f7ff ba6d 	b.w	800749a <_strtod_l+0x7a>
 8007fc0:	2a65      	cmp	r2, #101	@ 0x65
 8007fc2:	f43f ab68 	beq.w	8007696 <_strtod_l+0x276>
 8007fc6:	2a45      	cmp	r2, #69	@ 0x45
 8007fc8:	f43f ab65 	beq.w	8007696 <_strtod_l+0x276>
 8007fcc:	2301      	movs	r3, #1
 8007fce:	f7ff bba0 	b.w	8007712 <_strtod_l+0x2f2>
 8007fd2:	bf00      	nop
 8007fd4:	f3af 8000 	nop.w
 8007fd8:	ffc00000 	.word	0xffc00000
 8007fdc:	41dfffff 	.word	0x41dfffff
 8007fe0:	94a03595 	.word	0x94a03595
 8007fe4:	3fcfffff 	.word	0x3fcfffff

08007fe8 <_strtod_r>:
 8007fe8:	4b01      	ldr	r3, [pc, #4]	@ (8007ff0 <_strtod_r+0x8>)
 8007fea:	f7ff ba19 	b.w	8007420 <_strtod_l>
 8007fee:	bf00      	nop
 8007ff0:	20000068 	.word	0x20000068

08007ff4 <_strtol_l.isra.0>:
 8007ff4:	2b24      	cmp	r3, #36	@ 0x24
 8007ff6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007ffa:	4686      	mov	lr, r0
 8007ffc:	4690      	mov	r8, r2
 8007ffe:	d801      	bhi.n	8008004 <_strtol_l.isra.0+0x10>
 8008000:	2b01      	cmp	r3, #1
 8008002:	d106      	bne.n	8008012 <_strtol_l.isra.0+0x1e>
 8008004:	f7fd fdb6 	bl	8005b74 <__errno>
 8008008:	2316      	movs	r3, #22
 800800a:	6003      	str	r3, [r0, #0]
 800800c:	2000      	movs	r0, #0
 800800e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008012:	4834      	ldr	r0, [pc, #208]	@ (80080e4 <_strtol_l.isra.0+0xf0>)
 8008014:	460d      	mov	r5, r1
 8008016:	462a      	mov	r2, r5
 8008018:	f815 4b01 	ldrb.w	r4, [r5], #1
 800801c:	5d06      	ldrb	r6, [r0, r4]
 800801e:	f016 0608 	ands.w	r6, r6, #8
 8008022:	d1f8      	bne.n	8008016 <_strtol_l.isra.0+0x22>
 8008024:	2c2d      	cmp	r4, #45	@ 0x2d
 8008026:	d110      	bne.n	800804a <_strtol_l.isra.0+0x56>
 8008028:	782c      	ldrb	r4, [r5, #0]
 800802a:	2601      	movs	r6, #1
 800802c:	1c95      	adds	r5, r2, #2
 800802e:	f033 0210 	bics.w	r2, r3, #16
 8008032:	d115      	bne.n	8008060 <_strtol_l.isra.0+0x6c>
 8008034:	2c30      	cmp	r4, #48	@ 0x30
 8008036:	d10d      	bne.n	8008054 <_strtol_l.isra.0+0x60>
 8008038:	782a      	ldrb	r2, [r5, #0]
 800803a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800803e:	2a58      	cmp	r2, #88	@ 0x58
 8008040:	d108      	bne.n	8008054 <_strtol_l.isra.0+0x60>
 8008042:	786c      	ldrb	r4, [r5, #1]
 8008044:	3502      	adds	r5, #2
 8008046:	2310      	movs	r3, #16
 8008048:	e00a      	b.n	8008060 <_strtol_l.isra.0+0x6c>
 800804a:	2c2b      	cmp	r4, #43	@ 0x2b
 800804c:	bf04      	itt	eq
 800804e:	782c      	ldrbeq	r4, [r5, #0]
 8008050:	1c95      	addeq	r5, r2, #2
 8008052:	e7ec      	b.n	800802e <_strtol_l.isra.0+0x3a>
 8008054:	2b00      	cmp	r3, #0
 8008056:	d1f6      	bne.n	8008046 <_strtol_l.isra.0+0x52>
 8008058:	2c30      	cmp	r4, #48	@ 0x30
 800805a:	bf14      	ite	ne
 800805c:	230a      	movne	r3, #10
 800805e:	2308      	moveq	r3, #8
 8008060:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8008064:	f10c 3cff 	add.w	ip, ip, #4294967295
 8008068:	2200      	movs	r2, #0
 800806a:	fbbc f9f3 	udiv	r9, ip, r3
 800806e:	4610      	mov	r0, r2
 8008070:	fb03 ca19 	mls	sl, r3, r9, ip
 8008074:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8008078:	2f09      	cmp	r7, #9
 800807a:	d80f      	bhi.n	800809c <_strtol_l.isra.0+0xa8>
 800807c:	463c      	mov	r4, r7
 800807e:	42a3      	cmp	r3, r4
 8008080:	dd1b      	ble.n	80080ba <_strtol_l.isra.0+0xc6>
 8008082:	1c57      	adds	r7, r2, #1
 8008084:	d007      	beq.n	8008096 <_strtol_l.isra.0+0xa2>
 8008086:	4581      	cmp	r9, r0
 8008088:	d314      	bcc.n	80080b4 <_strtol_l.isra.0+0xc0>
 800808a:	d101      	bne.n	8008090 <_strtol_l.isra.0+0x9c>
 800808c:	45a2      	cmp	sl, r4
 800808e:	db11      	blt.n	80080b4 <_strtol_l.isra.0+0xc0>
 8008090:	fb00 4003 	mla	r0, r0, r3, r4
 8008094:	2201      	movs	r2, #1
 8008096:	f815 4b01 	ldrb.w	r4, [r5], #1
 800809a:	e7eb      	b.n	8008074 <_strtol_l.isra.0+0x80>
 800809c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 80080a0:	2f19      	cmp	r7, #25
 80080a2:	d801      	bhi.n	80080a8 <_strtol_l.isra.0+0xb4>
 80080a4:	3c37      	subs	r4, #55	@ 0x37
 80080a6:	e7ea      	b.n	800807e <_strtol_l.isra.0+0x8a>
 80080a8:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 80080ac:	2f19      	cmp	r7, #25
 80080ae:	d804      	bhi.n	80080ba <_strtol_l.isra.0+0xc6>
 80080b0:	3c57      	subs	r4, #87	@ 0x57
 80080b2:	e7e4      	b.n	800807e <_strtol_l.isra.0+0x8a>
 80080b4:	f04f 32ff 	mov.w	r2, #4294967295
 80080b8:	e7ed      	b.n	8008096 <_strtol_l.isra.0+0xa2>
 80080ba:	1c53      	adds	r3, r2, #1
 80080bc:	d108      	bne.n	80080d0 <_strtol_l.isra.0+0xdc>
 80080be:	2322      	movs	r3, #34	@ 0x22
 80080c0:	f8ce 3000 	str.w	r3, [lr]
 80080c4:	4660      	mov	r0, ip
 80080c6:	f1b8 0f00 	cmp.w	r8, #0
 80080ca:	d0a0      	beq.n	800800e <_strtol_l.isra.0+0x1a>
 80080cc:	1e69      	subs	r1, r5, #1
 80080ce:	e006      	b.n	80080de <_strtol_l.isra.0+0xea>
 80080d0:	b106      	cbz	r6, 80080d4 <_strtol_l.isra.0+0xe0>
 80080d2:	4240      	negs	r0, r0
 80080d4:	f1b8 0f00 	cmp.w	r8, #0
 80080d8:	d099      	beq.n	800800e <_strtol_l.isra.0+0x1a>
 80080da:	2a00      	cmp	r2, #0
 80080dc:	d1f6      	bne.n	80080cc <_strtol_l.isra.0+0xd8>
 80080de:	f8c8 1000 	str.w	r1, [r8]
 80080e2:	e794      	b.n	800800e <_strtol_l.isra.0+0x1a>
 80080e4:	08009be9 	.word	0x08009be9

080080e8 <_strtol_r>:
 80080e8:	f7ff bf84 	b.w	8007ff4 <_strtol_l.isra.0>

080080ec <__ssputs_r>:
 80080ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80080f0:	688e      	ldr	r6, [r1, #8]
 80080f2:	461f      	mov	r7, r3
 80080f4:	42be      	cmp	r6, r7
 80080f6:	680b      	ldr	r3, [r1, #0]
 80080f8:	4682      	mov	sl, r0
 80080fa:	460c      	mov	r4, r1
 80080fc:	4690      	mov	r8, r2
 80080fe:	d82d      	bhi.n	800815c <__ssputs_r+0x70>
 8008100:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008104:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8008108:	d026      	beq.n	8008158 <__ssputs_r+0x6c>
 800810a:	6965      	ldr	r5, [r4, #20]
 800810c:	6909      	ldr	r1, [r1, #16]
 800810e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008112:	eba3 0901 	sub.w	r9, r3, r1
 8008116:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800811a:	1c7b      	adds	r3, r7, #1
 800811c:	444b      	add	r3, r9
 800811e:	106d      	asrs	r5, r5, #1
 8008120:	429d      	cmp	r5, r3
 8008122:	bf38      	it	cc
 8008124:	461d      	movcc	r5, r3
 8008126:	0553      	lsls	r3, r2, #21
 8008128:	d527      	bpl.n	800817a <__ssputs_r+0x8e>
 800812a:	4629      	mov	r1, r5
 800812c:	f7fe fc24 	bl	8006978 <_malloc_r>
 8008130:	4606      	mov	r6, r0
 8008132:	b360      	cbz	r0, 800818e <__ssputs_r+0xa2>
 8008134:	6921      	ldr	r1, [r4, #16]
 8008136:	464a      	mov	r2, r9
 8008138:	f000 fa18 	bl	800856c <memcpy>
 800813c:	89a3      	ldrh	r3, [r4, #12]
 800813e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8008142:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008146:	81a3      	strh	r3, [r4, #12]
 8008148:	6126      	str	r6, [r4, #16]
 800814a:	6165      	str	r5, [r4, #20]
 800814c:	444e      	add	r6, r9
 800814e:	eba5 0509 	sub.w	r5, r5, r9
 8008152:	6026      	str	r6, [r4, #0]
 8008154:	60a5      	str	r5, [r4, #8]
 8008156:	463e      	mov	r6, r7
 8008158:	42be      	cmp	r6, r7
 800815a:	d900      	bls.n	800815e <__ssputs_r+0x72>
 800815c:	463e      	mov	r6, r7
 800815e:	6820      	ldr	r0, [r4, #0]
 8008160:	4632      	mov	r2, r6
 8008162:	4641      	mov	r1, r8
 8008164:	f000 f9c6 	bl	80084f4 <memmove>
 8008168:	68a3      	ldr	r3, [r4, #8]
 800816a:	1b9b      	subs	r3, r3, r6
 800816c:	60a3      	str	r3, [r4, #8]
 800816e:	6823      	ldr	r3, [r4, #0]
 8008170:	4433      	add	r3, r6
 8008172:	6023      	str	r3, [r4, #0]
 8008174:	2000      	movs	r0, #0
 8008176:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800817a:	462a      	mov	r2, r5
 800817c:	f000 fd89 	bl	8008c92 <_realloc_r>
 8008180:	4606      	mov	r6, r0
 8008182:	2800      	cmp	r0, #0
 8008184:	d1e0      	bne.n	8008148 <__ssputs_r+0x5c>
 8008186:	6921      	ldr	r1, [r4, #16]
 8008188:	4650      	mov	r0, sl
 800818a:	f7fe fb81 	bl	8006890 <_free_r>
 800818e:	230c      	movs	r3, #12
 8008190:	f8ca 3000 	str.w	r3, [sl]
 8008194:	89a3      	ldrh	r3, [r4, #12]
 8008196:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800819a:	81a3      	strh	r3, [r4, #12]
 800819c:	f04f 30ff 	mov.w	r0, #4294967295
 80081a0:	e7e9      	b.n	8008176 <__ssputs_r+0x8a>
	...

080081a4 <_svfiprintf_r>:
 80081a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081a8:	4698      	mov	r8, r3
 80081aa:	898b      	ldrh	r3, [r1, #12]
 80081ac:	061b      	lsls	r3, r3, #24
 80081ae:	b09d      	sub	sp, #116	@ 0x74
 80081b0:	4607      	mov	r7, r0
 80081b2:	460d      	mov	r5, r1
 80081b4:	4614      	mov	r4, r2
 80081b6:	d510      	bpl.n	80081da <_svfiprintf_r+0x36>
 80081b8:	690b      	ldr	r3, [r1, #16]
 80081ba:	b973      	cbnz	r3, 80081da <_svfiprintf_r+0x36>
 80081bc:	2140      	movs	r1, #64	@ 0x40
 80081be:	f7fe fbdb 	bl	8006978 <_malloc_r>
 80081c2:	6028      	str	r0, [r5, #0]
 80081c4:	6128      	str	r0, [r5, #16]
 80081c6:	b930      	cbnz	r0, 80081d6 <_svfiprintf_r+0x32>
 80081c8:	230c      	movs	r3, #12
 80081ca:	603b      	str	r3, [r7, #0]
 80081cc:	f04f 30ff 	mov.w	r0, #4294967295
 80081d0:	b01d      	add	sp, #116	@ 0x74
 80081d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80081d6:	2340      	movs	r3, #64	@ 0x40
 80081d8:	616b      	str	r3, [r5, #20]
 80081da:	2300      	movs	r3, #0
 80081dc:	9309      	str	r3, [sp, #36]	@ 0x24
 80081de:	2320      	movs	r3, #32
 80081e0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80081e4:	f8cd 800c 	str.w	r8, [sp, #12]
 80081e8:	2330      	movs	r3, #48	@ 0x30
 80081ea:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8008388 <_svfiprintf_r+0x1e4>
 80081ee:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80081f2:	f04f 0901 	mov.w	r9, #1
 80081f6:	4623      	mov	r3, r4
 80081f8:	469a      	mov	sl, r3
 80081fa:	f813 2b01 	ldrb.w	r2, [r3], #1
 80081fe:	b10a      	cbz	r2, 8008204 <_svfiprintf_r+0x60>
 8008200:	2a25      	cmp	r2, #37	@ 0x25
 8008202:	d1f9      	bne.n	80081f8 <_svfiprintf_r+0x54>
 8008204:	ebba 0b04 	subs.w	fp, sl, r4
 8008208:	d00b      	beq.n	8008222 <_svfiprintf_r+0x7e>
 800820a:	465b      	mov	r3, fp
 800820c:	4622      	mov	r2, r4
 800820e:	4629      	mov	r1, r5
 8008210:	4638      	mov	r0, r7
 8008212:	f7ff ff6b 	bl	80080ec <__ssputs_r>
 8008216:	3001      	adds	r0, #1
 8008218:	f000 80a7 	beq.w	800836a <_svfiprintf_r+0x1c6>
 800821c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800821e:	445a      	add	r2, fp
 8008220:	9209      	str	r2, [sp, #36]	@ 0x24
 8008222:	f89a 3000 	ldrb.w	r3, [sl]
 8008226:	2b00      	cmp	r3, #0
 8008228:	f000 809f 	beq.w	800836a <_svfiprintf_r+0x1c6>
 800822c:	2300      	movs	r3, #0
 800822e:	f04f 32ff 	mov.w	r2, #4294967295
 8008232:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008236:	f10a 0a01 	add.w	sl, sl, #1
 800823a:	9304      	str	r3, [sp, #16]
 800823c:	9307      	str	r3, [sp, #28]
 800823e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008242:	931a      	str	r3, [sp, #104]	@ 0x68
 8008244:	4654      	mov	r4, sl
 8008246:	2205      	movs	r2, #5
 8008248:	f814 1b01 	ldrb.w	r1, [r4], #1
 800824c:	484e      	ldr	r0, [pc, #312]	@ (8008388 <_svfiprintf_r+0x1e4>)
 800824e:	f7f7 ffc7 	bl	80001e0 <memchr>
 8008252:	9a04      	ldr	r2, [sp, #16]
 8008254:	b9d8      	cbnz	r0, 800828e <_svfiprintf_r+0xea>
 8008256:	06d0      	lsls	r0, r2, #27
 8008258:	bf44      	itt	mi
 800825a:	2320      	movmi	r3, #32
 800825c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008260:	0711      	lsls	r1, r2, #28
 8008262:	bf44      	itt	mi
 8008264:	232b      	movmi	r3, #43	@ 0x2b
 8008266:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800826a:	f89a 3000 	ldrb.w	r3, [sl]
 800826e:	2b2a      	cmp	r3, #42	@ 0x2a
 8008270:	d015      	beq.n	800829e <_svfiprintf_r+0xfa>
 8008272:	9a07      	ldr	r2, [sp, #28]
 8008274:	4654      	mov	r4, sl
 8008276:	2000      	movs	r0, #0
 8008278:	f04f 0c0a 	mov.w	ip, #10
 800827c:	4621      	mov	r1, r4
 800827e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008282:	3b30      	subs	r3, #48	@ 0x30
 8008284:	2b09      	cmp	r3, #9
 8008286:	d94b      	bls.n	8008320 <_svfiprintf_r+0x17c>
 8008288:	b1b0      	cbz	r0, 80082b8 <_svfiprintf_r+0x114>
 800828a:	9207      	str	r2, [sp, #28]
 800828c:	e014      	b.n	80082b8 <_svfiprintf_r+0x114>
 800828e:	eba0 0308 	sub.w	r3, r0, r8
 8008292:	fa09 f303 	lsl.w	r3, r9, r3
 8008296:	4313      	orrs	r3, r2
 8008298:	9304      	str	r3, [sp, #16]
 800829a:	46a2      	mov	sl, r4
 800829c:	e7d2      	b.n	8008244 <_svfiprintf_r+0xa0>
 800829e:	9b03      	ldr	r3, [sp, #12]
 80082a0:	1d19      	adds	r1, r3, #4
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	9103      	str	r1, [sp, #12]
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	bfbb      	ittet	lt
 80082aa:	425b      	neglt	r3, r3
 80082ac:	f042 0202 	orrlt.w	r2, r2, #2
 80082b0:	9307      	strge	r3, [sp, #28]
 80082b2:	9307      	strlt	r3, [sp, #28]
 80082b4:	bfb8      	it	lt
 80082b6:	9204      	strlt	r2, [sp, #16]
 80082b8:	7823      	ldrb	r3, [r4, #0]
 80082ba:	2b2e      	cmp	r3, #46	@ 0x2e
 80082bc:	d10a      	bne.n	80082d4 <_svfiprintf_r+0x130>
 80082be:	7863      	ldrb	r3, [r4, #1]
 80082c0:	2b2a      	cmp	r3, #42	@ 0x2a
 80082c2:	d132      	bne.n	800832a <_svfiprintf_r+0x186>
 80082c4:	9b03      	ldr	r3, [sp, #12]
 80082c6:	1d1a      	adds	r2, r3, #4
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	9203      	str	r2, [sp, #12]
 80082cc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80082d0:	3402      	adds	r4, #2
 80082d2:	9305      	str	r3, [sp, #20]
 80082d4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8008398 <_svfiprintf_r+0x1f4>
 80082d8:	7821      	ldrb	r1, [r4, #0]
 80082da:	2203      	movs	r2, #3
 80082dc:	4650      	mov	r0, sl
 80082de:	f7f7 ff7f 	bl	80001e0 <memchr>
 80082e2:	b138      	cbz	r0, 80082f4 <_svfiprintf_r+0x150>
 80082e4:	9b04      	ldr	r3, [sp, #16]
 80082e6:	eba0 000a 	sub.w	r0, r0, sl
 80082ea:	2240      	movs	r2, #64	@ 0x40
 80082ec:	4082      	lsls	r2, r0
 80082ee:	4313      	orrs	r3, r2
 80082f0:	3401      	adds	r4, #1
 80082f2:	9304      	str	r3, [sp, #16]
 80082f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80082f8:	4824      	ldr	r0, [pc, #144]	@ (800838c <_svfiprintf_r+0x1e8>)
 80082fa:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80082fe:	2206      	movs	r2, #6
 8008300:	f7f7 ff6e 	bl	80001e0 <memchr>
 8008304:	2800      	cmp	r0, #0
 8008306:	d036      	beq.n	8008376 <_svfiprintf_r+0x1d2>
 8008308:	4b21      	ldr	r3, [pc, #132]	@ (8008390 <_svfiprintf_r+0x1ec>)
 800830a:	bb1b      	cbnz	r3, 8008354 <_svfiprintf_r+0x1b0>
 800830c:	9b03      	ldr	r3, [sp, #12]
 800830e:	3307      	adds	r3, #7
 8008310:	f023 0307 	bic.w	r3, r3, #7
 8008314:	3308      	adds	r3, #8
 8008316:	9303      	str	r3, [sp, #12]
 8008318:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800831a:	4433      	add	r3, r6
 800831c:	9309      	str	r3, [sp, #36]	@ 0x24
 800831e:	e76a      	b.n	80081f6 <_svfiprintf_r+0x52>
 8008320:	fb0c 3202 	mla	r2, ip, r2, r3
 8008324:	460c      	mov	r4, r1
 8008326:	2001      	movs	r0, #1
 8008328:	e7a8      	b.n	800827c <_svfiprintf_r+0xd8>
 800832a:	2300      	movs	r3, #0
 800832c:	3401      	adds	r4, #1
 800832e:	9305      	str	r3, [sp, #20]
 8008330:	4619      	mov	r1, r3
 8008332:	f04f 0c0a 	mov.w	ip, #10
 8008336:	4620      	mov	r0, r4
 8008338:	f810 2b01 	ldrb.w	r2, [r0], #1
 800833c:	3a30      	subs	r2, #48	@ 0x30
 800833e:	2a09      	cmp	r2, #9
 8008340:	d903      	bls.n	800834a <_svfiprintf_r+0x1a6>
 8008342:	2b00      	cmp	r3, #0
 8008344:	d0c6      	beq.n	80082d4 <_svfiprintf_r+0x130>
 8008346:	9105      	str	r1, [sp, #20]
 8008348:	e7c4      	b.n	80082d4 <_svfiprintf_r+0x130>
 800834a:	fb0c 2101 	mla	r1, ip, r1, r2
 800834e:	4604      	mov	r4, r0
 8008350:	2301      	movs	r3, #1
 8008352:	e7f0      	b.n	8008336 <_svfiprintf_r+0x192>
 8008354:	ab03      	add	r3, sp, #12
 8008356:	9300      	str	r3, [sp, #0]
 8008358:	462a      	mov	r2, r5
 800835a:	4b0e      	ldr	r3, [pc, #56]	@ (8008394 <_svfiprintf_r+0x1f0>)
 800835c:	a904      	add	r1, sp, #16
 800835e:	4638      	mov	r0, r7
 8008360:	f7fc fcca 	bl	8004cf8 <_printf_float>
 8008364:	1c42      	adds	r2, r0, #1
 8008366:	4606      	mov	r6, r0
 8008368:	d1d6      	bne.n	8008318 <_svfiprintf_r+0x174>
 800836a:	89ab      	ldrh	r3, [r5, #12]
 800836c:	065b      	lsls	r3, r3, #25
 800836e:	f53f af2d 	bmi.w	80081cc <_svfiprintf_r+0x28>
 8008372:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008374:	e72c      	b.n	80081d0 <_svfiprintf_r+0x2c>
 8008376:	ab03      	add	r3, sp, #12
 8008378:	9300      	str	r3, [sp, #0]
 800837a:	462a      	mov	r2, r5
 800837c:	4b05      	ldr	r3, [pc, #20]	@ (8008394 <_svfiprintf_r+0x1f0>)
 800837e:	a904      	add	r1, sp, #16
 8008380:	4638      	mov	r0, r7
 8008382:	f7fc ff51 	bl	8005228 <_printf_i>
 8008386:	e7ed      	b.n	8008364 <_svfiprintf_r+0x1c0>
 8008388:	080099e1 	.word	0x080099e1
 800838c:	080099eb 	.word	0x080099eb
 8008390:	08004cf9 	.word	0x08004cf9
 8008394:	080080ed 	.word	0x080080ed
 8008398:	080099e7 	.word	0x080099e7

0800839c <__sflush_r>:
 800839c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80083a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80083a4:	0716      	lsls	r6, r2, #28
 80083a6:	4605      	mov	r5, r0
 80083a8:	460c      	mov	r4, r1
 80083aa:	d454      	bmi.n	8008456 <__sflush_r+0xba>
 80083ac:	684b      	ldr	r3, [r1, #4]
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	dc02      	bgt.n	80083b8 <__sflush_r+0x1c>
 80083b2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	dd48      	ble.n	800844a <__sflush_r+0xae>
 80083b8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80083ba:	2e00      	cmp	r6, #0
 80083bc:	d045      	beq.n	800844a <__sflush_r+0xae>
 80083be:	2300      	movs	r3, #0
 80083c0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80083c4:	682f      	ldr	r7, [r5, #0]
 80083c6:	6a21      	ldr	r1, [r4, #32]
 80083c8:	602b      	str	r3, [r5, #0]
 80083ca:	d030      	beq.n	800842e <__sflush_r+0x92>
 80083cc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80083ce:	89a3      	ldrh	r3, [r4, #12]
 80083d0:	0759      	lsls	r1, r3, #29
 80083d2:	d505      	bpl.n	80083e0 <__sflush_r+0x44>
 80083d4:	6863      	ldr	r3, [r4, #4]
 80083d6:	1ad2      	subs	r2, r2, r3
 80083d8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80083da:	b10b      	cbz	r3, 80083e0 <__sflush_r+0x44>
 80083dc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80083de:	1ad2      	subs	r2, r2, r3
 80083e0:	2300      	movs	r3, #0
 80083e2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80083e4:	6a21      	ldr	r1, [r4, #32]
 80083e6:	4628      	mov	r0, r5
 80083e8:	47b0      	blx	r6
 80083ea:	1c43      	adds	r3, r0, #1
 80083ec:	89a3      	ldrh	r3, [r4, #12]
 80083ee:	d106      	bne.n	80083fe <__sflush_r+0x62>
 80083f0:	6829      	ldr	r1, [r5, #0]
 80083f2:	291d      	cmp	r1, #29
 80083f4:	d82b      	bhi.n	800844e <__sflush_r+0xb2>
 80083f6:	4a2a      	ldr	r2, [pc, #168]	@ (80084a0 <__sflush_r+0x104>)
 80083f8:	40ca      	lsrs	r2, r1
 80083fa:	07d6      	lsls	r6, r2, #31
 80083fc:	d527      	bpl.n	800844e <__sflush_r+0xb2>
 80083fe:	2200      	movs	r2, #0
 8008400:	6062      	str	r2, [r4, #4]
 8008402:	04d9      	lsls	r1, r3, #19
 8008404:	6922      	ldr	r2, [r4, #16]
 8008406:	6022      	str	r2, [r4, #0]
 8008408:	d504      	bpl.n	8008414 <__sflush_r+0x78>
 800840a:	1c42      	adds	r2, r0, #1
 800840c:	d101      	bne.n	8008412 <__sflush_r+0x76>
 800840e:	682b      	ldr	r3, [r5, #0]
 8008410:	b903      	cbnz	r3, 8008414 <__sflush_r+0x78>
 8008412:	6560      	str	r0, [r4, #84]	@ 0x54
 8008414:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008416:	602f      	str	r7, [r5, #0]
 8008418:	b1b9      	cbz	r1, 800844a <__sflush_r+0xae>
 800841a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800841e:	4299      	cmp	r1, r3
 8008420:	d002      	beq.n	8008428 <__sflush_r+0x8c>
 8008422:	4628      	mov	r0, r5
 8008424:	f7fe fa34 	bl	8006890 <_free_r>
 8008428:	2300      	movs	r3, #0
 800842a:	6363      	str	r3, [r4, #52]	@ 0x34
 800842c:	e00d      	b.n	800844a <__sflush_r+0xae>
 800842e:	2301      	movs	r3, #1
 8008430:	4628      	mov	r0, r5
 8008432:	47b0      	blx	r6
 8008434:	4602      	mov	r2, r0
 8008436:	1c50      	adds	r0, r2, #1
 8008438:	d1c9      	bne.n	80083ce <__sflush_r+0x32>
 800843a:	682b      	ldr	r3, [r5, #0]
 800843c:	2b00      	cmp	r3, #0
 800843e:	d0c6      	beq.n	80083ce <__sflush_r+0x32>
 8008440:	2b1d      	cmp	r3, #29
 8008442:	d001      	beq.n	8008448 <__sflush_r+0xac>
 8008444:	2b16      	cmp	r3, #22
 8008446:	d11e      	bne.n	8008486 <__sflush_r+0xea>
 8008448:	602f      	str	r7, [r5, #0]
 800844a:	2000      	movs	r0, #0
 800844c:	e022      	b.n	8008494 <__sflush_r+0xf8>
 800844e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008452:	b21b      	sxth	r3, r3
 8008454:	e01b      	b.n	800848e <__sflush_r+0xf2>
 8008456:	690f      	ldr	r7, [r1, #16]
 8008458:	2f00      	cmp	r7, #0
 800845a:	d0f6      	beq.n	800844a <__sflush_r+0xae>
 800845c:	0793      	lsls	r3, r2, #30
 800845e:	680e      	ldr	r6, [r1, #0]
 8008460:	bf08      	it	eq
 8008462:	694b      	ldreq	r3, [r1, #20]
 8008464:	600f      	str	r7, [r1, #0]
 8008466:	bf18      	it	ne
 8008468:	2300      	movne	r3, #0
 800846a:	eba6 0807 	sub.w	r8, r6, r7
 800846e:	608b      	str	r3, [r1, #8]
 8008470:	f1b8 0f00 	cmp.w	r8, #0
 8008474:	dde9      	ble.n	800844a <__sflush_r+0xae>
 8008476:	6a21      	ldr	r1, [r4, #32]
 8008478:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800847a:	4643      	mov	r3, r8
 800847c:	463a      	mov	r2, r7
 800847e:	4628      	mov	r0, r5
 8008480:	47b0      	blx	r6
 8008482:	2800      	cmp	r0, #0
 8008484:	dc08      	bgt.n	8008498 <__sflush_r+0xfc>
 8008486:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800848a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800848e:	81a3      	strh	r3, [r4, #12]
 8008490:	f04f 30ff 	mov.w	r0, #4294967295
 8008494:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008498:	4407      	add	r7, r0
 800849a:	eba8 0800 	sub.w	r8, r8, r0
 800849e:	e7e7      	b.n	8008470 <__sflush_r+0xd4>
 80084a0:	20400001 	.word	0x20400001

080084a4 <_fflush_r>:
 80084a4:	b538      	push	{r3, r4, r5, lr}
 80084a6:	690b      	ldr	r3, [r1, #16]
 80084a8:	4605      	mov	r5, r0
 80084aa:	460c      	mov	r4, r1
 80084ac:	b913      	cbnz	r3, 80084b4 <_fflush_r+0x10>
 80084ae:	2500      	movs	r5, #0
 80084b0:	4628      	mov	r0, r5
 80084b2:	bd38      	pop	{r3, r4, r5, pc}
 80084b4:	b118      	cbz	r0, 80084be <_fflush_r+0x1a>
 80084b6:	6a03      	ldr	r3, [r0, #32]
 80084b8:	b90b      	cbnz	r3, 80084be <_fflush_r+0x1a>
 80084ba:	f7fd fa6d 	bl	8005998 <__sinit>
 80084be:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	d0f3      	beq.n	80084ae <_fflush_r+0xa>
 80084c6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80084c8:	07d0      	lsls	r0, r2, #31
 80084ca:	d404      	bmi.n	80084d6 <_fflush_r+0x32>
 80084cc:	0599      	lsls	r1, r3, #22
 80084ce:	d402      	bmi.n	80084d6 <_fflush_r+0x32>
 80084d0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80084d2:	f7fd fb7a 	bl	8005bca <__retarget_lock_acquire_recursive>
 80084d6:	4628      	mov	r0, r5
 80084d8:	4621      	mov	r1, r4
 80084da:	f7ff ff5f 	bl	800839c <__sflush_r>
 80084de:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80084e0:	07da      	lsls	r2, r3, #31
 80084e2:	4605      	mov	r5, r0
 80084e4:	d4e4      	bmi.n	80084b0 <_fflush_r+0xc>
 80084e6:	89a3      	ldrh	r3, [r4, #12]
 80084e8:	059b      	lsls	r3, r3, #22
 80084ea:	d4e1      	bmi.n	80084b0 <_fflush_r+0xc>
 80084ec:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80084ee:	f7fd fb6d 	bl	8005bcc <__retarget_lock_release_recursive>
 80084f2:	e7dd      	b.n	80084b0 <_fflush_r+0xc>

080084f4 <memmove>:
 80084f4:	4288      	cmp	r0, r1
 80084f6:	b510      	push	{r4, lr}
 80084f8:	eb01 0402 	add.w	r4, r1, r2
 80084fc:	d902      	bls.n	8008504 <memmove+0x10>
 80084fe:	4284      	cmp	r4, r0
 8008500:	4623      	mov	r3, r4
 8008502:	d807      	bhi.n	8008514 <memmove+0x20>
 8008504:	1e43      	subs	r3, r0, #1
 8008506:	42a1      	cmp	r1, r4
 8008508:	d008      	beq.n	800851c <memmove+0x28>
 800850a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800850e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008512:	e7f8      	b.n	8008506 <memmove+0x12>
 8008514:	4402      	add	r2, r0
 8008516:	4601      	mov	r1, r0
 8008518:	428a      	cmp	r2, r1
 800851a:	d100      	bne.n	800851e <memmove+0x2a>
 800851c:	bd10      	pop	{r4, pc}
 800851e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008522:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008526:	e7f7      	b.n	8008518 <memmove+0x24>

08008528 <strncmp>:
 8008528:	b510      	push	{r4, lr}
 800852a:	b16a      	cbz	r2, 8008548 <strncmp+0x20>
 800852c:	3901      	subs	r1, #1
 800852e:	1884      	adds	r4, r0, r2
 8008530:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008534:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8008538:	429a      	cmp	r2, r3
 800853a:	d103      	bne.n	8008544 <strncmp+0x1c>
 800853c:	42a0      	cmp	r0, r4
 800853e:	d001      	beq.n	8008544 <strncmp+0x1c>
 8008540:	2a00      	cmp	r2, #0
 8008542:	d1f5      	bne.n	8008530 <strncmp+0x8>
 8008544:	1ad0      	subs	r0, r2, r3
 8008546:	bd10      	pop	{r4, pc}
 8008548:	4610      	mov	r0, r2
 800854a:	e7fc      	b.n	8008546 <strncmp+0x1e>

0800854c <_sbrk_r>:
 800854c:	b538      	push	{r3, r4, r5, lr}
 800854e:	4d06      	ldr	r5, [pc, #24]	@ (8008568 <_sbrk_r+0x1c>)
 8008550:	2300      	movs	r3, #0
 8008552:	4604      	mov	r4, r0
 8008554:	4608      	mov	r0, r1
 8008556:	602b      	str	r3, [r5, #0]
 8008558:	f7f9 fa0a 	bl	8001970 <_sbrk>
 800855c:	1c43      	adds	r3, r0, #1
 800855e:	d102      	bne.n	8008566 <_sbrk_r+0x1a>
 8008560:	682b      	ldr	r3, [r5, #0]
 8008562:	b103      	cbz	r3, 8008566 <_sbrk_r+0x1a>
 8008564:	6023      	str	r3, [r4, #0]
 8008566:	bd38      	pop	{r3, r4, r5, pc}
 8008568:	200004d8 	.word	0x200004d8

0800856c <memcpy>:
 800856c:	440a      	add	r2, r1
 800856e:	4291      	cmp	r1, r2
 8008570:	f100 33ff 	add.w	r3, r0, #4294967295
 8008574:	d100      	bne.n	8008578 <memcpy+0xc>
 8008576:	4770      	bx	lr
 8008578:	b510      	push	{r4, lr}
 800857a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800857e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008582:	4291      	cmp	r1, r2
 8008584:	d1f9      	bne.n	800857a <memcpy+0xe>
 8008586:	bd10      	pop	{r4, pc}

08008588 <nan>:
 8008588:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8008590 <nan+0x8>
 800858c:	4770      	bx	lr
 800858e:	bf00      	nop
 8008590:	00000000 	.word	0x00000000
 8008594:	7ff80000 	.word	0x7ff80000

08008598 <__assert_func>:
 8008598:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800859a:	4614      	mov	r4, r2
 800859c:	461a      	mov	r2, r3
 800859e:	4b09      	ldr	r3, [pc, #36]	@ (80085c4 <__assert_func+0x2c>)
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	4605      	mov	r5, r0
 80085a4:	68d8      	ldr	r0, [r3, #12]
 80085a6:	b14c      	cbz	r4, 80085bc <__assert_func+0x24>
 80085a8:	4b07      	ldr	r3, [pc, #28]	@ (80085c8 <__assert_func+0x30>)
 80085aa:	9100      	str	r1, [sp, #0]
 80085ac:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80085b0:	4906      	ldr	r1, [pc, #24]	@ (80085cc <__assert_func+0x34>)
 80085b2:	462b      	mov	r3, r5
 80085b4:	f000 fba8 	bl	8008d08 <fiprintf>
 80085b8:	f000 fbb8 	bl	8008d2c <abort>
 80085bc:	4b04      	ldr	r3, [pc, #16]	@ (80085d0 <__assert_func+0x38>)
 80085be:	461c      	mov	r4, r3
 80085c0:	e7f3      	b.n	80085aa <__assert_func+0x12>
 80085c2:	bf00      	nop
 80085c4:	20000018 	.word	0x20000018
 80085c8:	080099fa 	.word	0x080099fa
 80085cc:	08009a07 	.word	0x08009a07
 80085d0:	08009a35 	.word	0x08009a35

080085d4 <_calloc_r>:
 80085d4:	b570      	push	{r4, r5, r6, lr}
 80085d6:	fba1 5402 	umull	r5, r4, r1, r2
 80085da:	b934      	cbnz	r4, 80085ea <_calloc_r+0x16>
 80085dc:	4629      	mov	r1, r5
 80085de:	f7fe f9cb 	bl	8006978 <_malloc_r>
 80085e2:	4606      	mov	r6, r0
 80085e4:	b928      	cbnz	r0, 80085f2 <_calloc_r+0x1e>
 80085e6:	4630      	mov	r0, r6
 80085e8:	bd70      	pop	{r4, r5, r6, pc}
 80085ea:	220c      	movs	r2, #12
 80085ec:	6002      	str	r2, [r0, #0]
 80085ee:	2600      	movs	r6, #0
 80085f0:	e7f9      	b.n	80085e6 <_calloc_r+0x12>
 80085f2:	462a      	mov	r2, r5
 80085f4:	4621      	mov	r1, r4
 80085f6:	f7fd fa6a 	bl	8005ace <memset>
 80085fa:	e7f4      	b.n	80085e6 <_calloc_r+0x12>

080085fc <rshift>:
 80085fc:	6903      	ldr	r3, [r0, #16]
 80085fe:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8008602:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008606:	ea4f 1261 	mov.w	r2, r1, asr #5
 800860a:	f100 0414 	add.w	r4, r0, #20
 800860e:	dd45      	ble.n	800869c <rshift+0xa0>
 8008610:	f011 011f 	ands.w	r1, r1, #31
 8008614:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8008618:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800861c:	d10c      	bne.n	8008638 <rshift+0x3c>
 800861e:	f100 0710 	add.w	r7, r0, #16
 8008622:	4629      	mov	r1, r5
 8008624:	42b1      	cmp	r1, r6
 8008626:	d334      	bcc.n	8008692 <rshift+0x96>
 8008628:	1a9b      	subs	r3, r3, r2
 800862a:	009b      	lsls	r3, r3, #2
 800862c:	1eea      	subs	r2, r5, #3
 800862e:	4296      	cmp	r6, r2
 8008630:	bf38      	it	cc
 8008632:	2300      	movcc	r3, #0
 8008634:	4423      	add	r3, r4
 8008636:	e015      	b.n	8008664 <rshift+0x68>
 8008638:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800863c:	f1c1 0820 	rsb	r8, r1, #32
 8008640:	40cf      	lsrs	r7, r1
 8008642:	f105 0e04 	add.w	lr, r5, #4
 8008646:	46a1      	mov	r9, r4
 8008648:	4576      	cmp	r6, lr
 800864a:	46f4      	mov	ip, lr
 800864c:	d815      	bhi.n	800867a <rshift+0x7e>
 800864e:	1a9a      	subs	r2, r3, r2
 8008650:	0092      	lsls	r2, r2, #2
 8008652:	3a04      	subs	r2, #4
 8008654:	3501      	adds	r5, #1
 8008656:	42ae      	cmp	r6, r5
 8008658:	bf38      	it	cc
 800865a:	2200      	movcc	r2, #0
 800865c:	18a3      	adds	r3, r4, r2
 800865e:	50a7      	str	r7, [r4, r2]
 8008660:	b107      	cbz	r7, 8008664 <rshift+0x68>
 8008662:	3304      	adds	r3, #4
 8008664:	1b1a      	subs	r2, r3, r4
 8008666:	42a3      	cmp	r3, r4
 8008668:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800866c:	bf08      	it	eq
 800866e:	2300      	moveq	r3, #0
 8008670:	6102      	str	r2, [r0, #16]
 8008672:	bf08      	it	eq
 8008674:	6143      	streq	r3, [r0, #20]
 8008676:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800867a:	f8dc c000 	ldr.w	ip, [ip]
 800867e:	fa0c fc08 	lsl.w	ip, ip, r8
 8008682:	ea4c 0707 	orr.w	r7, ip, r7
 8008686:	f849 7b04 	str.w	r7, [r9], #4
 800868a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800868e:	40cf      	lsrs	r7, r1
 8008690:	e7da      	b.n	8008648 <rshift+0x4c>
 8008692:	f851 cb04 	ldr.w	ip, [r1], #4
 8008696:	f847 cf04 	str.w	ip, [r7, #4]!
 800869a:	e7c3      	b.n	8008624 <rshift+0x28>
 800869c:	4623      	mov	r3, r4
 800869e:	e7e1      	b.n	8008664 <rshift+0x68>

080086a0 <__hexdig_fun>:
 80086a0:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 80086a4:	2b09      	cmp	r3, #9
 80086a6:	d802      	bhi.n	80086ae <__hexdig_fun+0xe>
 80086a8:	3820      	subs	r0, #32
 80086aa:	b2c0      	uxtb	r0, r0
 80086ac:	4770      	bx	lr
 80086ae:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 80086b2:	2b05      	cmp	r3, #5
 80086b4:	d801      	bhi.n	80086ba <__hexdig_fun+0x1a>
 80086b6:	3847      	subs	r0, #71	@ 0x47
 80086b8:	e7f7      	b.n	80086aa <__hexdig_fun+0xa>
 80086ba:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 80086be:	2b05      	cmp	r3, #5
 80086c0:	d801      	bhi.n	80086c6 <__hexdig_fun+0x26>
 80086c2:	3827      	subs	r0, #39	@ 0x27
 80086c4:	e7f1      	b.n	80086aa <__hexdig_fun+0xa>
 80086c6:	2000      	movs	r0, #0
 80086c8:	4770      	bx	lr
	...

080086cc <__gethex>:
 80086cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80086d0:	b085      	sub	sp, #20
 80086d2:	468a      	mov	sl, r1
 80086d4:	9302      	str	r3, [sp, #8]
 80086d6:	680b      	ldr	r3, [r1, #0]
 80086d8:	9001      	str	r0, [sp, #4]
 80086da:	4690      	mov	r8, r2
 80086dc:	1c9c      	adds	r4, r3, #2
 80086de:	46a1      	mov	r9, r4
 80086e0:	f814 0b01 	ldrb.w	r0, [r4], #1
 80086e4:	2830      	cmp	r0, #48	@ 0x30
 80086e6:	d0fa      	beq.n	80086de <__gethex+0x12>
 80086e8:	eba9 0303 	sub.w	r3, r9, r3
 80086ec:	f1a3 0b02 	sub.w	fp, r3, #2
 80086f0:	f7ff ffd6 	bl	80086a0 <__hexdig_fun>
 80086f4:	4605      	mov	r5, r0
 80086f6:	2800      	cmp	r0, #0
 80086f8:	d168      	bne.n	80087cc <__gethex+0x100>
 80086fa:	49a0      	ldr	r1, [pc, #640]	@ (800897c <__gethex+0x2b0>)
 80086fc:	2201      	movs	r2, #1
 80086fe:	4648      	mov	r0, r9
 8008700:	f7ff ff12 	bl	8008528 <strncmp>
 8008704:	4607      	mov	r7, r0
 8008706:	2800      	cmp	r0, #0
 8008708:	d167      	bne.n	80087da <__gethex+0x10e>
 800870a:	f899 0001 	ldrb.w	r0, [r9, #1]
 800870e:	4626      	mov	r6, r4
 8008710:	f7ff ffc6 	bl	80086a0 <__hexdig_fun>
 8008714:	2800      	cmp	r0, #0
 8008716:	d062      	beq.n	80087de <__gethex+0x112>
 8008718:	4623      	mov	r3, r4
 800871a:	7818      	ldrb	r0, [r3, #0]
 800871c:	2830      	cmp	r0, #48	@ 0x30
 800871e:	4699      	mov	r9, r3
 8008720:	f103 0301 	add.w	r3, r3, #1
 8008724:	d0f9      	beq.n	800871a <__gethex+0x4e>
 8008726:	f7ff ffbb 	bl	80086a0 <__hexdig_fun>
 800872a:	fab0 f580 	clz	r5, r0
 800872e:	096d      	lsrs	r5, r5, #5
 8008730:	f04f 0b01 	mov.w	fp, #1
 8008734:	464a      	mov	r2, r9
 8008736:	4616      	mov	r6, r2
 8008738:	3201      	adds	r2, #1
 800873a:	7830      	ldrb	r0, [r6, #0]
 800873c:	f7ff ffb0 	bl	80086a0 <__hexdig_fun>
 8008740:	2800      	cmp	r0, #0
 8008742:	d1f8      	bne.n	8008736 <__gethex+0x6a>
 8008744:	498d      	ldr	r1, [pc, #564]	@ (800897c <__gethex+0x2b0>)
 8008746:	2201      	movs	r2, #1
 8008748:	4630      	mov	r0, r6
 800874a:	f7ff feed 	bl	8008528 <strncmp>
 800874e:	2800      	cmp	r0, #0
 8008750:	d13f      	bne.n	80087d2 <__gethex+0x106>
 8008752:	b944      	cbnz	r4, 8008766 <__gethex+0x9a>
 8008754:	1c74      	adds	r4, r6, #1
 8008756:	4622      	mov	r2, r4
 8008758:	4616      	mov	r6, r2
 800875a:	3201      	adds	r2, #1
 800875c:	7830      	ldrb	r0, [r6, #0]
 800875e:	f7ff ff9f 	bl	80086a0 <__hexdig_fun>
 8008762:	2800      	cmp	r0, #0
 8008764:	d1f8      	bne.n	8008758 <__gethex+0x8c>
 8008766:	1ba4      	subs	r4, r4, r6
 8008768:	00a7      	lsls	r7, r4, #2
 800876a:	7833      	ldrb	r3, [r6, #0]
 800876c:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8008770:	2b50      	cmp	r3, #80	@ 0x50
 8008772:	d13e      	bne.n	80087f2 <__gethex+0x126>
 8008774:	7873      	ldrb	r3, [r6, #1]
 8008776:	2b2b      	cmp	r3, #43	@ 0x2b
 8008778:	d033      	beq.n	80087e2 <__gethex+0x116>
 800877a:	2b2d      	cmp	r3, #45	@ 0x2d
 800877c:	d034      	beq.n	80087e8 <__gethex+0x11c>
 800877e:	1c71      	adds	r1, r6, #1
 8008780:	2400      	movs	r4, #0
 8008782:	7808      	ldrb	r0, [r1, #0]
 8008784:	f7ff ff8c 	bl	80086a0 <__hexdig_fun>
 8008788:	1e43      	subs	r3, r0, #1
 800878a:	b2db      	uxtb	r3, r3
 800878c:	2b18      	cmp	r3, #24
 800878e:	d830      	bhi.n	80087f2 <__gethex+0x126>
 8008790:	f1a0 0210 	sub.w	r2, r0, #16
 8008794:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8008798:	f7ff ff82 	bl	80086a0 <__hexdig_fun>
 800879c:	f100 3cff 	add.w	ip, r0, #4294967295
 80087a0:	fa5f fc8c 	uxtb.w	ip, ip
 80087a4:	f1bc 0f18 	cmp.w	ip, #24
 80087a8:	f04f 030a 	mov.w	r3, #10
 80087ac:	d91e      	bls.n	80087ec <__gethex+0x120>
 80087ae:	b104      	cbz	r4, 80087b2 <__gethex+0xe6>
 80087b0:	4252      	negs	r2, r2
 80087b2:	4417      	add	r7, r2
 80087b4:	f8ca 1000 	str.w	r1, [sl]
 80087b8:	b1ed      	cbz	r5, 80087f6 <__gethex+0x12a>
 80087ba:	f1bb 0f00 	cmp.w	fp, #0
 80087be:	bf0c      	ite	eq
 80087c0:	2506      	moveq	r5, #6
 80087c2:	2500      	movne	r5, #0
 80087c4:	4628      	mov	r0, r5
 80087c6:	b005      	add	sp, #20
 80087c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80087cc:	2500      	movs	r5, #0
 80087ce:	462c      	mov	r4, r5
 80087d0:	e7b0      	b.n	8008734 <__gethex+0x68>
 80087d2:	2c00      	cmp	r4, #0
 80087d4:	d1c7      	bne.n	8008766 <__gethex+0x9a>
 80087d6:	4627      	mov	r7, r4
 80087d8:	e7c7      	b.n	800876a <__gethex+0x9e>
 80087da:	464e      	mov	r6, r9
 80087dc:	462f      	mov	r7, r5
 80087de:	2501      	movs	r5, #1
 80087e0:	e7c3      	b.n	800876a <__gethex+0x9e>
 80087e2:	2400      	movs	r4, #0
 80087e4:	1cb1      	adds	r1, r6, #2
 80087e6:	e7cc      	b.n	8008782 <__gethex+0xb6>
 80087e8:	2401      	movs	r4, #1
 80087ea:	e7fb      	b.n	80087e4 <__gethex+0x118>
 80087ec:	fb03 0002 	mla	r0, r3, r2, r0
 80087f0:	e7ce      	b.n	8008790 <__gethex+0xc4>
 80087f2:	4631      	mov	r1, r6
 80087f4:	e7de      	b.n	80087b4 <__gethex+0xe8>
 80087f6:	eba6 0309 	sub.w	r3, r6, r9
 80087fa:	3b01      	subs	r3, #1
 80087fc:	4629      	mov	r1, r5
 80087fe:	2b07      	cmp	r3, #7
 8008800:	dc0a      	bgt.n	8008818 <__gethex+0x14c>
 8008802:	9801      	ldr	r0, [sp, #4]
 8008804:	f7fe f944 	bl	8006a90 <_Balloc>
 8008808:	4604      	mov	r4, r0
 800880a:	b940      	cbnz	r0, 800881e <__gethex+0x152>
 800880c:	4b5c      	ldr	r3, [pc, #368]	@ (8008980 <__gethex+0x2b4>)
 800880e:	4602      	mov	r2, r0
 8008810:	21e4      	movs	r1, #228	@ 0xe4
 8008812:	485c      	ldr	r0, [pc, #368]	@ (8008984 <__gethex+0x2b8>)
 8008814:	f7ff fec0 	bl	8008598 <__assert_func>
 8008818:	3101      	adds	r1, #1
 800881a:	105b      	asrs	r3, r3, #1
 800881c:	e7ef      	b.n	80087fe <__gethex+0x132>
 800881e:	f100 0a14 	add.w	sl, r0, #20
 8008822:	2300      	movs	r3, #0
 8008824:	4655      	mov	r5, sl
 8008826:	469b      	mov	fp, r3
 8008828:	45b1      	cmp	r9, r6
 800882a:	d337      	bcc.n	800889c <__gethex+0x1d0>
 800882c:	f845 bb04 	str.w	fp, [r5], #4
 8008830:	eba5 050a 	sub.w	r5, r5, sl
 8008834:	10ad      	asrs	r5, r5, #2
 8008836:	6125      	str	r5, [r4, #16]
 8008838:	4658      	mov	r0, fp
 800883a:	f7fe fa1b 	bl	8006c74 <__hi0bits>
 800883e:	016d      	lsls	r5, r5, #5
 8008840:	f8d8 6000 	ldr.w	r6, [r8]
 8008844:	1a2d      	subs	r5, r5, r0
 8008846:	42b5      	cmp	r5, r6
 8008848:	dd54      	ble.n	80088f4 <__gethex+0x228>
 800884a:	1bad      	subs	r5, r5, r6
 800884c:	4629      	mov	r1, r5
 800884e:	4620      	mov	r0, r4
 8008850:	f7fe fda7 	bl	80073a2 <__any_on>
 8008854:	4681      	mov	r9, r0
 8008856:	b178      	cbz	r0, 8008878 <__gethex+0x1ac>
 8008858:	1e6b      	subs	r3, r5, #1
 800885a:	1159      	asrs	r1, r3, #5
 800885c:	f003 021f 	and.w	r2, r3, #31
 8008860:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8008864:	f04f 0901 	mov.w	r9, #1
 8008868:	fa09 f202 	lsl.w	r2, r9, r2
 800886c:	420a      	tst	r2, r1
 800886e:	d003      	beq.n	8008878 <__gethex+0x1ac>
 8008870:	454b      	cmp	r3, r9
 8008872:	dc36      	bgt.n	80088e2 <__gethex+0x216>
 8008874:	f04f 0902 	mov.w	r9, #2
 8008878:	4629      	mov	r1, r5
 800887a:	4620      	mov	r0, r4
 800887c:	f7ff febe 	bl	80085fc <rshift>
 8008880:	442f      	add	r7, r5
 8008882:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008886:	42bb      	cmp	r3, r7
 8008888:	da42      	bge.n	8008910 <__gethex+0x244>
 800888a:	9801      	ldr	r0, [sp, #4]
 800888c:	4621      	mov	r1, r4
 800888e:	f7fe f93f 	bl	8006b10 <_Bfree>
 8008892:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008894:	2300      	movs	r3, #0
 8008896:	6013      	str	r3, [r2, #0]
 8008898:	25a3      	movs	r5, #163	@ 0xa3
 800889a:	e793      	b.n	80087c4 <__gethex+0xf8>
 800889c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 80088a0:	2a2e      	cmp	r2, #46	@ 0x2e
 80088a2:	d012      	beq.n	80088ca <__gethex+0x1fe>
 80088a4:	2b20      	cmp	r3, #32
 80088a6:	d104      	bne.n	80088b2 <__gethex+0x1e6>
 80088a8:	f845 bb04 	str.w	fp, [r5], #4
 80088ac:	f04f 0b00 	mov.w	fp, #0
 80088b0:	465b      	mov	r3, fp
 80088b2:	7830      	ldrb	r0, [r6, #0]
 80088b4:	9303      	str	r3, [sp, #12]
 80088b6:	f7ff fef3 	bl	80086a0 <__hexdig_fun>
 80088ba:	9b03      	ldr	r3, [sp, #12]
 80088bc:	f000 000f 	and.w	r0, r0, #15
 80088c0:	4098      	lsls	r0, r3
 80088c2:	ea4b 0b00 	orr.w	fp, fp, r0
 80088c6:	3304      	adds	r3, #4
 80088c8:	e7ae      	b.n	8008828 <__gethex+0x15c>
 80088ca:	45b1      	cmp	r9, r6
 80088cc:	d8ea      	bhi.n	80088a4 <__gethex+0x1d8>
 80088ce:	492b      	ldr	r1, [pc, #172]	@ (800897c <__gethex+0x2b0>)
 80088d0:	9303      	str	r3, [sp, #12]
 80088d2:	2201      	movs	r2, #1
 80088d4:	4630      	mov	r0, r6
 80088d6:	f7ff fe27 	bl	8008528 <strncmp>
 80088da:	9b03      	ldr	r3, [sp, #12]
 80088dc:	2800      	cmp	r0, #0
 80088de:	d1e1      	bne.n	80088a4 <__gethex+0x1d8>
 80088e0:	e7a2      	b.n	8008828 <__gethex+0x15c>
 80088e2:	1ea9      	subs	r1, r5, #2
 80088e4:	4620      	mov	r0, r4
 80088e6:	f7fe fd5c 	bl	80073a2 <__any_on>
 80088ea:	2800      	cmp	r0, #0
 80088ec:	d0c2      	beq.n	8008874 <__gethex+0x1a8>
 80088ee:	f04f 0903 	mov.w	r9, #3
 80088f2:	e7c1      	b.n	8008878 <__gethex+0x1ac>
 80088f4:	da09      	bge.n	800890a <__gethex+0x23e>
 80088f6:	1b75      	subs	r5, r6, r5
 80088f8:	4621      	mov	r1, r4
 80088fa:	9801      	ldr	r0, [sp, #4]
 80088fc:	462a      	mov	r2, r5
 80088fe:	f7fe fb17 	bl	8006f30 <__lshift>
 8008902:	1b7f      	subs	r7, r7, r5
 8008904:	4604      	mov	r4, r0
 8008906:	f100 0a14 	add.w	sl, r0, #20
 800890a:	f04f 0900 	mov.w	r9, #0
 800890e:	e7b8      	b.n	8008882 <__gethex+0x1b6>
 8008910:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8008914:	42bd      	cmp	r5, r7
 8008916:	dd6f      	ble.n	80089f8 <__gethex+0x32c>
 8008918:	1bed      	subs	r5, r5, r7
 800891a:	42ae      	cmp	r6, r5
 800891c:	dc34      	bgt.n	8008988 <__gethex+0x2bc>
 800891e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8008922:	2b02      	cmp	r3, #2
 8008924:	d022      	beq.n	800896c <__gethex+0x2a0>
 8008926:	2b03      	cmp	r3, #3
 8008928:	d024      	beq.n	8008974 <__gethex+0x2a8>
 800892a:	2b01      	cmp	r3, #1
 800892c:	d115      	bne.n	800895a <__gethex+0x28e>
 800892e:	42ae      	cmp	r6, r5
 8008930:	d113      	bne.n	800895a <__gethex+0x28e>
 8008932:	2e01      	cmp	r6, #1
 8008934:	d10b      	bne.n	800894e <__gethex+0x282>
 8008936:	9a02      	ldr	r2, [sp, #8]
 8008938:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800893c:	6013      	str	r3, [r2, #0]
 800893e:	2301      	movs	r3, #1
 8008940:	6123      	str	r3, [r4, #16]
 8008942:	f8ca 3000 	str.w	r3, [sl]
 8008946:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008948:	2562      	movs	r5, #98	@ 0x62
 800894a:	601c      	str	r4, [r3, #0]
 800894c:	e73a      	b.n	80087c4 <__gethex+0xf8>
 800894e:	1e71      	subs	r1, r6, #1
 8008950:	4620      	mov	r0, r4
 8008952:	f7fe fd26 	bl	80073a2 <__any_on>
 8008956:	2800      	cmp	r0, #0
 8008958:	d1ed      	bne.n	8008936 <__gethex+0x26a>
 800895a:	9801      	ldr	r0, [sp, #4]
 800895c:	4621      	mov	r1, r4
 800895e:	f7fe f8d7 	bl	8006b10 <_Bfree>
 8008962:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008964:	2300      	movs	r3, #0
 8008966:	6013      	str	r3, [r2, #0]
 8008968:	2550      	movs	r5, #80	@ 0x50
 800896a:	e72b      	b.n	80087c4 <__gethex+0xf8>
 800896c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800896e:	2b00      	cmp	r3, #0
 8008970:	d1f3      	bne.n	800895a <__gethex+0x28e>
 8008972:	e7e0      	b.n	8008936 <__gethex+0x26a>
 8008974:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008976:	2b00      	cmp	r3, #0
 8008978:	d1dd      	bne.n	8008936 <__gethex+0x26a>
 800897a:	e7ee      	b.n	800895a <__gethex+0x28e>
 800897c:	080099df 	.word	0x080099df
 8008980:	08009975 	.word	0x08009975
 8008984:	08009a36 	.word	0x08009a36
 8008988:	1e6f      	subs	r7, r5, #1
 800898a:	f1b9 0f00 	cmp.w	r9, #0
 800898e:	d130      	bne.n	80089f2 <__gethex+0x326>
 8008990:	b127      	cbz	r7, 800899c <__gethex+0x2d0>
 8008992:	4639      	mov	r1, r7
 8008994:	4620      	mov	r0, r4
 8008996:	f7fe fd04 	bl	80073a2 <__any_on>
 800899a:	4681      	mov	r9, r0
 800899c:	117a      	asrs	r2, r7, #5
 800899e:	2301      	movs	r3, #1
 80089a0:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 80089a4:	f007 071f 	and.w	r7, r7, #31
 80089a8:	40bb      	lsls	r3, r7
 80089aa:	4213      	tst	r3, r2
 80089ac:	4629      	mov	r1, r5
 80089ae:	4620      	mov	r0, r4
 80089b0:	bf18      	it	ne
 80089b2:	f049 0902 	orrne.w	r9, r9, #2
 80089b6:	f7ff fe21 	bl	80085fc <rshift>
 80089ba:	f8d8 7004 	ldr.w	r7, [r8, #4]
 80089be:	1b76      	subs	r6, r6, r5
 80089c0:	2502      	movs	r5, #2
 80089c2:	f1b9 0f00 	cmp.w	r9, #0
 80089c6:	d047      	beq.n	8008a58 <__gethex+0x38c>
 80089c8:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80089cc:	2b02      	cmp	r3, #2
 80089ce:	d015      	beq.n	80089fc <__gethex+0x330>
 80089d0:	2b03      	cmp	r3, #3
 80089d2:	d017      	beq.n	8008a04 <__gethex+0x338>
 80089d4:	2b01      	cmp	r3, #1
 80089d6:	d109      	bne.n	80089ec <__gethex+0x320>
 80089d8:	f019 0f02 	tst.w	r9, #2
 80089dc:	d006      	beq.n	80089ec <__gethex+0x320>
 80089de:	f8da 3000 	ldr.w	r3, [sl]
 80089e2:	ea49 0903 	orr.w	r9, r9, r3
 80089e6:	f019 0f01 	tst.w	r9, #1
 80089ea:	d10e      	bne.n	8008a0a <__gethex+0x33e>
 80089ec:	f045 0510 	orr.w	r5, r5, #16
 80089f0:	e032      	b.n	8008a58 <__gethex+0x38c>
 80089f2:	f04f 0901 	mov.w	r9, #1
 80089f6:	e7d1      	b.n	800899c <__gethex+0x2d0>
 80089f8:	2501      	movs	r5, #1
 80089fa:	e7e2      	b.n	80089c2 <__gethex+0x2f6>
 80089fc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80089fe:	f1c3 0301 	rsb	r3, r3, #1
 8008a02:	930f      	str	r3, [sp, #60]	@ 0x3c
 8008a04:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	d0f0      	beq.n	80089ec <__gethex+0x320>
 8008a0a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8008a0e:	f104 0314 	add.w	r3, r4, #20
 8008a12:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8008a16:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8008a1a:	f04f 0c00 	mov.w	ip, #0
 8008a1e:	4618      	mov	r0, r3
 8008a20:	f853 2b04 	ldr.w	r2, [r3], #4
 8008a24:	f1b2 3fff 	cmp.w	r2, #4294967295
 8008a28:	d01b      	beq.n	8008a62 <__gethex+0x396>
 8008a2a:	3201      	adds	r2, #1
 8008a2c:	6002      	str	r2, [r0, #0]
 8008a2e:	2d02      	cmp	r5, #2
 8008a30:	f104 0314 	add.w	r3, r4, #20
 8008a34:	d13c      	bne.n	8008ab0 <__gethex+0x3e4>
 8008a36:	f8d8 2000 	ldr.w	r2, [r8]
 8008a3a:	3a01      	subs	r2, #1
 8008a3c:	42b2      	cmp	r2, r6
 8008a3e:	d109      	bne.n	8008a54 <__gethex+0x388>
 8008a40:	1171      	asrs	r1, r6, #5
 8008a42:	2201      	movs	r2, #1
 8008a44:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8008a48:	f006 061f 	and.w	r6, r6, #31
 8008a4c:	fa02 f606 	lsl.w	r6, r2, r6
 8008a50:	421e      	tst	r6, r3
 8008a52:	d13a      	bne.n	8008aca <__gethex+0x3fe>
 8008a54:	f045 0520 	orr.w	r5, r5, #32
 8008a58:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008a5a:	601c      	str	r4, [r3, #0]
 8008a5c:	9b02      	ldr	r3, [sp, #8]
 8008a5e:	601f      	str	r7, [r3, #0]
 8008a60:	e6b0      	b.n	80087c4 <__gethex+0xf8>
 8008a62:	4299      	cmp	r1, r3
 8008a64:	f843 cc04 	str.w	ip, [r3, #-4]
 8008a68:	d8d9      	bhi.n	8008a1e <__gethex+0x352>
 8008a6a:	68a3      	ldr	r3, [r4, #8]
 8008a6c:	459b      	cmp	fp, r3
 8008a6e:	db17      	blt.n	8008aa0 <__gethex+0x3d4>
 8008a70:	6861      	ldr	r1, [r4, #4]
 8008a72:	9801      	ldr	r0, [sp, #4]
 8008a74:	3101      	adds	r1, #1
 8008a76:	f7fe f80b 	bl	8006a90 <_Balloc>
 8008a7a:	4681      	mov	r9, r0
 8008a7c:	b918      	cbnz	r0, 8008a86 <__gethex+0x3ba>
 8008a7e:	4b1a      	ldr	r3, [pc, #104]	@ (8008ae8 <__gethex+0x41c>)
 8008a80:	4602      	mov	r2, r0
 8008a82:	2184      	movs	r1, #132	@ 0x84
 8008a84:	e6c5      	b.n	8008812 <__gethex+0x146>
 8008a86:	6922      	ldr	r2, [r4, #16]
 8008a88:	3202      	adds	r2, #2
 8008a8a:	f104 010c 	add.w	r1, r4, #12
 8008a8e:	0092      	lsls	r2, r2, #2
 8008a90:	300c      	adds	r0, #12
 8008a92:	f7ff fd6b 	bl	800856c <memcpy>
 8008a96:	4621      	mov	r1, r4
 8008a98:	9801      	ldr	r0, [sp, #4]
 8008a9a:	f7fe f839 	bl	8006b10 <_Bfree>
 8008a9e:	464c      	mov	r4, r9
 8008aa0:	6923      	ldr	r3, [r4, #16]
 8008aa2:	1c5a      	adds	r2, r3, #1
 8008aa4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008aa8:	6122      	str	r2, [r4, #16]
 8008aaa:	2201      	movs	r2, #1
 8008aac:	615a      	str	r2, [r3, #20]
 8008aae:	e7be      	b.n	8008a2e <__gethex+0x362>
 8008ab0:	6922      	ldr	r2, [r4, #16]
 8008ab2:	455a      	cmp	r2, fp
 8008ab4:	dd0b      	ble.n	8008ace <__gethex+0x402>
 8008ab6:	2101      	movs	r1, #1
 8008ab8:	4620      	mov	r0, r4
 8008aba:	f7ff fd9f 	bl	80085fc <rshift>
 8008abe:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8008ac2:	3701      	adds	r7, #1
 8008ac4:	42bb      	cmp	r3, r7
 8008ac6:	f6ff aee0 	blt.w	800888a <__gethex+0x1be>
 8008aca:	2501      	movs	r5, #1
 8008acc:	e7c2      	b.n	8008a54 <__gethex+0x388>
 8008ace:	f016 061f 	ands.w	r6, r6, #31
 8008ad2:	d0fa      	beq.n	8008aca <__gethex+0x3fe>
 8008ad4:	4453      	add	r3, sl
 8008ad6:	f1c6 0620 	rsb	r6, r6, #32
 8008ada:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8008ade:	f7fe f8c9 	bl	8006c74 <__hi0bits>
 8008ae2:	42b0      	cmp	r0, r6
 8008ae4:	dbe7      	blt.n	8008ab6 <__gethex+0x3ea>
 8008ae6:	e7f0      	b.n	8008aca <__gethex+0x3fe>
 8008ae8:	08009975 	.word	0x08009975

08008aec <L_shift>:
 8008aec:	f1c2 0208 	rsb	r2, r2, #8
 8008af0:	0092      	lsls	r2, r2, #2
 8008af2:	b570      	push	{r4, r5, r6, lr}
 8008af4:	f1c2 0620 	rsb	r6, r2, #32
 8008af8:	6843      	ldr	r3, [r0, #4]
 8008afa:	6804      	ldr	r4, [r0, #0]
 8008afc:	fa03 f506 	lsl.w	r5, r3, r6
 8008b00:	432c      	orrs	r4, r5
 8008b02:	40d3      	lsrs	r3, r2
 8008b04:	6004      	str	r4, [r0, #0]
 8008b06:	f840 3f04 	str.w	r3, [r0, #4]!
 8008b0a:	4288      	cmp	r0, r1
 8008b0c:	d3f4      	bcc.n	8008af8 <L_shift+0xc>
 8008b0e:	bd70      	pop	{r4, r5, r6, pc}

08008b10 <__match>:
 8008b10:	b530      	push	{r4, r5, lr}
 8008b12:	6803      	ldr	r3, [r0, #0]
 8008b14:	3301      	adds	r3, #1
 8008b16:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008b1a:	b914      	cbnz	r4, 8008b22 <__match+0x12>
 8008b1c:	6003      	str	r3, [r0, #0]
 8008b1e:	2001      	movs	r0, #1
 8008b20:	bd30      	pop	{r4, r5, pc}
 8008b22:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008b26:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8008b2a:	2d19      	cmp	r5, #25
 8008b2c:	bf98      	it	ls
 8008b2e:	3220      	addls	r2, #32
 8008b30:	42a2      	cmp	r2, r4
 8008b32:	d0f0      	beq.n	8008b16 <__match+0x6>
 8008b34:	2000      	movs	r0, #0
 8008b36:	e7f3      	b.n	8008b20 <__match+0x10>

08008b38 <__hexnan>:
 8008b38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b3c:	680b      	ldr	r3, [r1, #0]
 8008b3e:	6801      	ldr	r1, [r0, #0]
 8008b40:	115e      	asrs	r6, r3, #5
 8008b42:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8008b46:	f013 031f 	ands.w	r3, r3, #31
 8008b4a:	b087      	sub	sp, #28
 8008b4c:	bf18      	it	ne
 8008b4e:	3604      	addne	r6, #4
 8008b50:	2500      	movs	r5, #0
 8008b52:	1f37      	subs	r7, r6, #4
 8008b54:	4682      	mov	sl, r0
 8008b56:	4690      	mov	r8, r2
 8008b58:	9301      	str	r3, [sp, #4]
 8008b5a:	f846 5c04 	str.w	r5, [r6, #-4]
 8008b5e:	46b9      	mov	r9, r7
 8008b60:	463c      	mov	r4, r7
 8008b62:	9502      	str	r5, [sp, #8]
 8008b64:	46ab      	mov	fp, r5
 8008b66:	784a      	ldrb	r2, [r1, #1]
 8008b68:	1c4b      	adds	r3, r1, #1
 8008b6a:	9303      	str	r3, [sp, #12]
 8008b6c:	b342      	cbz	r2, 8008bc0 <__hexnan+0x88>
 8008b6e:	4610      	mov	r0, r2
 8008b70:	9105      	str	r1, [sp, #20]
 8008b72:	9204      	str	r2, [sp, #16]
 8008b74:	f7ff fd94 	bl	80086a0 <__hexdig_fun>
 8008b78:	2800      	cmp	r0, #0
 8008b7a:	d151      	bne.n	8008c20 <__hexnan+0xe8>
 8008b7c:	9a04      	ldr	r2, [sp, #16]
 8008b7e:	9905      	ldr	r1, [sp, #20]
 8008b80:	2a20      	cmp	r2, #32
 8008b82:	d818      	bhi.n	8008bb6 <__hexnan+0x7e>
 8008b84:	9b02      	ldr	r3, [sp, #8]
 8008b86:	459b      	cmp	fp, r3
 8008b88:	dd13      	ble.n	8008bb2 <__hexnan+0x7a>
 8008b8a:	454c      	cmp	r4, r9
 8008b8c:	d206      	bcs.n	8008b9c <__hexnan+0x64>
 8008b8e:	2d07      	cmp	r5, #7
 8008b90:	dc04      	bgt.n	8008b9c <__hexnan+0x64>
 8008b92:	462a      	mov	r2, r5
 8008b94:	4649      	mov	r1, r9
 8008b96:	4620      	mov	r0, r4
 8008b98:	f7ff ffa8 	bl	8008aec <L_shift>
 8008b9c:	4544      	cmp	r4, r8
 8008b9e:	d952      	bls.n	8008c46 <__hexnan+0x10e>
 8008ba0:	2300      	movs	r3, #0
 8008ba2:	f1a4 0904 	sub.w	r9, r4, #4
 8008ba6:	f844 3c04 	str.w	r3, [r4, #-4]
 8008baa:	f8cd b008 	str.w	fp, [sp, #8]
 8008bae:	464c      	mov	r4, r9
 8008bb0:	461d      	mov	r5, r3
 8008bb2:	9903      	ldr	r1, [sp, #12]
 8008bb4:	e7d7      	b.n	8008b66 <__hexnan+0x2e>
 8008bb6:	2a29      	cmp	r2, #41	@ 0x29
 8008bb8:	d157      	bne.n	8008c6a <__hexnan+0x132>
 8008bba:	3102      	adds	r1, #2
 8008bbc:	f8ca 1000 	str.w	r1, [sl]
 8008bc0:	f1bb 0f00 	cmp.w	fp, #0
 8008bc4:	d051      	beq.n	8008c6a <__hexnan+0x132>
 8008bc6:	454c      	cmp	r4, r9
 8008bc8:	d206      	bcs.n	8008bd8 <__hexnan+0xa0>
 8008bca:	2d07      	cmp	r5, #7
 8008bcc:	dc04      	bgt.n	8008bd8 <__hexnan+0xa0>
 8008bce:	462a      	mov	r2, r5
 8008bd0:	4649      	mov	r1, r9
 8008bd2:	4620      	mov	r0, r4
 8008bd4:	f7ff ff8a 	bl	8008aec <L_shift>
 8008bd8:	4544      	cmp	r4, r8
 8008bda:	d936      	bls.n	8008c4a <__hexnan+0x112>
 8008bdc:	f1a8 0204 	sub.w	r2, r8, #4
 8008be0:	4623      	mov	r3, r4
 8008be2:	f853 1b04 	ldr.w	r1, [r3], #4
 8008be6:	f842 1f04 	str.w	r1, [r2, #4]!
 8008bea:	429f      	cmp	r7, r3
 8008bec:	d2f9      	bcs.n	8008be2 <__hexnan+0xaa>
 8008bee:	1b3b      	subs	r3, r7, r4
 8008bf0:	f023 0303 	bic.w	r3, r3, #3
 8008bf4:	3304      	adds	r3, #4
 8008bf6:	3401      	adds	r4, #1
 8008bf8:	3e03      	subs	r6, #3
 8008bfa:	42b4      	cmp	r4, r6
 8008bfc:	bf88      	it	hi
 8008bfe:	2304      	movhi	r3, #4
 8008c00:	4443      	add	r3, r8
 8008c02:	2200      	movs	r2, #0
 8008c04:	f843 2b04 	str.w	r2, [r3], #4
 8008c08:	429f      	cmp	r7, r3
 8008c0a:	d2fb      	bcs.n	8008c04 <__hexnan+0xcc>
 8008c0c:	683b      	ldr	r3, [r7, #0]
 8008c0e:	b91b      	cbnz	r3, 8008c18 <__hexnan+0xe0>
 8008c10:	4547      	cmp	r7, r8
 8008c12:	d128      	bne.n	8008c66 <__hexnan+0x12e>
 8008c14:	2301      	movs	r3, #1
 8008c16:	603b      	str	r3, [r7, #0]
 8008c18:	2005      	movs	r0, #5
 8008c1a:	b007      	add	sp, #28
 8008c1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c20:	3501      	adds	r5, #1
 8008c22:	2d08      	cmp	r5, #8
 8008c24:	f10b 0b01 	add.w	fp, fp, #1
 8008c28:	dd06      	ble.n	8008c38 <__hexnan+0x100>
 8008c2a:	4544      	cmp	r4, r8
 8008c2c:	d9c1      	bls.n	8008bb2 <__hexnan+0x7a>
 8008c2e:	2300      	movs	r3, #0
 8008c30:	f844 3c04 	str.w	r3, [r4, #-4]
 8008c34:	2501      	movs	r5, #1
 8008c36:	3c04      	subs	r4, #4
 8008c38:	6822      	ldr	r2, [r4, #0]
 8008c3a:	f000 000f 	and.w	r0, r0, #15
 8008c3e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8008c42:	6020      	str	r0, [r4, #0]
 8008c44:	e7b5      	b.n	8008bb2 <__hexnan+0x7a>
 8008c46:	2508      	movs	r5, #8
 8008c48:	e7b3      	b.n	8008bb2 <__hexnan+0x7a>
 8008c4a:	9b01      	ldr	r3, [sp, #4]
 8008c4c:	2b00      	cmp	r3, #0
 8008c4e:	d0dd      	beq.n	8008c0c <__hexnan+0xd4>
 8008c50:	f1c3 0320 	rsb	r3, r3, #32
 8008c54:	f04f 32ff 	mov.w	r2, #4294967295
 8008c58:	40da      	lsrs	r2, r3
 8008c5a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8008c5e:	4013      	ands	r3, r2
 8008c60:	f846 3c04 	str.w	r3, [r6, #-4]
 8008c64:	e7d2      	b.n	8008c0c <__hexnan+0xd4>
 8008c66:	3f04      	subs	r7, #4
 8008c68:	e7d0      	b.n	8008c0c <__hexnan+0xd4>
 8008c6a:	2004      	movs	r0, #4
 8008c6c:	e7d5      	b.n	8008c1a <__hexnan+0xe2>

08008c6e <__ascii_mbtowc>:
 8008c6e:	b082      	sub	sp, #8
 8008c70:	b901      	cbnz	r1, 8008c74 <__ascii_mbtowc+0x6>
 8008c72:	a901      	add	r1, sp, #4
 8008c74:	b142      	cbz	r2, 8008c88 <__ascii_mbtowc+0x1a>
 8008c76:	b14b      	cbz	r3, 8008c8c <__ascii_mbtowc+0x1e>
 8008c78:	7813      	ldrb	r3, [r2, #0]
 8008c7a:	600b      	str	r3, [r1, #0]
 8008c7c:	7812      	ldrb	r2, [r2, #0]
 8008c7e:	1e10      	subs	r0, r2, #0
 8008c80:	bf18      	it	ne
 8008c82:	2001      	movne	r0, #1
 8008c84:	b002      	add	sp, #8
 8008c86:	4770      	bx	lr
 8008c88:	4610      	mov	r0, r2
 8008c8a:	e7fb      	b.n	8008c84 <__ascii_mbtowc+0x16>
 8008c8c:	f06f 0001 	mvn.w	r0, #1
 8008c90:	e7f8      	b.n	8008c84 <__ascii_mbtowc+0x16>

08008c92 <_realloc_r>:
 8008c92:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008c96:	4607      	mov	r7, r0
 8008c98:	4614      	mov	r4, r2
 8008c9a:	460d      	mov	r5, r1
 8008c9c:	b921      	cbnz	r1, 8008ca8 <_realloc_r+0x16>
 8008c9e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008ca2:	4611      	mov	r1, r2
 8008ca4:	f7fd be68 	b.w	8006978 <_malloc_r>
 8008ca8:	b92a      	cbnz	r2, 8008cb6 <_realloc_r+0x24>
 8008caa:	f7fd fdf1 	bl	8006890 <_free_r>
 8008cae:	4625      	mov	r5, r4
 8008cb0:	4628      	mov	r0, r5
 8008cb2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008cb6:	f000 f840 	bl	8008d3a <_malloc_usable_size_r>
 8008cba:	4284      	cmp	r4, r0
 8008cbc:	4606      	mov	r6, r0
 8008cbe:	d802      	bhi.n	8008cc6 <_realloc_r+0x34>
 8008cc0:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008cc4:	d8f4      	bhi.n	8008cb0 <_realloc_r+0x1e>
 8008cc6:	4621      	mov	r1, r4
 8008cc8:	4638      	mov	r0, r7
 8008cca:	f7fd fe55 	bl	8006978 <_malloc_r>
 8008cce:	4680      	mov	r8, r0
 8008cd0:	b908      	cbnz	r0, 8008cd6 <_realloc_r+0x44>
 8008cd2:	4645      	mov	r5, r8
 8008cd4:	e7ec      	b.n	8008cb0 <_realloc_r+0x1e>
 8008cd6:	42b4      	cmp	r4, r6
 8008cd8:	4622      	mov	r2, r4
 8008cda:	4629      	mov	r1, r5
 8008cdc:	bf28      	it	cs
 8008cde:	4632      	movcs	r2, r6
 8008ce0:	f7ff fc44 	bl	800856c <memcpy>
 8008ce4:	4629      	mov	r1, r5
 8008ce6:	4638      	mov	r0, r7
 8008ce8:	f7fd fdd2 	bl	8006890 <_free_r>
 8008cec:	e7f1      	b.n	8008cd2 <_realloc_r+0x40>

08008cee <__ascii_wctomb>:
 8008cee:	4603      	mov	r3, r0
 8008cf0:	4608      	mov	r0, r1
 8008cf2:	b141      	cbz	r1, 8008d06 <__ascii_wctomb+0x18>
 8008cf4:	2aff      	cmp	r2, #255	@ 0xff
 8008cf6:	d904      	bls.n	8008d02 <__ascii_wctomb+0x14>
 8008cf8:	228a      	movs	r2, #138	@ 0x8a
 8008cfa:	601a      	str	r2, [r3, #0]
 8008cfc:	f04f 30ff 	mov.w	r0, #4294967295
 8008d00:	4770      	bx	lr
 8008d02:	700a      	strb	r2, [r1, #0]
 8008d04:	2001      	movs	r0, #1
 8008d06:	4770      	bx	lr

08008d08 <fiprintf>:
 8008d08:	b40e      	push	{r1, r2, r3}
 8008d0a:	b503      	push	{r0, r1, lr}
 8008d0c:	4601      	mov	r1, r0
 8008d0e:	ab03      	add	r3, sp, #12
 8008d10:	4805      	ldr	r0, [pc, #20]	@ (8008d28 <fiprintf+0x20>)
 8008d12:	f853 2b04 	ldr.w	r2, [r3], #4
 8008d16:	6800      	ldr	r0, [r0, #0]
 8008d18:	9301      	str	r3, [sp, #4]
 8008d1a:	f000 f83f 	bl	8008d9c <_vfiprintf_r>
 8008d1e:	b002      	add	sp, #8
 8008d20:	f85d eb04 	ldr.w	lr, [sp], #4
 8008d24:	b003      	add	sp, #12
 8008d26:	4770      	bx	lr
 8008d28:	20000018 	.word	0x20000018

08008d2c <abort>:
 8008d2c:	b508      	push	{r3, lr}
 8008d2e:	2006      	movs	r0, #6
 8008d30:	f000 fa08 	bl	8009144 <raise>
 8008d34:	2001      	movs	r0, #1
 8008d36:	f7f8 fda3 	bl	8001880 <_exit>

08008d3a <_malloc_usable_size_r>:
 8008d3a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008d3e:	1f18      	subs	r0, r3, #4
 8008d40:	2b00      	cmp	r3, #0
 8008d42:	bfbc      	itt	lt
 8008d44:	580b      	ldrlt	r3, [r1, r0]
 8008d46:	18c0      	addlt	r0, r0, r3
 8008d48:	4770      	bx	lr

08008d4a <__sfputc_r>:
 8008d4a:	6893      	ldr	r3, [r2, #8]
 8008d4c:	3b01      	subs	r3, #1
 8008d4e:	2b00      	cmp	r3, #0
 8008d50:	b410      	push	{r4}
 8008d52:	6093      	str	r3, [r2, #8]
 8008d54:	da08      	bge.n	8008d68 <__sfputc_r+0x1e>
 8008d56:	6994      	ldr	r4, [r2, #24]
 8008d58:	42a3      	cmp	r3, r4
 8008d5a:	db01      	blt.n	8008d60 <__sfputc_r+0x16>
 8008d5c:	290a      	cmp	r1, #10
 8008d5e:	d103      	bne.n	8008d68 <__sfputc_r+0x1e>
 8008d60:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008d64:	f000 b932 	b.w	8008fcc <__swbuf_r>
 8008d68:	6813      	ldr	r3, [r2, #0]
 8008d6a:	1c58      	adds	r0, r3, #1
 8008d6c:	6010      	str	r0, [r2, #0]
 8008d6e:	7019      	strb	r1, [r3, #0]
 8008d70:	4608      	mov	r0, r1
 8008d72:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008d76:	4770      	bx	lr

08008d78 <__sfputs_r>:
 8008d78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d7a:	4606      	mov	r6, r0
 8008d7c:	460f      	mov	r7, r1
 8008d7e:	4614      	mov	r4, r2
 8008d80:	18d5      	adds	r5, r2, r3
 8008d82:	42ac      	cmp	r4, r5
 8008d84:	d101      	bne.n	8008d8a <__sfputs_r+0x12>
 8008d86:	2000      	movs	r0, #0
 8008d88:	e007      	b.n	8008d9a <__sfputs_r+0x22>
 8008d8a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008d8e:	463a      	mov	r2, r7
 8008d90:	4630      	mov	r0, r6
 8008d92:	f7ff ffda 	bl	8008d4a <__sfputc_r>
 8008d96:	1c43      	adds	r3, r0, #1
 8008d98:	d1f3      	bne.n	8008d82 <__sfputs_r+0xa>
 8008d9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008d9c <_vfiprintf_r>:
 8008d9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008da0:	460d      	mov	r5, r1
 8008da2:	b09d      	sub	sp, #116	@ 0x74
 8008da4:	4614      	mov	r4, r2
 8008da6:	4698      	mov	r8, r3
 8008da8:	4606      	mov	r6, r0
 8008daa:	b118      	cbz	r0, 8008db4 <_vfiprintf_r+0x18>
 8008dac:	6a03      	ldr	r3, [r0, #32]
 8008dae:	b90b      	cbnz	r3, 8008db4 <_vfiprintf_r+0x18>
 8008db0:	f7fc fdf2 	bl	8005998 <__sinit>
 8008db4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008db6:	07d9      	lsls	r1, r3, #31
 8008db8:	d405      	bmi.n	8008dc6 <_vfiprintf_r+0x2a>
 8008dba:	89ab      	ldrh	r3, [r5, #12]
 8008dbc:	059a      	lsls	r2, r3, #22
 8008dbe:	d402      	bmi.n	8008dc6 <_vfiprintf_r+0x2a>
 8008dc0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008dc2:	f7fc ff02 	bl	8005bca <__retarget_lock_acquire_recursive>
 8008dc6:	89ab      	ldrh	r3, [r5, #12]
 8008dc8:	071b      	lsls	r3, r3, #28
 8008dca:	d501      	bpl.n	8008dd0 <_vfiprintf_r+0x34>
 8008dcc:	692b      	ldr	r3, [r5, #16]
 8008dce:	b99b      	cbnz	r3, 8008df8 <_vfiprintf_r+0x5c>
 8008dd0:	4629      	mov	r1, r5
 8008dd2:	4630      	mov	r0, r6
 8008dd4:	f000 f938 	bl	8009048 <__swsetup_r>
 8008dd8:	b170      	cbz	r0, 8008df8 <_vfiprintf_r+0x5c>
 8008dda:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008ddc:	07dc      	lsls	r4, r3, #31
 8008dde:	d504      	bpl.n	8008dea <_vfiprintf_r+0x4e>
 8008de0:	f04f 30ff 	mov.w	r0, #4294967295
 8008de4:	b01d      	add	sp, #116	@ 0x74
 8008de6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008dea:	89ab      	ldrh	r3, [r5, #12]
 8008dec:	0598      	lsls	r0, r3, #22
 8008dee:	d4f7      	bmi.n	8008de0 <_vfiprintf_r+0x44>
 8008df0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008df2:	f7fc feeb 	bl	8005bcc <__retarget_lock_release_recursive>
 8008df6:	e7f3      	b.n	8008de0 <_vfiprintf_r+0x44>
 8008df8:	2300      	movs	r3, #0
 8008dfa:	9309      	str	r3, [sp, #36]	@ 0x24
 8008dfc:	2320      	movs	r3, #32
 8008dfe:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008e02:	f8cd 800c 	str.w	r8, [sp, #12]
 8008e06:	2330      	movs	r3, #48	@ 0x30
 8008e08:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8008fb8 <_vfiprintf_r+0x21c>
 8008e0c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008e10:	f04f 0901 	mov.w	r9, #1
 8008e14:	4623      	mov	r3, r4
 8008e16:	469a      	mov	sl, r3
 8008e18:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008e1c:	b10a      	cbz	r2, 8008e22 <_vfiprintf_r+0x86>
 8008e1e:	2a25      	cmp	r2, #37	@ 0x25
 8008e20:	d1f9      	bne.n	8008e16 <_vfiprintf_r+0x7a>
 8008e22:	ebba 0b04 	subs.w	fp, sl, r4
 8008e26:	d00b      	beq.n	8008e40 <_vfiprintf_r+0xa4>
 8008e28:	465b      	mov	r3, fp
 8008e2a:	4622      	mov	r2, r4
 8008e2c:	4629      	mov	r1, r5
 8008e2e:	4630      	mov	r0, r6
 8008e30:	f7ff ffa2 	bl	8008d78 <__sfputs_r>
 8008e34:	3001      	adds	r0, #1
 8008e36:	f000 80a7 	beq.w	8008f88 <_vfiprintf_r+0x1ec>
 8008e3a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008e3c:	445a      	add	r2, fp
 8008e3e:	9209      	str	r2, [sp, #36]	@ 0x24
 8008e40:	f89a 3000 	ldrb.w	r3, [sl]
 8008e44:	2b00      	cmp	r3, #0
 8008e46:	f000 809f 	beq.w	8008f88 <_vfiprintf_r+0x1ec>
 8008e4a:	2300      	movs	r3, #0
 8008e4c:	f04f 32ff 	mov.w	r2, #4294967295
 8008e50:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008e54:	f10a 0a01 	add.w	sl, sl, #1
 8008e58:	9304      	str	r3, [sp, #16]
 8008e5a:	9307      	str	r3, [sp, #28]
 8008e5c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008e60:	931a      	str	r3, [sp, #104]	@ 0x68
 8008e62:	4654      	mov	r4, sl
 8008e64:	2205      	movs	r2, #5
 8008e66:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008e6a:	4853      	ldr	r0, [pc, #332]	@ (8008fb8 <_vfiprintf_r+0x21c>)
 8008e6c:	f7f7 f9b8 	bl	80001e0 <memchr>
 8008e70:	9a04      	ldr	r2, [sp, #16]
 8008e72:	b9d8      	cbnz	r0, 8008eac <_vfiprintf_r+0x110>
 8008e74:	06d1      	lsls	r1, r2, #27
 8008e76:	bf44      	itt	mi
 8008e78:	2320      	movmi	r3, #32
 8008e7a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008e7e:	0713      	lsls	r3, r2, #28
 8008e80:	bf44      	itt	mi
 8008e82:	232b      	movmi	r3, #43	@ 0x2b
 8008e84:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008e88:	f89a 3000 	ldrb.w	r3, [sl]
 8008e8c:	2b2a      	cmp	r3, #42	@ 0x2a
 8008e8e:	d015      	beq.n	8008ebc <_vfiprintf_r+0x120>
 8008e90:	9a07      	ldr	r2, [sp, #28]
 8008e92:	4654      	mov	r4, sl
 8008e94:	2000      	movs	r0, #0
 8008e96:	f04f 0c0a 	mov.w	ip, #10
 8008e9a:	4621      	mov	r1, r4
 8008e9c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008ea0:	3b30      	subs	r3, #48	@ 0x30
 8008ea2:	2b09      	cmp	r3, #9
 8008ea4:	d94b      	bls.n	8008f3e <_vfiprintf_r+0x1a2>
 8008ea6:	b1b0      	cbz	r0, 8008ed6 <_vfiprintf_r+0x13a>
 8008ea8:	9207      	str	r2, [sp, #28]
 8008eaa:	e014      	b.n	8008ed6 <_vfiprintf_r+0x13a>
 8008eac:	eba0 0308 	sub.w	r3, r0, r8
 8008eb0:	fa09 f303 	lsl.w	r3, r9, r3
 8008eb4:	4313      	orrs	r3, r2
 8008eb6:	9304      	str	r3, [sp, #16]
 8008eb8:	46a2      	mov	sl, r4
 8008eba:	e7d2      	b.n	8008e62 <_vfiprintf_r+0xc6>
 8008ebc:	9b03      	ldr	r3, [sp, #12]
 8008ebe:	1d19      	adds	r1, r3, #4
 8008ec0:	681b      	ldr	r3, [r3, #0]
 8008ec2:	9103      	str	r1, [sp, #12]
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	bfbb      	ittet	lt
 8008ec8:	425b      	neglt	r3, r3
 8008eca:	f042 0202 	orrlt.w	r2, r2, #2
 8008ece:	9307      	strge	r3, [sp, #28]
 8008ed0:	9307      	strlt	r3, [sp, #28]
 8008ed2:	bfb8      	it	lt
 8008ed4:	9204      	strlt	r2, [sp, #16]
 8008ed6:	7823      	ldrb	r3, [r4, #0]
 8008ed8:	2b2e      	cmp	r3, #46	@ 0x2e
 8008eda:	d10a      	bne.n	8008ef2 <_vfiprintf_r+0x156>
 8008edc:	7863      	ldrb	r3, [r4, #1]
 8008ede:	2b2a      	cmp	r3, #42	@ 0x2a
 8008ee0:	d132      	bne.n	8008f48 <_vfiprintf_r+0x1ac>
 8008ee2:	9b03      	ldr	r3, [sp, #12]
 8008ee4:	1d1a      	adds	r2, r3, #4
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	9203      	str	r2, [sp, #12]
 8008eea:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008eee:	3402      	adds	r4, #2
 8008ef0:	9305      	str	r3, [sp, #20]
 8008ef2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8008fc8 <_vfiprintf_r+0x22c>
 8008ef6:	7821      	ldrb	r1, [r4, #0]
 8008ef8:	2203      	movs	r2, #3
 8008efa:	4650      	mov	r0, sl
 8008efc:	f7f7 f970 	bl	80001e0 <memchr>
 8008f00:	b138      	cbz	r0, 8008f12 <_vfiprintf_r+0x176>
 8008f02:	9b04      	ldr	r3, [sp, #16]
 8008f04:	eba0 000a 	sub.w	r0, r0, sl
 8008f08:	2240      	movs	r2, #64	@ 0x40
 8008f0a:	4082      	lsls	r2, r0
 8008f0c:	4313      	orrs	r3, r2
 8008f0e:	3401      	adds	r4, #1
 8008f10:	9304      	str	r3, [sp, #16]
 8008f12:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008f16:	4829      	ldr	r0, [pc, #164]	@ (8008fbc <_vfiprintf_r+0x220>)
 8008f18:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008f1c:	2206      	movs	r2, #6
 8008f1e:	f7f7 f95f 	bl	80001e0 <memchr>
 8008f22:	2800      	cmp	r0, #0
 8008f24:	d03f      	beq.n	8008fa6 <_vfiprintf_r+0x20a>
 8008f26:	4b26      	ldr	r3, [pc, #152]	@ (8008fc0 <_vfiprintf_r+0x224>)
 8008f28:	bb1b      	cbnz	r3, 8008f72 <_vfiprintf_r+0x1d6>
 8008f2a:	9b03      	ldr	r3, [sp, #12]
 8008f2c:	3307      	adds	r3, #7
 8008f2e:	f023 0307 	bic.w	r3, r3, #7
 8008f32:	3308      	adds	r3, #8
 8008f34:	9303      	str	r3, [sp, #12]
 8008f36:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008f38:	443b      	add	r3, r7
 8008f3a:	9309      	str	r3, [sp, #36]	@ 0x24
 8008f3c:	e76a      	b.n	8008e14 <_vfiprintf_r+0x78>
 8008f3e:	fb0c 3202 	mla	r2, ip, r2, r3
 8008f42:	460c      	mov	r4, r1
 8008f44:	2001      	movs	r0, #1
 8008f46:	e7a8      	b.n	8008e9a <_vfiprintf_r+0xfe>
 8008f48:	2300      	movs	r3, #0
 8008f4a:	3401      	adds	r4, #1
 8008f4c:	9305      	str	r3, [sp, #20]
 8008f4e:	4619      	mov	r1, r3
 8008f50:	f04f 0c0a 	mov.w	ip, #10
 8008f54:	4620      	mov	r0, r4
 8008f56:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008f5a:	3a30      	subs	r2, #48	@ 0x30
 8008f5c:	2a09      	cmp	r2, #9
 8008f5e:	d903      	bls.n	8008f68 <_vfiprintf_r+0x1cc>
 8008f60:	2b00      	cmp	r3, #0
 8008f62:	d0c6      	beq.n	8008ef2 <_vfiprintf_r+0x156>
 8008f64:	9105      	str	r1, [sp, #20]
 8008f66:	e7c4      	b.n	8008ef2 <_vfiprintf_r+0x156>
 8008f68:	fb0c 2101 	mla	r1, ip, r1, r2
 8008f6c:	4604      	mov	r4, r0
 8008f6e:	2301      	movs	r3, #1
 8008f70:	e7f0      	b.n	8008f54 <_vfiprintf_r+0x1b8>
 8008f72:	ab03      	add	r3, sp, #12
 8008f74:	9300      	str	r3, [sp, #0]
 8008f76:	462a      	mov	r2, r5
 8008f78:	4b12      	ldr	r3, [pc, #72]	@ (8008fc4 <_vfiprintf_r+0x228>)
 8008f7a:	a904      	add	r1, sp, #16
 8008f7c:	4630      	mov	r0, r6
 8008f7e:	f7fb febb 	bl	8004cf8 <_printf_float>
 8008f82:	4607      	mov	r7, r0
 8008f84:	1c78      	adds	r0, r7, #1
 8008f86:	d1d6      	bne.n	8008f36 <_vfiprintf_r+0x19a>
 8008f88:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008f8a:	07d9      	lsls	r1, r3, #31
 8008f8c:	d405      	bmi.n	8008f9a <_vfiprintf_r+0x1fe>
 8008f8e:	89ab      	ldrh	r3, [r5, #12]
 8008f90:	059a      	lsls	r2, r3, #22
 8008f92:	d402      	bmi.n	8008f9a <_vfiprintf_r+0x1fe>
 8008f94:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008f96:	f7fc fe19 	bl	8005bcc <__retarget_lock_release_recursive>
 8008f9a:	89ab      	ldrh	r3, [r5, #12]
 8008f9c:	065b      	lsls	r3, r3, #25
 8008f9e:	f53f af1f 	bmi.w	8008de0 <_vfiprintf_r+0x44>
 8008fa2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008fa4:	e71e      	b.n	8008de4 <_vfiprintf_r+0x48>
 8008fa6:	ab03      	add	r3, sp, #12
 8008fa8:	9300      	str	r3, [sp, #0]
 8008faa:	462a      	mov	r2, r5
 8008fac:	4b05      	ldr	r3, [pc, #20]	@ (8008fc4 <_vfiprintf_r+0x228>)
 8008fae:	a904      	add	r1, sp, #16
 8008fb0:	4630      	mov	r0, r6
 8008fb2:	f7fc f939 	bl	8005228 <_printf_i>
 8008fb6:	e7e4      	b.n	8008f82 <_vfiprintf_r+0x1e6>
 8008fb8:	080099e1 	.word	0x080099e1
 8008fbc:	080099eb 	.word	0x080099eb
 8008fc0:	08004cf9 	.word	0x08004cf9
 8008fc4:	08008d79 	.word	0x08008d79
 8008fc8:	080099e7 	.word	0x080099e7

08008fcc <__swbuf_r>:
 8008fcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008fce:	460e      	mov	r6, r1
 8008fd0:	4614      	mov	r4, r2
 8008fd2:	4605      	mov	r5, r0
 8008fd4:	b118      	cbz	r0, 8008fde <__swbuf_r+0x12>
 8008fd6:	6a03      	ldr	r3, [r0, #32]
 8008fd8:	b90b      	cbnz	r3, 8008fde <__swbuf_r+0x12>
 8008fda:	f7fc fcdd 	bl	8005998 <__sinit>
 8008fde:	69a3      	ldr	r3, [r4, #24]
 8008fe0:	60a3      	str	r3, [r4, #8]
 8008fe2:	89a3      	ldrh	r3, [r4, #12]
 8008fe4:	071a      	lsls	r2, r3, #28
 8008fe6:	d501      	bpl.n	8008fec <__swbuf_r+0x20>
 8008fe8:	6923      	ldr	r3, [r4, #16]
 8008fea:	b943      	cbnz	r3, 8008ffe <__swbuf_r+0x32>
 8008fec:	4621      	mov	r1, r4
 8008fee:	4628      	mov	r0, r5
 8008ff0:	f000 f82a 	bl	8009048 <__swsetup_r>
 8008ff4:	b118      	cbz	r0, 8008ffe <__swbuf_r+0x32>
 8008ff6:	f04f 37ff 	mov.w	r7, #4294967295
 8008ffa:	4638      	mov	r0, r7
 8008ffc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008ffe:	6823      	ldr	r3, [r4, #0]
 8009000:	6922      	ldr	r2, [r4, #16]
 8009002:	1a98      	subs	r0, r3, r2
 8009004:	6963      	ldr	r3, [r4, #20]
 8009006:	b2f6      	uxtb	r6, r6
 8009008:	4283      	cmp	r3, r0
 800900a:	4637      	mov	r7, r6
 800900c:	dc05      	bgt.n	800901a <__swbuf_r+0x4e>
 800900e:	4621      	mov	r1, r4
 8009010:	4628      	mov	r0, r5
 8009012:	f7ff fa47 	bl	80084a4 <_fflush_r>
 8009016:	2800      	cmp	r0, #0
 8009018:	d1ed      	bne.n	8008ff6 <__swbuf_r+0x2a>
 800901a:	68a3      	ldr	r3, [r4, #8]
 800901c:	3b01      	subs	r3, #1
 800901e:	60a3      	str	r3, [r4, #8]
 8009020:	6823      	ldr	r3, [r4, #0]
 8009022:	1c5a      	adds	r2, r3, #1
 8009024:	6022      	str	r2, [r4, #0]
 8009026:	701e      	strb	r6, [r3, #0]
 8009028:	6962      	ldr	r2, [r4, #20]
 800902a:	1c43      	adds	r3, r0, #1
 800902c:	429a      	cmp	r2, r3
 800902e:	d004      	beq.n	800903a <__swbuf_r+0x6e>
 8009030:	89a3      	ldrh	r3, [r4, #12]
 8009032:	07db      	lsls	r3, r3, #31
 8009034:	d5e1      	bpl.n	8008ffa <__swbuf_r+0x2e>
 8009036:	2e0a      	cmp	r6, #10
 8009038:	d1df      	bne.n	8008ffa <__swbuf_r+0x2e>
 800903a:	4621      	mov	r1, r4
 800903c:	4628      	mov	r0, r5
 800903e:	f7ff fa31 	bl	80084a4 <_fflush_r>
 8009042:	2800      	cmp	r0, #0
 8009044:	d0d9      	beq.n	8008ffa <__swbuf_r+0x2e>
 8009046:	e7d6      	b.n	8008ff6 <__swbuf_r+0x2a>

08009048 <__swsetup_r>:
 8009048:	b538      	push	{r3, r4, r5, lr}
 800904a:	4b29      	ldr	r3, [pc, #164]	@ (80090f0 <__swsetup_r+0xa8>)
 800904c:	4605      	mov	r5, r0
 800904e:	6818      	ldr	r0, [r3, #0]
 8009050:	460c      	mov	r4, r1
 8009052:	b118      	cbz	r0, 800905c <__swsetup_r+0x14>
 8009054:	6a03      	ldr	r3, [r0, #32]
 8009056:	b90b      	cbnz	r3, 800905c <__swsetup_r+0x14>
 8009058:	f7fc fc9e 	bl	8005998 <__sinit>
 800905c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009060:	0719      	lsls	r1, r3, #28
 8009062:	d422      	bmi.n	80090aa <__swsetup_r+0x62>
 8009064:	06da      	lsls	r2, r3, #27
 8009066:	d407      	bmi.n	8009078 <__swsetup_r+0x30>
 8009068:	2209      	movs	r2, #9
 800906a:	602a      	str	r2, [r5, #0]
 800906c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009070:	81a3      	strh	r3, [r4, #12]
 8009072:	f04f 30ff 	mov.w	r0, #4294967295
 8009076:	e033      	b.n	80090e0 <__swsetup_r+0x98>
 8009078:	0758      	lsls	r0, r3, #29
 800907a:	d512      	bpl.n	80090a2 <__swsetup_r+0x5a>
 800907c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800907e:	b141      	cbz	r1, 8009092 <__swsetup_r+0x4a>
 8009080:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009084:	4299      	cmp	r1, r3
 8009086:	d002      	beq.n	800908e <__swsetup_r+0x46>
 8009088:	4628      	mov	r0, r5
 800908a:	f7fd fc01 	bl	8006890 <_free_r>
 800908e:	2300      	movs	r3, #0
 8009090:	6363      	str	r3, [r4, #52]	@ 0x34
 8009092:	89a3      	ldrh	r3, [r4, #12]
 8009094:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8009098:	81a3      	strh	r3, [r4, #12]
 800909a:	2300      	movs	r3, #0
 800909c:	6063      	str	r3, [r4, #4]
 800909e:	6923      	ldr	r3, [r4, #16]
 80090a0:	6023      	str	r3, [r4, #0]
 80090a2:	89a3      	ldrh	r3, [r4, #12]
 80090a4:	f043 0308 	orr.w	r3, r3, #8
 80090a8:	81a3      	strh	r3, [r4, #12]
 80090aa:	6923      	ldr	r3, [r4, #16]
 80090ac:	b94b      	cbnz	r3, 80090c2 <__swsetup_r+0x7a>
 80090ae:	89a3      	ldrh	r3, [r4, #12]
 80090b0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80090b4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80090b8:	d003      	beq.n	80090c2 <__swsetup_r+0x7a>
 80090ba:	4621      	mov	r1, r4
 80090bc:	4628      	mov	r0, r5
 80090be:	f000 f883 	bl	80091c8 <__smakebuf_r>
 80090c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80090c6:	f013 0201 	ands.w	r2, r3, #1
 80090ca:	d00a      	beq.n	80090e2 <__swsetup_r+0x9a>
 80090cc:	2200      	movs	r2, #0
 80090ce:	60a2      	str	r2, [r4, #8]
 80090d0:	6962      	ldr	r2, [r4, #20]
 80090d2:	4252      	negs	r2, r2
 80090d4:	61a2      	str	r2, [r4, #24]
 80090d6:	6922      	ldr	r2, [r4, #16]
 80090d8:	b942      	cbnz	r2, 80090ec <__swsetup_r+0xa4>
 80090da:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80090de:	d1c5      	bne.n	800906c <__swsetup_r+0x24>
 80090e0:	bd38      	pop	{r3, r4, r5, pc}
 80090e2:	0799      	lsls	r1, r3, #30
 80090e4:	bf58      	it	pl
 80090e6:	6962      	ldrpl	r2, [r4, #20]
 80090e8:	60a2      	str	r2, [r4, #8]
 80090ea:	e7f4      	b.n	80090d6 <__swsetup_r+0x8e>
 80090ec:	2000      	movs	r0, #0
 80090ee:	e7f7      	b.n	80090e0 <__swsetup_r+0x98>
 80090f0:	20000018 	.word	0x20000018

080090f4 <_raise_r>:
 80090f4:	291f      	cmp	r1, #31
 80090f6:	b538      	push	{r3, r4, r5, lr}
 80090f8:	4605      	mov	r5, r0
 80090fa:	460c      	mov	r4, r1
 80090fc:	d904      	bls.n	8009108 <_raise_r+0x14>
 80090fe:	2316      	movs	r3, #22
 8009100:	6003      	str	r3, [r0, #0]
 8009102:	f04f 30ff 	mov.w	r0, #4294967295
 8009106:	bd38      	pop	{r3, r4, r5, pc}
 8009108:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800910a:	b112      	cbz	r2, 8009112 <_raise_r+0x1e>
 800910c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009110:	b94b      	cbnz	r3, 8009126 <_raise_r+0x32>
 8009112:	4628      	mov	r0, r5
 8009114:	f000 f830 	bl	8009178 <_getpid_r>
 8009118:	4622      	mov	r2, r4
 800911a:	4601      	mov	r1, r0
 800911c:	4628      	mov	r0, r5
 800911e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009122:	f000 b817 	b.w	8009154 <_kill_r>
 8009126:	2b01      	cmp	r3, #1
 8009128:	d00a      	beq.n	8009140 <_raise_r+0x4c>
 800912a:	1c59      	adds	r1, r3, #1
 800912c:	d103      	bne.n	8009136 <_raise_r+0x42>
 800912e:	2316      	movs	r3, #22
 8009130:	6003      	str	r3, [r0, #0]
 8009132:	2001      	movs	r0, #1
 8009134:	e7e7      	b.n	8009106 <_raise_r+0x12>
 8009136:	2100      	movs	r1, #0
 8009138:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800913c:	4620      	mov	r0, r4
 800913e:	4798      	blx	r3
 8009140:	2000      	movs	r0, #0
 8009142:	e7e0      	b.n	8009106 <_raise_r+0x12>

08009144 <raise>:
 8009144:	4b02      	ldr	r3, [pc, #8]	@ (8009150 <raise+0xc>)
 8009146:	4601      	mov	r1, r0
 8009148:	6818      	ldr	r0, [r3, #0]
 800914a:	f7ff bfd3 	b.w	80090f4 <_raise_r>
 800914e:	bf00      	nop
 8009150:	20000018 	.word	0x20000018

08009154 <_kill_r>:
 8009154:	b538      	push	{r3, r4, r5, lr}
 8009156:	4d07      	ldr	r5, [pc, #28]	@ (8009174 <_kill_r+0x20>)
 8009158:	2300      	movs	r3, #0
 800915a:	4604      	mov	r4, r0
 800915c:	4608      	mov	r0, r1
 800915e:	4611      	mov	r1, r2
 8009160:	602b      	str	r3, [r5, #0]
 8009162:	f7f8 fb7d 	bl	8001860 <_kill>
 8009166:	1c43      	adds	r3, r0, #1
 8009168:	d102      	bne.n	8009170 <_kill_r+0x1c>
 800916a:	682b      	ldr	r3, [r5, #0]
 800916c:	b103      	cbz	r3, 8009170 <_kill_r+0x1c>
 800916e:	6023      	str	r3, [r4, #0]
 8009170:	bd38      	pop	{r3, r4, r5, pc}
 8009172:	bf00      	nop
 8009174:	200004d8 	.word	0x200004d8

08009178 <_getpid_r>:
 8009178:	f7f8 bb6a 	b.w	8001850 <_getpid>

0800917c <__swhatbuf_r>:
 800917c:	b570      	push	{r4, r5, r6, lr}
 800917e:	460c      	mov	r4, r1
 8009180:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009184:	2900      	cmp	r1, #0
 8009186:	b096      	sub	sp, #88	@ 0x58
 8009188:	4615      	mov	r5, r2
 800918a:	461e      	mov	r6, r3
 800918c:	da0d      	bge.n	80091aa <__swhatbuf_r+0x2e>
 800918e:	89a3      	ldrh	r3, [r4, #12]
 8009190:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8009194:	f04f 0100 	mov.w	r1, #0
 8009198:	bf14      	ite	ne
 800919a:	2340      	movne	r3, #64	@ 0x40
 800919c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80091a0:	2000      	movs	r0, #0
 80091a2:	6031      	str	r1, [r6, #0]
 80091a4:	602b      	str	r3, [r5, #0]
 80091a6:	b016      	add	sp, #88	@ 0x58
 80091a8:	bd70      	pop	{r4, r5, r6, pc}
 80091aa:	466a      	mov	r2, sp
 80091ac:	f000 f848 	bl	8009240 <_fstat_r>
 80091b0:	2800      	cmp	r0, #0
 80091b2:	dbec      	blt.n	800918e <__swhatbuf_r+0x12>
 80091b4:	9901      	ldr	r1, [sp, #4]
 80091b6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80091ba:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80091be:	4259      	negs	r1, r3
 80091c0:	4159      	adcs	r1, r3
 80091c2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80091c6:	e7eb      	b.n	80091a0 <__swhatbuf_r+0x24>

080091c8 <__smakebuf_r>:
 80091c8:	898b      	ldrh	r3, [r1, #12]
 80091ca:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80091cc:	079d      	lsls	r5, r3, #30
 80091ce:	4606      	mov	r6, r0
 80091d0:	460c      	mov	r4, r1
 80091d2:	d507      	bpl.n	80091e4 <__smakebuf_r+0x1c>
 80091d4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80091d8:	6023      	str	r3, [r4, #0]
 80091da:	6123      	str	r3, [r4, #16]
 80091dc:	2301      	movs	r3, #1
 80091de:	6163      	str	r3, [r4, #20]
 80091e0:	b003      	add	sp, #12
 80091e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80091e4:	ab01      	add	r3, sp, #4
 80091e6:	466a      	mov	r2, sp
 80091e8:	f7ff ffc8 	bl	800917c <__swhatbuf_r>
 80091ec:	9f00      	ldr	r7, [sp, #0]
 80091ee:	4605      	mov	r5, r0
 80091f0:	4639      	mov	r1, r7
 80091f2:	4630      	mov	r0, r6
 80091f4:	f7fd fbc0 	bl	8006978 <_malloc_r>
 80091f8:	b948      	cbnz	r0, 800920e <__smakebuf_r+0x46>
 80091fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80091fe:	059a      	lsls	r2, r3, #22
 8009200:	d4ee      	bmi.n	80091e0 <__smakebuf_r+0x18>
 8009202:	f023 0303 	bic.w	r3, r3, #3
 8009206:	f043 0302 	orr.w	r3, r3, #2
 800920a:	81a3      	strh	r3, [r4, #12]
 800920c:	e7e2      	b.n	80091d4 <__smakebuf_r+0xc>
 800920e:	89a3      	ldrh	r3, [r4, #12]
 8009210:	6020      	str	r0, [r4, #0]
 8009212:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009216:	81a3      	strh	r3, [r4, #12]
 8009218:	9b01      	ldr	r3, [sp, #4]
 800921a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800921e:	b15b      	cbz	r3, 8009238 <__smakebuf_r+0x70>
 8009220:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009224:	4630      	mov	r0, r6
 8009226:	f000 f81d 	bl	8009264 <_isatty_r>
 800922a:	b128      	cbz	r0, 8009238 <__smakebuf_r+0x70>
 800922c:	89a3      	ldrh	r3, [r4, #12]
 800922e:	f023 0303 	bic.w	r3, r3, #3
 8009232:	f043 0301 	orr.w	r3, r3, #1
 8009236:	81a3      	strh	r3, [r4, #12]
 8009238:	89a3      	ldrh	r3, [r4, #12]
 800923a:	431d      	orrs	r5, r3
 800923c:	81a5      	strh	r5, [r4, #12]
 800923e:	e7cf      	b.n	80091e0 <__smakebuf_r+0x18>

08009240 <_fstat_r>:
 8009240:	b538      	push	{r3, r4, r5, lr}
 8009242:	4d07      	ldr	r5, [pc, #28]	@ (8009260 <_fstat_r+0x20>)
 8009244:	2300      	movs	r3, #0
 8009246:	4604      	mov	r4, r0
 8009248:	4608      	mov	r0, r1
 800924a:	4611      	mov	r1, r2
 800924c:	602b      	str	r3, [r5, #0]
 800924e:	f7f8 fb67 	bl	8001920 <_fstat>
 8009252:	1c43      	adds	r3, r0, #1
 8009254:	d102      	bne.n	800925c <_fstat_r+0x1c>
 8009256:	682b      	ldr	r3, [r5, #0]
 8009258:	b103      	cbz	r3, 800925c <_fstat_r+0x1c>
 800925a:	6023      	str	r3, [r4, #0]
 800925c:	bd38      	pop	{r3, r4, r5, pc}
 800925e:	bf00      	nop
 8009260:	200004d8 	.word	0x200004d8

08009264 <_isatty_r>:
 8009264:	b538      	push	{r3, r4, r5, lr}
 8009266:	4d06      	ldr	r5, [pc, #24]	@ (8009280 <_isatty_r+0x1c>)
 8009268:	2300      	movs	r3, #0
 800926a:	4604      	mov	r4, r0
 800926c:	4608      	mov	r0, r1
 800926e:	602b      	str	r3, [r5, #0]
 8009270:	f7f8 fb66 	bl	8001940 <_isatty>
 8009274:	1c43      	adds	r3, r0, #1
 8009276:	d102      	bne.n	800927e <_isatty_r+0x1a>
 8009278:	682b      	ldr	r3, [r5, #0]
 800927a:	b103      	cbz	r3, 800927e <_isatty_r+0x1a>
 800927c:	6023      	str	r3, [r4, #0]
 800927e:	bd38      	pop	{r3, r4, r5, pc}
 8009280:	200004d8 	.word	0x200004d8

08009284 <_init>:
 8009284:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009286:	bf00      	nop
 8009288:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800928a:	bc08      	pop	{r3}
 800928c:	469e      	mov	lr, r3
 800928e:	4770      	bx	lr

08009290 <_fini>:
 8009290:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009292:	bf00      	nop
 8009294:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009296:	bc08      	pop	{r3}
 8009298:	469e      	mov	lr, r3
 800929a:	4770      	bx	lr
